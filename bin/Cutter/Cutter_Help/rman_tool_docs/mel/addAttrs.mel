
// Assumes the transform node and NOT the shape node of an object is selected.
proc addIntAttr(string $name, float $value) { 
	string $sel[] = `ls -sl`;
	for($current in $sel) {
	    string $shapes[] = `listRelatives -s $current`;
	    string $shape = $shapes[0];
	    if(size($shape) == 0)
	        continue;
	    if(attributeExists($name, $shape) == 0)
	        addAttr -ln $name -sn $name -at short  -k 1 $shape;
	    setAttr ($shape + "." + $name) $value;
	    }
	}
proc addFloatAttr(string $name, float $value) { 
	string $sel[] = `ls -sl`;
	for($current in $sel) {
	    string $shapes[] = `listRelatives -s $current`;
	    string $shape = $shapes[0];
	    if(size($shape) == 0)
	        continue;
	    if(attributeExists($name, $shape) == 0)
	        addAttr -ln $name -sn $name -k 1 $shape;
	    setAttr ($shape + "." + $name) $value;
	    }
	}
proc addBoolAttr(string $name, int $state) { 
	string $sel[] = `ls -sl`;
	for($current in $sel) {
	    string $shapes[] = `listRelatives -s $current`;
	    string $shape = $shapes[0];
	    if(size($shape) == 0)
	        continue;
	    if(attributeExists($name, $shape) == 0)
	        addAttr -ln $name -at bool;
	    if($state == 0)
	        setAttr -e-keyable false ($shape + "." + $name);
	    else
	        setAttr -e-keyable true ($shape + "." + $name);
	    }
	}
proc addColorAttr(string $name, float $r, float $g, float $b) { 
	string $sel[] = `ls -sl`;
	for($current in $sel) {
	    string $shapes[] = `listRelatives -s $current`;
	    string $shape = $shapes[0];
	    if(size($shape) == 0)
	        continue;
	    if(attributeExists($name, $shape) == 0) {
	        addAttr -ln $name -sn $name -at "float3" -usedAsColor -k 1 $shape;
	        $red = $name + "_r";
	        $green = $name + "_g";
	        $blue = $name + "_blue";
	        addAttr -ln $red -at "float" -k 1 -parent $name $shape;
	        addAttr -ln $green -at "float" -k 1 -parent $name $shape;
	        addAttr -ln $blue -at "float" -k 1 -parent $name $shape;
	        }
	    setAttr ($shape + "." + $name) -type "float3" $r $g $b;
	    }
	}
proc addVectorAttr(string $name, float $r, float $g, float $b) { 
	string $sel[] = `ls -sl`;
	for($current in $sel) {
	    string $shapes[] = `listRelatives -s $current`;
	    string $shape = $shapes[0];
	    if(size($shape) == 0)
	        continue;
	    if(attributeExists($name, $shape) == 0) {
	        addAttr -ln $name -sn $name -at "float3" -k 1 $shape;
			$red = $name + "_r";
			$green = $name + "_g";
			$blue = $name + "_blue";
			addAttr -ln $red -at "float" -k 1 -parent $name $shape;
			addAttr -ln $green -at "float" -k 1 -parent $name $shape;
			addAttr -ln $blue -at "float" -k 1 -parent $name $shape;
	        }
	    setAttr ($shape + "." + $name) -type "float3" $r $g $b;
	    }
	}
proc addStringAttr(string $name, string $value) {
	string  $sel[] = `ls -sl`;
	for($current in $sel) {
	    string $shapes[] = `listRelatives -s $current`;
	    string $shape = $shapes[0];
	    if(size($shape) == 0)
	        continue;
	    if(attributeExists($name, $shape) == 0)
	        addAttr -ln $name -nn $name -dt "string" $shape;
	    setAttr ($shape + ("." + $name)) -type "string" $value;
	    }
	}
 
// SCRIPT_END