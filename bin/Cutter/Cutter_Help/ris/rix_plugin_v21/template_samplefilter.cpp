/* 
 _CLASSNAME_.cpp
 Generated by Cutter from:
     "_ARGS_SOURCE_PATH_"
 at _DATE_TIME_
*/
#include "RixSampleFilter.h"

class _CLASSNAME_ : public RixSampleFilter {
public:
	virtual int Init(RixContext &ctx, char const *pluginPath);
	virtual void Finalize(RixContext &ctx);
	virtual RixSCParamInfo const *GetParamTable();
	virtual void CreateInstanceData(RixContext &ctx,
								   char const *handle,
								   RixParameterList const *parms,
								   InstanceData *instanceData);
	static void ReleaseInstanceData(RtPointer data);
	virtual void Filter(RixSampleFilterContext &fCtx, RtConstPointer data);
	private:
_DECLARE_DSPY_PARAMS_STRUCT_
	};

int _CLASSNAME_::Init(RixContext &ctx, char const *pluginPath) {
	return 0;
	}

void _CLASSNAME_::Finalize(RixContext &ctx) { }

enum paramIndex {
_FILL_PARAM_ENUMERATION_
    };

RixSCParamInfo const *_CLASSNAME_::GetParamTable() {
    static RixSCParamInfo s_ptable[] = {
_FILL_PARAM_TABLE_
        };
    return &s_ptable[0];
    }

void _CLASSNAME_::CreateInstanceData(RixContext &ctx, 
											 char const *handle,
											 RixParameterList const *params,
											 InstanceData *instanceData) {
	// "Install" our dspyParams data structure in the memory pointed
	// to by instanceData.
    instanceData->datalen = sizeof(dspyParams);
    instanceData->data = malloc(instanceData->datalen);
    instanceData->freefunc = free;
    dspyParams *dp = reinterpret_cast< dspyParams* >(instanceData->data);

	// Default values read from the .args file 
_ASSIGN_TO_DSPY_PARAMS_PTR_
_DECLARE_STRINGS_
	// Update values from any connections
_EVAL_INPUTS_
	RixRenderState *renderState = static_cast< RixRenderState* >(ctx.GetRixInterface(k_RixRenderState));

	RixRenderState::FrameInfo frameInfo;
	renderState->GetFrameInfo(&frameInfo);
	RixIntegratorEnvironment const *integratorEnv = frameInfo.integratorEnv;

	assert(integratorEnv->GetDisplayChannel("Ci"));
	dp->colorId = integratorEnv->GetDisplayChannel("Ci")->id;
	assert(integratorEnv->GetDisplayChannel("a"));
	dp->alphaId = integratorEnv->GetDisplayChannel("a")->id;

	return;
	}

void _CLASSNAME_::ReleaseInstanceData(RtPointer data) {
	// Normally empty
	}

void _CLASSNAME_::Filter(RixSampleFilterContext &fCtx, RtConstPointer instance) {
	dspyParams const *dp = reinterpret_cast< dspyParams const* >(instance);
	
	RtColorRGB origPixel;
	RtFloat alpha;
	for(int i = 0; i < fCtx.numSamples; ++i) {
		// Grab the original sample values
		fCtx.Read(dp->colorId, i, origPixel);		
		fCtx.Read(dp->alphaId, i, alpha);
		// Use the inputs to calculate a new value.
		/*
_LIST_OF_POINTERS_

		RtColorRGB result = ???;
		fCtx.Write(dp->colorId, x, y, result);
		*/
		}		
	}

RIX_SAMPLEFILTERCREATE {
	return new _CLASSNAME_();
	}

RIX_SAMPLEFILTERDESTROY {
	delete reinterpret_cast<_CLASSNAME_*>(filter);
	}
