{"body": [{"indent": 0, "text": [{"text": ["HOM Cookbook"], "type": "supertitle"}, " Python SOPs"], "type": "title", "extent": [0, 32], "level": 0}, {"body": [{"indent": 0, "type": "para", "extent": [48, 438], "text": ["You can create geometry node (SOP) assets that are ", {"text": ["defined by a Python script"], "fullpath": "/hom/pythonsop", "scheme": null, "type": "link", "value": "../pythonsop"}, " instead of a subnetwork of nodes (", {"text": ["File \u25b8 New operator type"], "type": "ui"}, ", click ", {"text": ["Python type"], "type": "ui"}, ", set ", {"text": ["Network type"], "type": "ui"}, " to \"Geometry\"). This example defines a Python SOP that copies its input, creates a Cd (diffuse color) point attribute, and assigns each point a color based on the distance to a position."]}], "indent": 0, "level": 2, "text": ["Overview"], "extent": [32, 48], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"indent": 0, "blevel": 2, "type": "ord", "extent": [458, 525], "text": ["Open ", {"text": ["$HFS/houdini/help/files/hom_cookbook/color_falloff.hip"], "type": "code"}, "."]}, {"indent": 0, "blevel": 2, "type": "ord", "extent": [525, 573], "text": ["Click the ", {"text": "", "fullpath": "/hom/cb/TOOLS/handles", "scheme": "Icon", "type": "link", "value": "TOOLS/handles"}, " Handles tool."]}, {"indent": 0, "blevel": 2, "type": "ord", "extent": [573, 682], "text": ["Move the location handle around and change the ", {"text": ["Falloff"], "type": "ui"}, " parameter to see how they affect the coloring."]}, {"indent": 0, "blevel": 2, "type": "ord", "extent": [682, 819], "text": ["Right-click the ", {"text": ["color_falloff1"], "type": "code"}, " node and choose ", {"text": ["Type properties"], "type": "ui"}, " to open the asset\u2019s ", {"text": ["type properties window"], "fullpath": "/ref/window/optype", "scheme": null, "type": "link", "value": "/ref/window/optype"}, "."]}], "container": true, "type": "ord_group"}, {"body": [{"indent": 0, "blevel": 2, "type": "bullet", "extent": [819, 937], "text": ["We created ", {"text": ["Position"], "type": "ui"}, " and ", {"text": ["Falloff"], "type": "ui"}, " parameters in the ", {"text": ["Parameters"], "type": "ui"}, " tab, just as we would for a normal asset."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [937, 1015], "text": ["In the ", {"text": ["Handles"], "type": "ui"}, " tab we bound a translate handle to the ", {"text": ["pos"], "type": "code"}, " parameter."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [1015, 1091], "text": ["The ", {"text": ["Code"], "type": "ui"}, " tab contains the Python code implementing the node\u2019s logic."]}], "container": true, "type": "bullet_group"}, {"lang": "python", "indent": 0, "type": "pre", "extent": [1091, 2439], "text": ["\n# When an instance of this Python SOP cooks, Houdini will have set hou.pwd()\n# to the Python SOP instance.  Access the hou.Geometry object for this SOP.\n# Since we're calling from hou.SopNode.geometry from a Python SOP\n# implementation, we'll have write access to the geometry.\ngeo = hou.pwd().geometry()\n\n# Create the \"Cd\" point attribute value, giving it a default value of white\n# (1, 1, 1), and store the returned hou.Attrib object.\ncd = geo.addAttrib(hou.attribType.Point, \"Cd\", (1.0, 1.0, 1.0))\n\n# Evaluate the pos parm tuple, and create a hou.Vector3 out of it so we can\n# later do vector subtraction.  Also evaluate the falloff value.\npos = hou.Vector3(hou.parmTuple(\"pos\").eval())\nfalloff = max(hou.ch(\"falloff\"), 0.0001)\n\nfor point in geo.points():\n    # Compute the distance from this point to the position parameter, divide\n    # the distance by the falloff value, and clamp it to be between 0 and 1.\n    distance = (point.position() - pos).length()\n    value = min(distance / falloff, 1.0)\n\n    # Create a color object, and set the hue and value of the color based on\n    # the normalized distance.\n    color = hou.Color()\n    color.setHSV((value * 256, 1.0, value))\n\n    # Extract the RGB values from the color object and store them in this\n    # point's Cd attribute value.\n    point.setAttribValue(cd, color.rgb())\n"]}], "indent": 0, "level": 2, "text": ["Color Falloff"], "extent": [438, 458], "container": true, "type": "h", "id": null}, {"body": [{"indent": 0, "type": "para", "extent": [2459, 2653], "text": ["This Python SOP copies its input, assigns a rainbow of colors to the input surface, and evenly distributes polylines normal to the surface, creating the appearance of \"quills\" on the surface."]}, {"body": [{"indent": 0, "blevel": 2, "type": "ord", "extent": [2653, 2719], "text": ["Open ", {"text": ["$HFS/houdini/help/files/hom_cookbook/surface_wires.hip"], "type": "code"}, "."]}, {"indent": 0, "blevel": 2, "type": "ord", "extent": [2719, 2878], "text": ["Right-click the ", {"text": ["surface_wires1"], "type": "code"}, " node inside ", {"text": ["grid_object1"], "type": "code"}, " and choose ", {"text": ["Type properties"], "type": "ui"}, " to open the asset\u2019s ", {"text": ["type properties window"], "fullpath": "/ref/window/optype", "scheme": null, "type": "link", "value": "/ref/window/optype"}, "."]}], "container": true, "type": "ord_group"}, {"body": [{"indent": 0, "blevel": 2, "type": "bullet", "extent": [2878, 3006], "text": ["We created parameters for the number of divisions and length in the ", {"text": ["Parameters"], "type": "ui"}, " tab, just as we would for a normal asset."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [3006, 3082], "text": ["The ", {"text": ["Code"], "type": "ui"}, " tab contains the Python code implementing the node\u2019s logic."]}], "container": true, "type": "bullet_group"}, {"lang": "python", "indent": 0, "type": "pre", "extent": [3082, 5342], "text": ["\n\n# When an instance of this Python SOP cooks, Houdini will have set hou.pwd()\n# to the Python SOP instance.  Access the hou.Geometry object for this SOP.\n# Since we're calling from hou.SopNode.geometry from a Python SOP\n# implementation, we'll have write access to the geometry.\ngeo = hou.pwd().geometry()\n\n# Create a Cd (color) point attribute.\ncolor_attrib = geo.addAttrib(hou.attribType.Point, \"Cd\", (1.0, 1.0, 1.0))\n\n# Assign each point a unique hue value, with constant saturation and value.\nnum_points = len(geo.iterPoints())\ncolor = hou.Color()\nfor point in geo.points():\n    fraction = float(point.number()) / num_points\n    color.setHSV(((fraction * 255), 1, 1))\n    # The attribute stores RGB values, so ask for the color in RGB format.\n    point.setAttribValue(color_attrib, color.rgb())\n\n# This sop requires that the first primitive is a surface.\nsurf = None\nif len(geo.iterPrims()) != 0:\n    surf = geo.iterPrims()[0]\nif not isinstance(surf, hou.Surface):\n    raise hou.Error(\"The first primitive must be a surface\")\n\n# Evaluate the surface at uniformly distributed positions.  For each\n# point we evaluate, create a line facing outwards from the surface,\n# and give it the color at the surface.\nu_divisions = hou.evalParm(\"u_divisions\")\nv_divisions = hou.evalParm(\"v_divisions\")\nwire_length = hou.evalParm(\"wire_length\")\nfor u_index in range(u_divisions + 1):\n    u = float(u_index) / u_divisions\n    for v_index in range(v_divisions + 1):\n        v = float(v_index) / v_divisions\n\n        # Compute the position of the surface, and add the normal\n        # vector (scaled by 2) to define the two points of the line.\n        pos0 = surf.positionAt(u, v)\n        pos1 = pos0 + surf.normalAt(u, v) * wire_length\n\n        # Compute the color of the polygon and create it.  It will\n        # be open, since it's a line.\n        color = surf.attribValueAt(color_attrib, u, v)\n        poly = geo.createPolygon()\n        poly.setIsClosed(False)\n\n        # Create the points, set their position and color, and\n        # add them to the polygon.\n        for pos in pos0, pos1:\n            point = geo.createPoint()\n            point.setPosition(pos)\n            point.setAttribValue(color_attrib, color)\n            poly.addVertex(point)\n"]}], "indent": 0, "level": 2, "text": ["Color quills"], "extent": [2439, 2459], "container": true, "type": "h", "id": null}], "type": "root", "attrs": {}, "title": [{"text": ["HOM Cookbook"], "type": "supertitle"}, " Python SOPs"]}