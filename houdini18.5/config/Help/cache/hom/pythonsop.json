{"body": [{"indent": 0, "text": ["Define a geometry node (SOP) using Python"], "type": "title", "extent": [0, 46], "level": 0}, {"body": [{"body": [{"indent": 0, "blevel": 2, "type": "bullet", "extent": [62, 170], "text": ["If you want to define a new, reusable geometry node using Python, see \"creating a new node type\" below."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [170, 341], "text": ["If you just want to script a one-off change, you can use the ", {"text": ["Python SOP"], "fullpath": "/nodes/sop/python", "scheme": "Node", "type": "link", "value": "/nodes/sop/python"}, " to run a Python snippet on geometry without having to create a new node type."]}], "container": true, "type": "bullet_group"}], "indent": 0, "level": 2, "text": ["Overview"], "extent": [46, 62], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"indent": 0, "blevel": 2, "type": "ord", "extent": [384, 417], "text": ["Choose ", {"text": ["File \u25b8 New Asset"], "type": "ui"}, "."]}, {"indent": 0, "blevel": 2, "type": "ord", "extent": [417, 508], "text": ["Set the ", {"text": ["Operator Definition"], "type": "ui"}, " to ", {"text": ["python"], "type": "code"}, ", then set ", {"text": ["Network type"], "type": "ui"}, " to ", {"text": ["Geometry"], "type": "ui"}, "."]}, {"indent": 0, "blevel": 2, "type": "ord", "extent": [508, 605], "text": ["Use the ", {"text": ["Save to library"], "type": "ui"}, " option to set an OTL library file to save the new node type into."]}, {"body": [{"indent": 4, "type": "para", "extent": [626, 693], "text": ["The ", {"text": ["type properties window"], "fullpath": "/ref/windows/optype", "scheme": null, "type": "link", "value": "/ref/windows/optype"}, " appears."]}], "indent": 0, "text": ["Click ", {"text": ["Accept"], "type": "ui"}, "."], "extent": [605, 626], "container": true, "blevel": 2, "type": "ord"}, {"indent": 0, "blevel": 2, "type": "ord", "extent": [693, 812], "text": ["Use the ", {"text": ["options in the type properties window"], "fullpath": "/ref/windows/optype", "scheme": null, "type": "link", "value": "/ref/windows/optype"}, " to define the interface for your new node type."]}, {"indent": 0, "blevel": 2, "type": "ord", "extent": [812, 906], "text": ["Click the ", {"text": ["Code"], "type": "ui"}, " tab to view and edit the Python script that defines the SOP\u2019s behavior."]}], "container": true, "type": "ord_group"}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [911, 1057], "text": ["If you need to edit the script after closing the type properties window, right-click an instance of the node and choose ", {"text": ["Type properties"], "type": "ui"}, "."]}], "indent": 0, "role": "item", "extent": [906, 911], "container": true, "type": "tip"}], "container": true, "role": "item_group", "type": "tip_group"}], "indent": 0, "level": 2, "text": ["Creating a new node type"], "extent": [341, 384], "container": true, "type": "h", "id": "node_type"}, {"body": [{"indent": 0, "type": "para", "extent": [1080, 1123], "text": ["To get the node\u2019s incoming geometry, use"]}, {"lang": "python", "indent": 0, "type": "pre", "extent": [1123, 1167], "text": ["\ngeo = hou.pwd().geometry()\n"]}, {"indent": 0, "type": "para", "extent": [1167, 1481], "text": ["The ", {"text": ["hou.pwd()"], "type": "code"}, " function returns the currently cooking ", {"text": ["Node"], "fullpath": "/hom/hou/Node", "scheme": "Hom", "type": "link", "value": "/hom/hou/Node"}, ", and the ", {"text": ["geometry()"], "type": "code"}, " method returns a ", {"text": "", "value": "/hom/hou/Geometry", "fallback_text": "hou.Geometry", "fullpath": "/hom/hou/Geometry", "scheme": "Hom", "type": "link"}, " object.  If an input SOP\nis connected to the first input of the Python SOP, Houdini copies the input\nSOP\u2019s geometry into the Python SOP\u2019s geometry before running the Python code."]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [1486, 1700], "text": ["To get the geometry from an input other than the first, use the ", {"text": ["inputs()"], "type": "code"}, " method of ", {"text": ["Node"], "fullpath": "/hom/hou/Node", "scheme": "Hom", "type": "link", "value": "/hom/hou/Node"}, " to get the input nodes, and then the ", {"text": ["geometry()"], "type": "code"}, " method of one of those nodes to get its geometry."]}, {"lang": "python", "indent": 4, "type": "pre", "extent": [1700, 1930], "text": ["\n    this_node = hou.pwd()\n    inputs = this_node.inputs()\n\n    # Get the geometry from the second input\n    # (first input=0, second input=1, third=2, etc.)\n    second_input_geo = inputs[1].geometry()\n    "]}], "indent": 0, "role": "item", "extent": [1481, 1486], "container": true, "type": "tip"}], "container": true, "role": "item_group", "type": "tip_group"}, {"indent": 0, "type": "para", "extent": [1930, 2130], "text": ["You can then call methods on the geometry object (", {"text": ["geo"], "type": "code"}, " in this example) to modify the outgoing geometry. See the documentation for the ", {"text": "", "value": "/hom/hou/Geometry", "fallback_text": "hou.Geometry", "fullpath": "/hom/hou/Geometry", "scheme": "Hom", "type": "link"}, " object for how to manipulate the geometry."]}, {"indent": 0, "type": "para", "extent": [2130, 2178], "text": ["For example, to add a polygon to the geometry:"]}, {"lang": "python", "indent": 0, "type": "pre", "extent": [2178, 2353], "text": ["\npoly = geo.createPolygon()\nfor position in (0,0,0), (1,0,0), (0,1,0):\n    point = geo.createPoint()\n    point.setPosition(position)\n    poly.addVertex(point)\n"]}, {"indent": 0, "type": "para", "extent": [2353, 2567], "text": ["If you want to create a \"source\" node rather than a \"filter\" node, simply set the node\u2019s number of inputs to 0 in the type properties. Calling ", {"text": ["hou.pwd().geometry()"], "type": "code"}, " will return an empty geometry you can add to."]}], "indent": 0, "level": 2, "text": ["Writing the code"], "extent": [1057, 1080], "container": true, "type": "h", "id": null}, {"body": [{"indent": 0, "type": "para", "extent": [2625, 2937], "text": ["If the node takes a long time to cook when given large input\ngeometry, you may want to be able to interrupt its cooking by pressing Escape.\nTo make your SOP interruptible, periodically call\n", {"text": "", "value": "/hom/hou/updateProgressAndCheckForInterrupt", "fallback_text": "hou.updateProgressAndCheckForInterrupt", "fullpath": "/hom/hou/updateProgressAndCheckForInterrupt", "scheme": "Hom", "type": "link"}, ".  For example, you can press\nEscape to stop this SOP from cooking further:"]}, {"lang": "python", "indent": 0, "type": "pre", "extent": [2937, 3334], "text": ["\ngeo = hou.pwd().geometry()\n\n# Evaluate the \"t\" parameter to see how much to translate each point.\ntranslation = hou.Vector3(hou.parmTuple(\"t\").eval())\n\nfor point in geo.points():\n    # Set the new position for each point.\n    point.setPosition(point.position() + translation)\n\n    # Check if the user pressed Escape.\n    if hou.updateProgressAndCheckForInterrupt():\n        break\n"]}], "indent": 0, "level": 2, "text": ["Making the SOP interruptible"], "extent": [2567, 2625], "container": true, "type": "h", "id": "making_interruptable"}, {"body": [{"indent": 0, "type": "para", "extent": [3387, 3550], "text": ["If your Python surface node generates an exception, the node will turn red\nwith an error and you can view the stack trace of the error by middle-clicking\non it."]}, {"indent": 0, "type": "para", "extent": [3550, 3714], "text": ["If you would like to generate an error message to the user that doesn\u2019t contain\na Python stack trace, raise a ", {"text": "", "value": "/hom/hou/NodeError", "fallback_text": "hou.NodeError", "fullpath": "/hom/hou/NodeError", "scheme": "Hom", "type": "link"}, " exception.  For example,\nrunning"]}, {"lang": "python", "indent": 0, "type": "pre", "extent": [3714, 3781], "text": ["\nraise hou.NodeError(\"Invalid parameter settings\")\n"]}, {"indent": 0, "type": "para", "extent": [3781, 3947], "text": ["will turn the node red with an error message of ", {"text": ["\"Invalid parameter settings\""], "type": "code"}, ".\nSimilarly, you can add node warnings by raising instances of\n", {"text": "", "value": "/hom/hou/NodeWarning", "fallback_text": "hou.NodeWarning", "fullpath": "/hom/hou/NodeWarning", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "level": 2, "text": ["SOP Errors and Warnings"], "extent": [3334, 3387], "container": true, "type": "h", "id": "errors_and_warnings"}, {"body": [{"indent": 0, "type": "para", "extent": [4015, 4206], "text": [{"fragment": "#addAttrib", "text": "", "value": "/hom/hou/Geometry#addAttrib", "fallback_text": "hou.Geometry.addAttrib", "fullpath": "/hom/hou/Geometry#addAttrib", "scheme": "Hom", "type": "link"}, " contains a parameter to control whether Houdini\ncreates a local variable for newly added attributes.  There is no need to\nmodify the varmap attribute directly."]}], "indent": 0, "level": 2, "text": ["Creating local variables for new attributes"], "extent": [3947, 4015], "container": true, "type": "h", "id": "local_variables"}, {"body": [{"indent": 0, "type": "para", "extent": [4247, 4323], "text": ["You can profile your Python surface node with Python\u2019s ", {"text": ["cProfile"], "type": "code"}, " module."]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [4328, 4459], "text": ["If you are on Ubuntu, use ", {"text": ["aptitude"], "type": "code"}, " to install ", {"text": ["python-profiler"], "type": "code"}, " since the standard library is missing pstats in Ubuntu."]}], "indent": 0, "role": "item", "extent": [4323, 4328], "container": true, "type": "tip"}], "container": true, "role": "item_group", "type": "tip_group"}, {"indent": 0, "type": "para", "extent": [4459, 4607], "text": ["You should write your surface node\u2019s script so the work is done inside a function, instead of a bunch of statements at the top level, for example:"]}, {"lang": "python", "indent": 0, "type": "pre", "extent": [4607, 4830], "text": ["\ndef cook():\n    poly = geo.createPolygon()\n    for position in (0,0,0), (1,0,0), (0,1,0):\n        point = geo.createPoint()\n        point.setPosition(position)\n        poly.addVertex(point)\n        \ncook()\n"]}, {"indent": 0, "type": "para", "extent": [4830, 4930], "text": ["Import ", {"text": ["cProfile"], "type": "code"}, " and use ", {"text": ["cProfile.runctx"], "type": "code"}, " to call your function instead of calling it directly:"]}, {"lang": "python", "indent": 0, "type": "pre", "extent": [4930, 5193], "text": ["\ndef cook():\n    poly = geo.createPolygon()\n    for position in (0,0,0), (1,0,0), (0,1,0):\n        point = geo.createPoint()\n        point.setPosition(position)\n        poly.addVertex(point)\n        \ncProfile.runctx('cook()', globals(), locals())\n"]}, {"indent": 0, "type": "para", "extent": [5193, 5288], "text": ["This will print a summary of your script\u2019s run time to the Python shell when the node cooks."]}], "indent": 0, "level": 2, "text": ["Profiling the SOP code"], "extent": [4206, 4247], "container": true, "type": "h", "id": "profiling"}, {"body": [{"indent": 0, "type": "para", "extent": [5325, 5430], "text": ["See ", {"text": ["Extending HOM with C++"], "fullpath": "/hom/extendingwithcpp", "scheme": null, "type": "link", "value": "extendingwithcpp"}, " to see how to easily write a\nportion of your SOP in C++."]}], "indent": 0, "level": 2, "text": ["Writing Part of the SOP in C++"], "extent": [5288, 5325], "container": true, "type": "h", "id": null}, {"body": [{"indent": 0, "type": "para", "extent": [5496, 5765], "text": ["You may want to store your source code outside of your digital asset in\norder to manage it under a version control system.  It is possible to use\nthe Type Properties dialog to set up your asset\u2019s parameters and then inject\nthe Python source code into the ", {"text": ["otl"], "type": "code"}, " file."]}, {"indent": 0, "type": "para", "extent": [5765, 5872], "text": ["You can use the following function to update your digital asset to use the\nPython source code from a file:"]}, {"lang": "python", "indent": 0, "type": "pre", "extent": [5872, 6495], "text": ["\ndef loadPythonSourceIntoAsset(otl_file_path, node_type_name, source_file_path):\n    # Load the Python source code.\n    source_file = open(source_file_path, \"rb\")\n    source = source_file.read()\n    source_file.close()\n\n    # Find the asset definition in the otl file.\n    definitions = [definition\n        for definition in hou.hda.definitionsInFile(otl_file_path)\n        if definition.nodeTypeName() == node_type_name]\n    assert(len(definitions) == 1)\n    definition = definitions[0]\n\n    # Store the source code into the PythonCook section of the asset.\n    definition.addSection(\"PythonCook\", source)\n"]}, {"body": [{"indent": 6, "type": "para", "extent": [6575, 6590], "text": ["filters."]}], "indent": 0, "text": ["TODO: Document how to use geo.globPoints(), geo.globPrims(), etc. to implement"], "extent": [6495, 6575], "container": true, "type": "para"}], "indent": 0, "level": 2, "text": ["Storing your Code Outside a Digital Asset"], "extent": [5430, 5496], "container": true, "type": "h", "id": "external_source"}], "type": "root", "attrs": {}, "title": ["Define a geometry node (SOP) using Python"]}