{"body": [{"indent": 0, "text": ["Primitive Parametric Spaces (Implicit UVs)"], "type": "title", "extent": [0, 47], "level": 0}, {"body": [{"indent": 0, "type": "para", "extent": [63, 296], "text": ["In Houdini and Mantra, ", {"text": "", "fullpath": "/model/primitives", "scheme": null, "type": "link", "value": "primitives"}, " all have an implicit parametric space, sometimes called primitive UVs, for referring to positions on their surfaces, or other interpolations of ", {"text": "", "fullpath": "/model/attributes", "scheme": null, "type": "link", "value": "attributes"}, " on their ", {"text": ["points"], "fullpath": "/model/points", "scheme": null, "type": "link", "value": "points"}, " or vertices."]}, {"indent": 0, "type": "para", "extent": [296, 786], "text": ["Coordinates in these spaces can be output by the ", {"text": ["Ray"], "fullpath": "/nodes/sop/ray", "scheme": "Node", "type": "link", "value": "/nodes/sop/ray"}, " or ", {"text": ["Scatter"], "fullpath": "/nodes/sop/scatter", "scheme": "Node", "type": "link", "value": "/nodes/sop/scatter"}, " nodes, or the ", {"text": ["intersect"], "value": "/vex/functions/intersect", "fallback_text": "intersect()", "fullpath": "/vex/functions/intersect", "scheme": "Vex", "type": "link"}, ", ", {"text": ["intersect_all"], "value": "/vex/functions/intersect_all", "fallback_text": "intersect_all()", "fullpath": "/vex/functions/intersect_all", "scheme": "Vex", "type": "link"}, ", ", {"text": ["xyzdist"], "value": "/vex/functions/xyzdist", "fallback_text": "xyzdist()", "fullpath": "/vex/functions/xyzdist", "scheme": "Vex", "type": "link"}, ", ", {"text": ["uvintersect"], "value": "/vex/functions/uvintersect", "fallback_text": "uvintersect()", "fullpath": "/vex/functions/uvintersect", "scheme": "Vex", "type": "link"}, ", or ", {"text": ["uvdist"], "value": "/vex/functions/uvdist", "fallback_text": "uvdist()", "fullpath": "/vex/functions/uvdist", "scheme": "Vex", "type": "link"}, " VEX functions.  These coordinates can then be used for interpolation within primitives, for example, if they're deforming over time, by the ", {"text": ["Attribute Interpolate"], "fullpath": "/nodes/sop/attribinterpolate", "scheme": "Node", "type": "link", "value": "/nodes/sop/attribinterpolate"}, " node or the ", {"text": ["primuv"], "value": "/vex/functions/primuv", "fallback_text": "primuv()", "fullpath": "/vex/functions/primuv", "scheme": "Vex", "type": "link"}, " VEX functions."]}, {"indent": 0, "type": "para", "extent": [786, 867], "text": ["There are many primitive types in Houdini, each with special parametric spaces:"]}, {"body": [{"indent": 0, "blevel": 2, "type": "bullet", "extent": [867, 981], "text": ["Polygons: ", {"fragment": "#triquad", "text": ["Triangles and Quads"], "value": "#triquad", "fullpath": "/model/primitive_spaces#triquad", "scheme": null, "type": "link"}, ", ", {"fragment": "#ngon", "text": ["n-gons"], "value": "#ngon", "fullpath": "/model/primitive_spaces#ngon", "scheme": null, "type": "link"}, ", ", {"fragment": "#polycurve", "text": ["Polygon Curves"], "value": "#polycurve", "fullpath": "/model/primitive_spaces#polycurve", "scheme": null, "type": "link"}, ", ", {"fragment": "#degenerate", "text": ["Degenerate"], "value": "#degenerate", "fullpath": "/model/primitive_spaces#degenerate", "scheme": null, "type": "link"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [981, 1009], "text": [{"fragment": "#polysoup", "text": ["Polygon Soups"], "value": "#polysoup", "fullpath": "/model/primitive_spaces#polysoup", "scheme": null, "type": "link"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [1009, 1029], "text": [{"fragment": "#tet", "text": ["Tetrahedra"], "value": "#tet", "fullpath": "/model/primitive_spaces#tet", "scheme": null, "type": "link"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [1029, 1049], "text": [{"fragment": "#volume", "text": ["Volumes"], "value": "#volume", "fullpath": "/model/primitive_spaces#volume", "scheme": null, "type": "link"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [1049, 1063], "text": [{"fragment": "#vdb", "text": ["VDBs"], "value": "#vdb", "fullpath": "/model/primitive_spaces#vdb", "scheme": null, "type": "link"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [1063, 1093], "text": [{"fragment": "#packed", "text": ["Packed Primitives"], "value": "#packed", "fullpath": "/model/primitive_spaces#packed", "scheme": null, "type": "link"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [1093, 1138], "text": [{"fragment": "#nurbsurf", "text": ["Bezier/NURBS/Bilinear Surfaces"], "value": "#nurbsurf", "fullpath": "/model/primitive_spaces#nurbsurf", "scheme": null, "type": "link"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [1138, 1174], "text": [{"fragment": "#nurbscurve", "text": ["Bezier/NURBS Curves"], "value": "#nurbscurve", "fullpath": "/model/primitive_spaces#nurbscurve", "scheme": null, "type": "link"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [1174, 1222], "text": ["Quadrics: ", {"fragment": "#quadric", "text": ["Spheres, Tubes, Circles"], "value": "#quadric", "fullpath": "/model/primitive_spaces#quadric", "scheme": null, "type": "link"}]}], "container": true, "type": "bullet_group"}], "indent": 0, "level": 2, "text": ["Overview"], "extent": [47, 63], "container": true, "type": "h", "id": null}, {"body": [{"indent": 0, "type": "para", "extent": [1277, 1321], "text": [{"text": "", "fullpath": "/images/nodes/sop/ray/tri_quad.jpg", "scheme": "Image", "type": "link", "value": "/images/nodes/sop/ray/tri_quad.jpg"}]}, {"indent": 0, "type": "para", "extent": [1321, 2017], "text": ["Triangle parametric spaces in Houdini have vertex 0 at the origin, ", {"text": ["(0,0)"], "type": "code"}, ", vertex 1 at the u axis unit, ", {"text": ["(1,0)"], "type": "code"}, ", and vertex 2 at the v axis unit, ", {"text": ["(0,1)"], "type": "code"}, ".  u and v are equivalent to two \"", {"text": ["barycentric coordinates"], "scheme": "Wp", "type": "link", "exists": true, "value": "http://en.wikipedia.org/wiki/Barycentric_coordinate_system#Barycentric_coordinates_on_triangles"}, "\" of the triangle, namely the barycentric coordinates associated with vertex 1 and vertex 2.  The barycentric coordinate associated with vertex 0 is ", {"text": ["1-u-v"], "type": "code"}, ".  These give the 3 linear interpolation weights for the 3 vertices, e.g. ", {"text": ["P(u,v) = P0*(1-u-v) + P1*u + P2*v"], "type": "code"}, ".  Half of the uv unit square is unoccupied, though some cases may mirror the other half onto the first half if provided coordinates out of range."]}, {"indent": 0, "type": "para", "extent": [2017, 2614], "text": ["Quads are treated as ", {"text": ["bilinear patches"], "scheme": "Wp", "type": "link", "exists": true, "value": "http://en.wikipedia.org/wiki/Bilinear_interpolation"}, " in Houdini, to smoothly, consistently handle cases where the 4 vertices are not all in the same plane (non-planar), at the expense of that quads are quadratic surfaces, instead of flat surfaces like triangles.  Quad parametric spaces also have vertex 0 at the origin, however, vertex 1 is instead at the ", {"text": ["v"], "type": "strong"}, " axis unit, ", {"text": ["(0,1)"], "type": "code"}, ", and vertex 3 is at the ", {"text": ["u"], "type": "strong"}, " axis unit, ", {"text": ["(1,0)"], "type": "code"}, "; vertex 2 is at ", {"text": ["(1,1)"], "type": "code"}, ".  Bilinear interpolation is done in a manner within roundoff error of ", {"text": ["P(u,v) = P0*(1-u)*(1-v) + P1*(1-u)*v + P2*u*v + P3*u*(1-v)"], "type": "code"}, "."]}, {"indent": 0, "type": "para", "extent": [2614, 3224], "text": ["Note that non-convex quads will usually still be treated as bilinear patches, which will self-overlap in these cases.  This is sometimes unwanted, so if you need non-convex quads to be triangulated, you can use the ", {"text": ["Divide"], "fullpath": "/nodes/sop/divide", "scheme": "Node", "type": "link", "value": "/nodes/sop/divide"}, " geometry node with ", {"text": ["Convex Polygons"], "type": "ui"}, " enabled, and ", {"text": ["Maximum Edges"], "type": "ui"}, " set as needed, e.g. 4 if you want to keep convex quads as quads.  ", {"text": ["Bowtie quads"], "scheme": "Wp", "type": "link", "exists": true, "value": "http://en.wikipedia.org/wiki/Quadrilateral#Complex_quadrilaterals"}, " are more difficult to split well if the bilinear interpretation is not acceptable, but can be fixed with a combination of options on the ", {"text": ["Triangulate 2D"], "fullpath": "/nodes/sop/triangulate2d", "scheme": "Node", "type": "link", "value": "/nodes/sop/triangulate2d"}, "."]}, {"indent": 0, "type": "para", "extent": [3224, 3778], "text": ["In a Mantra shader, the implicit u and v coordinates of a quad are swapped relative to those in Houdini, which doesn\u2019t frequently cause problems, but may be confusing if working directly with implicit uv\u2019s in a shader.  For triangles in Mantra, the implicit uv coordinates of a triangle will be those of a quad (bilinear patch) with vertex 0 duplicated.  This results in interpolation of attributes on triangles that\u2019s equivalent to the interpolation in Houdini, even though one is interpolated bilinearly and the other is interpolated barycentrically."]}, {"indent": 0, "type": "para", "extent": [3778, 4173], "text": ["The triangles and quads in the diagram all have normals pointing into the screen, so these are showing the back faces.  The normal direction is \"left-handed\" relative to the winding order.  Many other 3D geometry programs use \"right-handed\" normals, so you may need to use a ", {"text": ["Reverse"], "fullpath": "/nodes/sop/reverse", "scheme": "Node", "type": "link", "value": "/nodes/sop/reverse"}, " node to reverse the winding order of polygons when importing from another software package."]}], "indent": 0, "level": 2, "text": ["Triangles and Quads"], "attrs": {"index": "document"}, "extent": [1222, 1258], "container": true, "type": "h", "id": "triquad"}, {"body": [{"indent": 0, "type": "para", "extent": [4237, 4277], "text": [{"text": "", "fullpath": "/images/nodes/sop/ray/ngon.jpg", "scheme": "Image", "type": "link", "value": "/images/nodes/sop/ray/ngon.jpg"}]}, {"indent": 0, "type": "para", "extent": [4277, 4424], "text": ["Polygons with 5 or more sides are often referred to as \"n-gons\", to distinguish that they need to be handled differently from triangles or quads."]}, {"indent": 0, "type": "para", "extent": [4424, 4907], "text": ["In order to have at least one implicit uvw coordinate corresponding with each point in a non-convex n-gon, Houdini implicitly covers the space with a triangle fan around the average of all of the vertices.  Each edge contributes ", {"text": ["1/n"], "type": "code"}, " to ", {"text": ["u"], "type": "code"}, ", where ", {"text": ["n"], "type": "code"}, " is the number of vertices.  ", {"text": ["v"], "type": "code"}, " is 0 on an edge, and approaches 1 linearly toward the center.  The boundary parameterization is equivalent to that of a polygon curve if it had an extra vertex wrapping it back around to vertex 0."]}, {"indent": 0, "type": "para", "extent": [4907, 5822], "text": ["However, because there are polygons that are not \"", {"text": ["star-shaped"], "scheme": "Wp", "type": "link", "exists": true, "value": "http://en.wikipedia.org/wiki/Star-shaped_polygon"}, "\" or that do not have the center in their kernels, there can be both points outside the polygon that have parametric coordinates in the unit square, and points inside the polygon that have multiple parametric coordinates, (possibly even multiple positions if the polygon is non-planar).  A single implicit uvw coordinate still always represents a single position.  This usually doesn\u2019t cause problems if the coordinates are generated by nodes or VEX functions that output primitive uvw coordinates, but may be confusing when trying to separately generate or interpret them.  It does, however, mean that for polygons with many sides, the time required to determine the coordinate or interpolate the polygon from one takes time proportional to the number of sides, so can be slow for polygons with hundreds or thousands of sides."]}, {"indent": 0, "type": "para", "extent": [5822, 6575], "text": ["Mantra always splits polygons with 5 or more sides into triangles and quads, with a similar method to the one used by the ", {"text": ["Divide"], "fullpath": "/nodes/sop/divide", "scheme": "Node", "type": "link", "value": "/nodes/sop/divide"}, " geometry node with ", {"text": ["Maximum Edges"], "type": "ui"}, " set to 4.  This avoids some issues of the coordinate system used in Houdini, but at the expense of multiple positions having the same parametric coordinate and instability.  Slight changes in the positions of the vertices can result in the polygon being divided differently, so when rendering deforming geometry that may have n-gons, be sure to divide the rest geometry before deforming so that there are no n-gons and the topology doesn\u2019t change from frame to frame.  This will avoid any popping in the renders that would have come from the n-gon splitting changing."]}, {"indent": 0, "type": "para", "extent": [6575, 6982], "text": ["The n-gon in the diagram has normals pointing into the screen, so this is showing the back face.  The normal direction is \"left-handed\" relative to the winding order, just as with triangles and quads.  Many other 3D geometry programs use \"right-handed\" normals, so you may need to use a ", {"text": ["Reverse"], "fullpath": "/nodes/sop/reverse", "scheme": "Node", "type": "link", "value": "/nodes/sop/reverse"}, " node to reverse the winding order of polygons when importing from another software package."]}, {"indent": 0, "type": "para", "extent": [6982, 7025], "text": [{"text": "", "fullpath": "/images/nodes/sop/ray/bridges.jpg", "scheme": "Image", "type": "link", "value": "/images/nodes/sop/ray/bridges.jpg"}]}, {"indent": 0, "type": "para", "extent": [7025, 7573], "text": ["Polygons in Houdini can also have what are known as \"bridges\", which are edges a polygon shares with itself, to be able to construct \"holes\".  Bridges require having multiple vertices of the polygon visit the same points more than once, which isn\u2019t allowed in some other software packages, so when exporting to other software, you may have to divide polygons that have bridges, and when importing from software that has explicitly separate hole polygons, you may have to apply a ", {"text": ["Hole"], "fullpath": "/nodes/sop/hole", "scheme": "Node", "type": "link", "value": "/nodes/sop/hole"}, " node to correctly create the bridges to holes."]}, {"indent": 0, "type": "para", "extent": [7573, 7883], "text": ["There are many ways to create bridges to holes, especially if there are multiple holes, since a hole can bridge to another hole, as shown in the diagram.  The one primary requirement of bridges is that they are not allowed to cross an edge of the polygon, including other bridge edges and edges of the holes."]}], "indent": 0, "level": 2, "text": ["Polygons with 5+ Sides (n-gons)"], "attrs": {"index": "document"}, "extent": [4173, 4218], "container": true, "type": "h", "id": "ngon"}, {"body": [{"indent": 0, "type": "para", "extent": [7935, 7980], "text": [{"text": "", "fullpath": "/images/nodes/sop/ray/polycurve.jpg", "scheme": "Image", "type": "link", "value": "/images/nodes/sop/ray/polycurve.jpg"}]}, {"indent": 0, "type": "para", "extent": [7980, 8210], "text": ["In Houdini, polygon curves have a parametric u coordinate that starts with 0 at vertex 0 and ends with 1 at vertex ", {"text": ["n-1"], "type": "code"}, ", each edge adding ", {"text": ["1/(n-1)"], "type": "code"}, " to u, where ", {"text": ["n"], "type": "code"}, " is the number of vertices in the curve.  v and w are both zero."]}, {"indent": 0, "type": "para", "extent": [8210, 8432], "text": ["In a Mantra shader, however, v goes from 0 to 1 along the curve, just like u does in Houdini, with each edge contributing ", {"text": ["1/(n-1)"], "type": "code"}, ".  Curves also have width in Mantra, and u goes from 0 to 1 along the width of the curve."]}], "indent": 0, "level": 2, "text": ["Polygon Curves"], "attrs": {"index": "document"}, "extent": [7883, 7916], "container": true, "type": "h", "id": "polycurve"}, {"body": [{"indent": 0, "type": "para", "extent": [8490, 8991], "text": ["It is possible in Houdini to construct polygons that don\u2019t have enough vertices, so are considered degenerate, but are not automatically deleted.  Closed polygons with 0, 1, or 2 vertices are degenerate, and open polygons (polygon curves) with 0 or 1 vertices are degenerate.  Although it\u2019s often not meaningful to compute something for such primitives, it\u2019s important to not crash, loop infinitely, or use infeasible amounts of memory when nodes or assets are provided such polygons in their input."]}, {"indent": 0, "type": "para", "extent": [8991, 9617], "text": ["The parametric space of a polygon with zero vertices is ill-defined.  The parametric space of a polygon with 1 vertex should have that vertex fill the entire space, or put in the reverse sense, all parametric coordinates map onto that vertex.  A closed polygon with 1 vertex is sometimes treated as having 1 edge from its vertex back to itself, to maintain that the number of edges is equal to the number of vertices, though other times it is treated as having no edges.  A closed polygon with 2 vertices is sometimes treated as a polygon curve with 2 vertices, though it is sometimes treated as having two of the same edge."]}], "indent": 0, "level": 2, "text": ["Degenerate Polygons"], "attrs": {"index": "document"}, "extent": [8432, 8471], "container": true, "type": "h", "id": "degenerate"}, {"body": [{"indent": 0, "type": "para", "extent": [9667, 9861], "text": ["Polygon soups represent multiple faces in a single primitive.  Each face has implicit u and v coordinates equivalent to the corresponding coordinates of an equivalent closed polygon primitive."]}, {"indent": 0, "type": "para", "extent": [9861, 10659], "text": ["The w coordinate is used to indicate which face in the soup is referenced.  If the face number within the soup is 16,777,216 (i.e. 2^24) or smaller, w is just the floating-point value of the face number.  For faces beyond that (up to 1.9 billion faces), w is guaranteed to be a unique, positive, non-infinite, non-NaN, non-denormal floating-point number, so that it will be preserved if multiplying by 1 or adding 0.  The w coordinate can be generated from the face number using the ", {"text": ["pack_inttosafefloat"], "value": "/vex/functions/pack_inttosafefloat", "fallback_text": "pack_inttosafefloat()", "fullpath": "/vex/functions/pack_inttosafefloat", "scheme": "Vex", "type": "link"}, " VEX function, and the face number can be retrieved from a w coordinate using the ", {"text": ["unpack_intfromsafefloat"], "value": "/vex/functions/unpack_intfromsafefloat", "fallback_text": "unpack_intfromsafefloat()", "fullpath": "/vex/functions/unpack_intfromsafefloat", "scheme": "Vex", "type": "link"}, " VEX function.  In the HDK, these correspond with the functions UTpackIntToSafeFloat and UTunpackIntFromSafeFloat in UT_SafeFloat.h ."]}], "indent": 0, "level": 2, "text": ["Polygon Soups"], "attrs": {"index": "document"}, "extent": [9617, 9648], "container": true, "type": "h", "id": "polysoup"}, {"body": [{"indent": 0, "type": "para", "extent": [10701, 10740], "text": [{"text": "", "fullpath": "/images/nodes/sop/ray/tet.jpg", "scheme": "Image", "type": "link", "value": "/images/nodes/sop/ray/tet.jpg"}]}, {"indent": 0, "type": "para", "extent": [10740, 11373], "text": ["Tetrahedra (tets) in Houdini are sometimes considered solid, e.g. when using the ", {"text": ["xyzdist"], "value": "/vex/functions/xyzdist", "fallback_text": "xyzdist()", "fullpath": "/vex/functions/xyzdist", "scheme": "Vex", "type": "link"}, " VEX function or the Minimum Distance option in the ", {"text": ["Ray"], "fullpath": "/nodes/sop/ray", "scheme": "Node", "type": "link", "value": "/nodes/sop/ray"}, " node.  This is useful for determining the parametric coordinates of points of a point cloud embedded in a tetrahedral mesh.  However, sometimes only the unshared faces, the surface of a tetrahedral mesh, are considered, e.g. when using the ", {"text": ["intersect"], "value": "/vex/functions/intersect", "fallback_text": "intersect()", "fullpath": "/vex/functions/intersect", "scheme": "Vex", "type": "link"}, " function or the Project Rays option in the ", {"text": ["Ray"], "fullpath": "/nodes/sop/ray", "scheme": "Node", "type": "link", "value": "/nodes/sop/ray"}, " node.  The boundary of the tetrahedral mesh, transition into or out of it, is more likely to be the desired result in these cases."]}, {"indent": 0, "type": "para", "extent": [11373, 12137], "text": ["In both situations, the paramteric uvw coordinates are reported the same way.  Similar to triangles, vertex 0 is at the origin, ", {"text": ["(0,0,0)"], "type": "code"}, ", vertex 1 at the u axis unit, ", {"text": ["(1,0,0)"], "type": "code"}, ", vertex 2 at the v axis unit, ", {"text": ["(0,1,0)"], "type": "code"}, ", and vertex 3 at the w axis unit, ", {"text": ["(0,0,1)"], "type": "code"}, ".  Also similar to triangles, u, v, and w are equivalent to the ", {"text": ["barycentric coordinates"], "scheme": "Wp", "type": "link", "exists": true, "value": "http://en.wikipedia.org/wiki/Barycentric_coordinate_system"}, " associated with vertex 1, vertex 2, and vertex 3.  The barycentric coordinate associated with vertex 0 is ", {"text": ["1-u-v-w"], "type": "code"}, ".  These give the 4 linear interpolation weights for the 4 vertices, e.g. ", {"text": ["P(u,v,w) = P0*(1-u-v-w) + P1*u + P2*v + P3*w"], "type": "code"}, ".  5/6 of the uvw unit cube is unoccupied, though some cases may mirror coordinates into the valid region if provided coordinates out of range."]}, {"indent": 0, "type": "para", "extent": [12137, 12748], "text": ["The triangular faces in the diagram all have normals pointing into the screen, so these are showing the back faces.  The normal direction is \"left-handed\" relative to the winding order, as with polygon primitives.  Tetrahedra have the additional consideration that they can be inverted, i.e. having negative signed volume.  If the normals of a tetrahedron\u2019s faces point inward, (toward the opposite vertex), it is inverted; if they point outward, it is not inverted.  Note that if you assign the implicit uvw coordinates corresponding with each vertex to the point positions, the tetrahedron will be inverted."]}, {"indent": 0, "type": "para", "extent": [12748, 13057], "text": ["All tetrahedra are assumed to have 4 vertices.  If one is constructed in the HDK with a different number of vertices, code may crash or produce nonsensical results.  The ", {"text": ["addprim"], "value": "/vex/functions/addprim", "fallback_text": "addprim()", "fullpath": "/vex/functions/addprim", "scheme": "Vex", "type": "link"}, " and ", {"text": ["addvertex"], "value": "/vex/functions/addvertex", "fallback_text": "addvertex()", "fullpath": "/vex/functions/addvertex", "scheme": "Vex", "type": "link"}, " VEX functions will not allow construction of one with a different number of vertices."]}], "indent": 0, "level": 2, "text": ["Tetrahedra"], "attrs": {"index": "document"}, "extent": [10659, 10682], "container": true, "type": "h", "id": "tet"}, {"body": [{"indent": 0, "type": "para", "extent": [13099, 13714], "text": ["Volumes only have one vertex, so there is only interpolation of P and voxel values.  A single volume primitive in Houdini only represents a single 32-bit floating-point value in each voxel.  Multiple volume primitives can be logically grouped into an effective vector volume using a ", {"text": ["name"], "type": "code"}, " primitive string attribute, using names like \"Cd.x\", \"Cd.y\", and \"Cd.z\".  Volumes that have only one voxel in one of the parametric directions, 2D volumes, can be treated as flat images in various places in Houdini.  Volume primitives can be 2D or 3D \"fog volumes\", 3D \"signed distance fields\" (SDFs), or 2D \"heightfields\"."]}, {"indent": 0, "type": "para", "extent": [13714, 14283], "text": ["For computing positions, parametric coordinates for a volume in the range ", {"text": ["(0,0,0)"], "type": "code"}, " to ", {"text": ["(1,1,1)"], "type": "code"}, " are first converted to the range ", {"text": ["(-1,-1,-1)"], "type": "code"}, " to ", {"text": ["(1,1,1)"], "type": "code"}, ", and then any taper (for frustum volumes), the 3\u00d73 local transform, and the translation from P are applied.  The inverse is done (in the reverse order) to compute parametric coordinates for a position.  For 2D heightfield volumes, the value of the volume evaluated at the parametric coordinates for the axes that have more than 1 voxel in them, is used as the displacement from the center plane along that axis."]}, {"indent": 0, "type": "para", "extent": [14283, 15492], "text": ["Voxel data in volume primitives are treated as cell-centered.  Between voxel centers, data are interpolated ", {"text": ["trilinearly"], "scheme": "Wp", "type": "link", "exists": true, "value": "http://en.wikipedia.org/wiki/Trilinear_interpolation"}, ".  The 0 and 1 parametric values correspond with the beginning of the first voxel and the end of the last voxel in some parametric axis, respectively.  These coordinates are not between voxel centers, though, being on the boundary, so are handled like out-of-bounds values, using either the \"constant\", \"repeat\", \"streak\", or \"sdf\" border type, (which can be seen in the ", {"text": ["volumebordertype"], "type": "code"}, " primitive intrinsic).  \"constant\" indicates to use a constant value, (in the ", {"text": ["volumebordervalue"], "type": "code"}, " primitive intrinsic), \"repeat\" indicates to wrap around the voxel grid, so that coordinates are always between voxel centers, and \"streak\" indicates to use the value that would be evaluated if the coordinate were snapped to the closest boundary between voxel centers.  \"sdf\" indicates to add the distance to the closest boundary voxel data when evaluating, and also in some situations, treat the volume as the surface implied by places in the voxel data that cross between positive and negative.  The voxel data are intended to be signed distances to the implicit surface."]}, {"indent": 0, "type": "para", "extent": [15492, 15853], "text": ["Voxel data in volume primitives are stored in 16\u00d716\u00d716 tiles, or smaller for end tiles in any axis that has a resolution that is not a multiple of 16.  A tile that contains only a constant value for all of its voxels can be represented by that single value, instead of a full grid of its data.  This allows more efficient representation of sparse volume data."]}], "indent": 0, "level": 2, "text": ["Volumes"], "attrs": {"index": "document"}, "extent": [13057, 13080], "container": true, "type": "h", "id": "volume"}, {"body": [{"indent": 0, "type": "para", "extent": [15889, 16795], "text": ["VDBs are an open standard volume representation optimized for very sparse volume data, usually only having bottom-level voxel data in a \"narrow band\", using a 4-level tree of tiles that can be constant at any level.  The top level can be an arbitrary resolution, but the other levels are a fixed power-of-two resolution in each tile, down to voxels at the bottom.  Unlike most other primitive types, the parametric space of a VDB is ", {"text": ["not"], "type": "strong"}, " limited to the range ", {"text": ["(0,0,0)"], "type": "code"}, " to ", {"text": ["(1,1,1)"], "type": "code"}, ".  The space is identical to the bottom level voxel index space, and voxel indices can be negative, depending on the shift of the top level grid.  This allows adding of new voxel data anywhere (up to roundoff error considerations), without changing the parametric coordinates of existing data.  The transform of the VDB grid, (including any frustum transform), transforms directly from voxel index space to physical space."]}, {"indent": 0, "type": "para", "extent": [16795, 17288], "text": ["VDBs most often represent \"signed distance fields\" (SDFs), also referred to as a \"level set\".  However, often only the narrow band has correct signed distances to the implied surface, whereas the constant tile data values outside of the narrow band may only have the correct sign, not an actual distance.  Some VDBs instead represent \"fog volumes\", where the values represent densities or other values.  Outside of the range of occupied tiles, there is a \"background value\" of any given VDB."]}, {"indent": 0, "type": "para", "extent": [17288, 17737], "text": ["Like volume primitives, VDBs only have one vertex, so there is only interpolation of P and voxel values.  Unlike volume primitives, a voxel\u2019s data in a VDB can be a 32-bit or 64-bit floating-point number, a 32-bit integer, a boolean, a vector of three 32-bit or 64-bit floating-point numbers, or a vector of three 32-bit integers.  From the HDK, VDB grids that are created directly, instead of part of a primitive, they can have other data types."]}], "indent": 0, "level": 2, "text": ["VDBs"], "attrs": {"index": "document"}, "extent": [15853, 15870], "container": true, "type": "h", "id": "vdb"}, {"body": [{"body": [{"indent": 0, "blevel": 2, "type": "bullet", "extent": [17746, 17764], "text": [{"text": "", "fullpath": "/nodes/sop/ray", "scheme": "Node", "type": "link", "value": "/nodes/sop/ray"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [17764, 17785], "text": [{"text": "", "fullpath": "/nodes/sop/scatter", "scheme": "Node", "type": "link", "value": "/nodes/sop/scatter"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [17785, 17803], "text": [{"text": "", "value": "/vex/functions/intersect", "fallback_text": "intersect()", "fullpath": "/vex/functions/intersect", "scheme": "Vex", "type": "link"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [17803, 17825], "text": [{"text": "", "value": "/vex/functions/intersect_all", "fallback_text": "intersect_all()", "fullpath": "/vex/functions/intersect_all", "scheme": "Vex", "type": "link"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [17825, 17841], "text": [{"text": "", "value": "/vex/functions/xyzdist", "fallback_text": "xyzdist()", "fullpath": "/vex/functions/xyzdist", "scheme": "Vex", "type": "link"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [17841, 17861], "text": [{"text": "", "value": "/vex/functions/uvintersect", "fallback_text": "uvintersect()", "fullpath": "/vex/functions/uvintersect", "scheme": "Vex", "type": "link"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [17861, 17876], "text": [{"text": "", "value": "/vex/functions/uvdist", "fallback_text": "uvdist()", "fullpath": "/vex/functions/uvdist", "scheme": "Vex", "type": "link"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [17876, 17891], "text": [{"text": "", "fullpath": "/model/primitives", "scheme": null, "type": "link", "value": "primitives"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [17891, 17904], "text": [{"text": "", "fullpath": "/model/points", "scheme": null, "type": "link", "value": "points"}]}], "container": true, "type": "bullet_group"}], "indent": 0, "level": 1, "text": "Related", "role": "section", "extent": [17737, 17746], "container": true, "type": "related_section", "id": "related"}], "type": "root", "attrs": {}, "title": ["Primitive Parametric Spaces (Implicit UVs)"]}