{"body": [{"indent": 0, "text": ["Expression cookbook"], "type": "title", "extent": [0, 24], "level": 0}, {"indent": 0, "type": "summary", "extent": [24, 103], "text": ["Tips and tricks for writing expressions to accomplish various effects."]}, {"body": [{"indent": 0, "type": "para", "extent": [118, 340], "text": ["In Houdini, you can use expressions in parameters and in VEX snippets to accomplish complex and interesting effects with just a bit of math. This page demonstrates a few useful formulas and tricks to use in expressions."]}, {"body": [{"indent": 0, "blevel": 2, "type": "bullet", "extent": [340, 470], "text": ["See ", {"text": ["expressions"], "fullpath": "/network/expressions", "scheme": null, "type": "link", "value": "/network/expressions"}, " for the basics of HScript expressions. See ", {"text": ["VEX"], "fullpath": "/vex/index", "scheme": null, "type": "link", "value": "/vex/"}, " for more about the VEX language."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [470, 671], "text": ["On this page the expressions listed often have ", {"text": ["ch()"], "type": "code"}, " functions to access values from parameters. See ", {"text": ["spare parameters"], "fullpath": "/network/spare", "scheme": null, "type": "link", "value": "/network/spare"}, " for how to set up custom parameters your expressions can use."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [671, 853], "text": ["Future versions of Houdini will move toward having users use VEX to modify geometry instead of allowing HScript expressions to modify local variables, because VEX is much faster."]}], "container": true, "type": "bullet_group"}], "indent": 0, "level": 2, "text": ["Overview"], "extent": [103, 118], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 0, "text": [{"text": ["int"], "type": "code"}, " "], "role": "td", "extent": [925, 934], "container": true, "type": "cell"}, {"indent": 4, "text": [{"text": "", "value": "/expressions/ch", "fallback_text": "ch()", "fullpath": "/expressions/ch", "scheme": "Exp", "type": "link"}, " "], "role": "td", "extent": [934, 949], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [949, 968], "text": [{"text": "", "value": "/vex/functions/chi", "fallback_text": "chi()", "fullpath": "/vex/functions/chi", "scheme": "Vex", "type": "link"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 0, "text": [{"text": ["float"], "type": "code"}, " "], "role": "td", "extent": [968, 978], "container": true, "type": "cell"}, {"indent": 4, "text": [{"text": "", "value": "/expressions/ch", "fallback_text": "ch()", "fullpath": "/expressions/ch", "scheme": "Exp", "type": "link"}, " "], "role": "td", "extent": [978, 993], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [993, 1012], "text": [{"text": "", "value": "/vex/functions/chf", "fallback_text": "chf()", "fullpath": "/vex/functions/chf", "scheme": "Vex", "type": "link"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 0, "text": [{"text": ["string"], "type": "code"}, " "], "role": "td", "extent": [1012, 1023], "container": true, "type": "cell"}, {"indent": 4, "text": [{"text": "", "value": "/expressions/ch", "fallback_text": "ch()", "fullpath": "/expressions/ch", "scheme": "Exp", "type": "link"}, " "], "role": "td", "extent": [1023, 1038], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [1038, 1057], "text": [{"text": "", "value": "/vex/functions/chs", "fallback_text": "chs()", "fullpath": "/vex/functions/chs", "scheme": "Vex", "type": "link"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 0, "text": [{"text": ["ramp"], "type": "code"}, " "], "role": "td", "extent": [1057, 1066], "container": true, "type": "cell"}, {"indent": 4, "text": [{"text": "", "value": "/expressions/chramp", "fallback_text": "chramp()", "fullpath": "/expressions/chramp", "scheme": "Exp", "type": "link"}, " "], "role": "td", "extent": [1066, 1085], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [1085, 1107], "text": [{"text": "", "value": "/vex/functions/chramp", "fallback_text": "chramp()", "fullpath": "/vex/functions/chramp", "scheme": "Vex", "type": "link"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 0, "text": [{"text": ["vector"], "type": "code"}, " "], "role": "td", "extent": [1107, 1118], "container": true, "type": "cell"}, {"indent": 4, "role": "td", "extent": [1118, 1124], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [1124, 1143], "text": [{"text": "", "value": "/vex/functions/chv", "fallback_text": "chv()", "fullpath": "/vex/functions/chv", "scheme": "Vex", "type": "link"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}], "type": "table", "thead": [{"body": [{"indent": 0, "text": ["Type "], "role": "th", "extent": [875, 884], "container": true, "type": "cell"}, {"indent": 4, "text": ["Hscript expression "], "role": "th", "extent": [884, 910], "container": true, "type": "cell"}, {"indent": 8, "role": "th", "type": "cell", "extent": [910, 925], "text": ["VEX "]}], "divider": false, "type": "row"}]}], "indent": 0, "level": 2, "text": ["Channel lookups"], "extent": [853, 875], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 0, "text": ["Current frame "], "role": "td", "extent": [1216, 1233], "container": true, "type": "cell"}, {"indent": 4, "text": [{"text": ["$FF"], "type": "code"}, " or ", {"text": ["@Frame"], "type": "code"}, " "], "role": "td", "extent": [1233, 1257], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [1257, 1275], "text": [{"text": ["@Frame"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 0, "text": ["Current time "], "role": "td", "extent": [1275, 1290], "container": true, "type": "cell"}, {"indent": 4, "text": [{"text": ["$T"], "type": "code"}, " or ", {"text": ["@Time"], "type": "code"}, " "], "role": "td", "extent": [1290, 1312], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [1312, 1329], "text": [{"text": ["@Time"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 0, "text": ["Bounding box "], "role": "td", "extent": [1329, 1344], "container": true, "type": "cell"}, {"indent": 4, "text": [{"text": ["$BBX"], "type": "code"}, ", ", {"text": ["$BBY"], "type": "code"}, ", ", {"text": ["$BBZ"], "type": "code"}, " "], "role": "td", "extent": [1344, 1373], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [1373, 1438], "text": [{"text": ["relbbox(0,@P).x"], "type": "code"}, ", ", {"text": ["relbbox(0,@P).y"], "type": "code"}, ", ", {"text": ["relbbox(0,@P).z"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 0, "text": ["Centroid "], "role": "td", "extent": [1438, 1449], "container": true, "type": "cell"}, {"indent": 4, "text": [{"text": ["$CEX"], "type": "code"}, ", ", {"text": ["$CEY"], "type": "code"}, ", ", {"text": ["$CEZ"], "type": "code"}, " "], "role": "td", "extent": [1449, 1478], "container": true, "type": "cell"}, {"body": [{"lang": "vex", "indent": 8, "type": "pre", "extent": [1478, 1596], "text": ["\n        vector cent = getpointbbox_center(0);\n        // cent.x, cent.y, cent.z\n        "]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 0, "text": ["Size "], "role": "td", "extent": [1596, 1604], "container": true, "type": "cell"}, {"indent": 4, "text": [{"text": ["$SIZEX"], "type": "code"}, ", ", {"text": ["$SIZEY"], "type": "code"}, ", ", {"text": ["$SIZEZ"], "type": "code"}, " "], "role": "td", "extent": [1604, 1639], "container": true, "type": "cell"}, {"body": [{"lang": "vex", "indent": 8, "type": "pre", "extent": [1639, 1750], "text": ["\n        vector size = getbbox_size(0);\n        // size.x, size.y, size.z\n        "]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 0, "text": ["Corners "], "role": "td", "extent": [1750, 1761], "container": true, "type": "cell"}, {"indent": 4, "text": [{"text": ["$XMIN"], "type": "code"}, ", ", {"text": ["$YMIN"], "type": "code"}, ", ", {"text": ["$ZMIN"], "type": "code"}, ", ", {"text": ["$XMAX"], "type": "code"}, ", ", {"text": ["$YMAX"], "type": "code"}, ", ", {"text": ["$ZMAX"], "type": "code"}, " "], "role": "td", "extent": [1761, 1820], "container": true, "type": "cell"}, {"body": [{"lang": "vex", "indent": 8, "type": "pre", "extent": [1820, 1972], "text": ["\n        vector min; vector max;\n        getbbox(0, min, max);\n        // min.x, min.y, min.z, max.x, max.y, max.z\n        "]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 0, "text": ["Raise to power "], "role": "td", "extent": [1972, 1989], "container": true, "type": "cell"}, {"indent": 4, "text": [{"text": ["^"], "type": "code"}, " "], "role": "td", "extent": [1989, 1999], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [1999, 2018], "text": [{"text": "", "value": "/vex/functions/pow", "fallback_text": "pow()", "fullpath": "/vex/functions/pow", "scheme": "Vex", "type": "link"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 0, "text": ["Trig functions "], "role": "td", "extent": [2018, 2035], "container": true, "type": "cell"}, {"indent": 4, "text": ["Degrees "], "role": "td", "extent": [2035, 2049], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [2049, 2074], "text": ["Radians"]}, {"indent": 8, "type": "para", "extent": [2074, 2152], "text": ["You can convert degrees to radians using the ", {"text": "", "value": "/vex/functions/radians", "fallback_text": "radians()", "fullpath": "/vex/functions/radians", "scheme": "Vex", "type": "link"}, " function."]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}], "type": "table", "thead": [{"body": [{"indent": 0, "role": "th", "extent": [1179, 1183], "container": true, "type": "cell"}, {"indent": 4, "text": ["Expression "], "role": "th", "extent": [1183, 1201], "container": true, "type": "cell"}, {"indent": 8, "role": "th", "type": "cell", "extent": [1201, 1216], "text": ["VEX "]}], "divider": false, "type": "row"}]}], "indent": 0, "level": 2, "text": ["Equivalencies and differences"], "extent": [1143, 1179], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"body": [{"body": [], "indent": 4, "text": ["For examples of randomization in HScript expressions and VEX, open ", {"text": ["$HH/help/files/RandomExample.hip"], "type": "code"}, "."], "attrs": {"glyph": "fa-file"}, "extent": [2224, 2333], "container": true, "blevel": 6, "type": "bullet"}], "container": true, "type": "bullet_group"}], "indent": 0, "text": [{"text": "", "fullpath": "/images/expressions/RandomNumber.png", "scheme": "Image", "type": "link", "value": "/images/expressions/RandomNumber.png"}], "role": "item", "extent": [2173, 2224], "container": true, "type": "fig"}], "container": true, "role": "item_group", "type": "fig_group"}, {"body": [{"body": [{"indent": 0, "text": [{"text": ["rand(seed)"], "type": "code"}, " "], "role": "td", "extent": [2383, 2399], "container": true, "type": "cell"}, {"body": [{"indent": 4, "type": "para", "extent": [2399, 2419], "text": [{"text": ["random(seed)"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 0, "text": [{"text": ["rand(@ptnum)"], "type": "code"}, ", ", {"text": ["rand($F)"], "type": "code"}, " "], "role": "td", "extent": [2419, 2448], "container": true, "type": "cell"}, {"body": [{"indent": 4, "type": "para", "extent": [2448, 2488], "text": [{"text": ["random(@ptnum)"], "type": "code"}, ", ", {"text": ["random(@Frame)"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}], "type": "table", "thead": [{"body": [{"indent": 0, "text": ["Expression "], "role": "th", "extent": [2358, 2372], "container": true, "type": "cell"}, {"indent": 4, "role": "th", "type": "cell", "extent": [2372, 2383], "text": ["VEX "]}], "divider": false, "type": "row"}]}, {"indent": 0, "type": "para", "extent": [2488, 2758], "text": ["The random number functions always return the same number given the same seed value. This makes \u201crandom\u201d values repeatable between playbacks. However, to make sure that different points/particles/objects/frames etc. get different random values, you must vary the seed."]}, {"body": [{"indent": 0, "type": "para", "extent": [2789, 2860], "text": ["The current frame number ($F) is usually a good seed value. However:"]}, {"body": [{"indent": 0, "blevel": 2, "type": "bullet", "extent": [2860, 2960], "text": ["If you need random values for sub-frames, use the fractional frame number ", {"text": ["$FF"], "type": "code"}, " instead of ", {"text": ["$F"], "type": "code"}, "."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [2960, 3260], "text": ["If you need more than one random value, such as R, G, and B values for a random color, give each call to rand a different seed value by multiplying or adding to ", {"text": ["$F"], "type": "code"}, ", for example ", {"text": ["rgb(@Frame, @Frame * 10, @Frame * 100)"], "type": "code"}, ". Otherwise each call will return the same number and the color will be gray."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [3260, 3357], "text": ["If you need a random number to span from ", {"text": ["-X"], "type": "code"}, " to ", {"text": ["X"], "type": "code"}, ", you can use ", {"text": ["rand(seed) * (2 * X) - X"], "type": "code"}, "."]}, {"body": [{"indent": 4, "type": "para", "extent": [3497, 3605], "text": ["The ", {"text": ["fit10"], "type": "code"}, " function is similar but reverses the mapping. For example, ", {"text": ["fit10(.3, 5, 20) == 15.5"], "type": "code"}, "."]}, {"indent": 4, "type": "para", "extent": [3605, 3782], "text": ["The ", {"text": ["fit(n, oldmin, oldmax, newmin, newmax)"], "type": "code"}, " is a more general form that lets you map any number from one range to another range. For example, ", {"text": ["fit(3,1,4,5,20) == 15"], "type": "code"}, "."]}, {"indent": 4, "type": "para", "extent": [3782, 3860], "text": ["The fit functions exist in both the HScript expression language and VEX."]}], "indent": 0, "text": ["The random number is in the range 0-1. Use the ", {"text": ["fit01(n, newmin, newmax)"], "type": "code"}, " function to map the random number to a different number range."], "extent": [3357, 3497], "container": true, "blevel": 2, "type": "bullet"}], "container": true, "type": "bullet_group"}], "indent": 0, "level": 3, "text": ["Choosing a random seed"], "extent": [2758, 2789], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [3965, 4037], "text": ["The following will randomize every primitive color on every frame."]}, {"indent": 4, "type": "para", "extent": [4037, 4066], "text": ["In HScript expressions:"]}, {"lang": null, "indent": 4, "type": "pre", "extent": [4066, 4150], "text": ["\n    rand(@primnum)\n    rand(@primnum * 10)\n    rand(@primnum * 100)\n    "]}, {"indent": 4, "type": "para", "extent": [4150, 4164], "text": ["In VEX:"]}, {"lang": "vex", "indent": 4, "type": "pre", "extent": [4164, 4318], "text": ["\n    @Cd.r = random(@primnum * @Frame);\n    @Cd.g = random(@primnum * 10 * @Frame);\n    @Cd.r = random(@primnum * 100 * @Frame);\n    "]}], "indent": 0, "text": [{"text": "", "fullpath": "/images/expressions/RandomValuesAcrossRange.png", "scheme": "Image", "type": "link", "value": "/images/expressions/RandomValuesAcrossRange.png"}], "role": "item", "extent": [3903, 3965], "container": true, "type": "fig"}], "container": true, "role": "item_group", "type": "fig_group"}], "indent": 0, "level": 3, "text": ["Randomizing values across geometry"], "extent": [3860, 3903], "container": true, "type": "h", "id": null}], "indent": 0, "level": 2, "text": ["Random numbers"], "extent": [2152, 2173], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"body": [{"body": [], "indent": 4, "text": ["For examples of cycling values in HScript expressions and VEX, open ", {"text": ["$HH/help/files/ModulusExample.hip"], "type": "code"}, "."], "attrs": {"glyph": "fa-file"}, "extent": [4400, 4511], "container": true, "blevel": 6, "type": "bullet"}], "container": true, "type": "bullet_group"}, {"indent": 4, "type": "para", "extent": [4536, 4834], "text": ["The modulus operator ", {"text": ["a % b"], "type": "code"}, " is the same in HScript expressions, VEX, and Python. It returns the remainder after dividing ", {"text": ["a"], "type": "code"}, " by ", {"text": ["b"], "type": "code"}, ". This is very useful because given a value that increases continuously (such as the frame number), you can produce a value that wraps around a range of values."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [4844, 5004], "text": ["If you try this with a floating point value, you can get unexpected results. For example, ", {"text": ["3.14 % 1"], "type": "code"}, " returns ", {"text": ["0.14"], "type": "code"}, ", and ", {"text": ["34.999 % 5"], "type": "code"}, " returns ", {"text": ["4.999"], "type": "code"}, "."]}], "indent": 4, "role": "item", "extent": [4834, 4844], "container": true, "type": "note"}], "container": true, "role": "item_group", "type": "note_group"}], "indent": 0, "text": [{"text": "", "fullpath": "/images/expressions/CyclicalValuesHScript.png", "scheme": "Image", "type": "link", "value": "/images/expressions/CyclicalValuesHScript.png"}], "role": "item", "extent": [4340, 4400], "container": true, "type": "fig"}], "container": true, "role": "item_group", "type": "fig_group"}, {"indent": 0, "type": "para", "extent": [5004, 5018], "text": ["For example:"]}, {"body": [{"body": [{"indent": 0, "text": [{"text": ["$F"], "type": "code"}, " "], "role": "th", "extent": [5018, 5026], "container": true, "type": "cell"}, {"indent": 4, "text": ["0 "], "role": "td", "extent": [5026, 5034], "container": true, "type": "cell"}, {"indent": 8, "text": ["1 "], "role": "td", "extent": [5034, 5046], "container": true, "type": "cell"}, {"indent": 12, "text": ["2 "], "role": "td", "extent": [5046, 5062], "container": true, "type": "cell"}, {"indent": 16, "text": ["3 "], "role": "td", "extent": [5062, 5082], "container": true, "type": "cell"}, {"indent": 20, "text": ["4 "], "role": "td", "extent": [5082, 5106], "container": true, "type": "cell"}, {"indent": 24, "text": ["5 "], "role": "td", "extent": [5106, 5134], "container": true, "type": "cell"}, {"body": [{"indent": 28, "type": "para", "extent": [5134, 5164], "text": ["6"]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 0, "text": [{"text": ["$F % 3"], "type": "code"}, " "], "role": "th", "extent": [5164, 5176], "container": true, "type": "cell"}, {"indent": 4, "text": ["0 "], "role": "td", "extent": [5176, 5184], "container": true, "type": "cell"}, {"indent": 8, "text": ["1 "], "role": "td", "extent": [5184, 5196], "container": true, "type": "cell"}, {"indent": 12, "text": ["2 "], "role": "td", "extent": [5196, 5212], "container": true, "type": "cell"}, {"indent": 16, "text": ["0 "], "role": "td", "extent": [5212, 5232], "container": true, "type": "cell"}, {"indent": 20, "text": ["1 "], "role": "td", "extent": [5232, 5256], "container": true, "type": "cell"}, {"indent": 24, "text": ["2 "], "role": "td", "extent": [5256, 5284], "container": true, "type": "cell"}, {"body": [{"indent": 28, "type": "para", "extent": [5284, 5315], "text": ["0"]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}], "type": "table", "thead": []}], "indent": 0, "level": 2, "text": ["Cycling values"], "extent": [4318, 4340], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"body": [{"body": [], "indent": 4, "text": ["For examples of ripples in HScript expressions and VEX, open ", {"text": ["$HH/help/files/RippleExample.hip"], "type": "code"}, "."], "attrs": {"glyph": "fa-file"}, "extent": [5375, 5478], "container": true, "blevel": 6, "type": "bullet"}], "container": true, "type": "bullet_group"}], "indent": 0, "text": [{"text": "", "fullpath": "/images/expressions/Ripples.png", "scheme": "Image", "type": "link", "value": "/images/expressions/Ripples.png"}], "role": "item", "extent": [5329, 5375], "container": true, "type": "fig"}], "container": true, "role": "item_group", "type": "fig_group"}, {"indent": 0, "type": "para", "extent": [5503, 5653], "text": ["To get mathematical radiating ripples, base the point position on a sin function using the distance of the point from the center of the surface."]}, {"body": [{"body": [{"indent": 0, "text": ["Position Y "], "role": "th", "extent": [5653, 5667], "container": true, "type": "cell"}, {"body": [{"indent": 4, "type": "para", "extent": [5667, 5728], "text": [{"text": ["sin(sqrt(($BBX - 0.5) ^ 2 + ($BBZ - 0.5) ^ 2) * 1080)"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}], "type": "table", "thead": []}, {"indent": 0, "type": "para", "extent": [5728, 5791], "text": ["To animate this, add a time-based variable to the expression:"]}, {"body": [{"body": [{"indent": 0, "text": ["Position Y "], "role": "th", "extent": [5791, 5805], "container": true, "type": "cell"}, {"body": [{"indent": 4, "type": "para", "extent": [5805, 5871], "text": [{"text": ["sin(sqrt(($BBX - 0.5) ^ 2 + ($BBZ - 0.5) ^ 2) * 720 + $F*4)"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}], "type": "table", "thead": []}, {"indent": 0, "type": "para", "extent": [5871, 5873], "text": ["\ufffc"]}], "indent": 0, "level": 2, "text": ["Ripples"], "extent": [5315, 5329], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"body": [{"body": [], "indent": 4, "text": ["For examples of ripples in HScript expressions and VEX, open ", {"text": ["$HH/help/files/ArcExamples.hip"], "type": "code"}, "."], "attrs": {"glyph": "fa-file"}, "extent": [5949, 6050], "container": true, "blevel": 6, "type": "bullet"}], "container": true, "type": "bullet_group"}, {"indent": 4, "type": "para", "extent": [6079, 6169], "text": ["You can use ", {"text": ["sin"], "type": "code"}, " and ", {"text": ["cos"], "type": "code"}, " to generate positions along an arc or circular path."]}, {"body": [{"body": [{"indent": 4, "text": ["Position X "], "role": "th", "extent": [6169, 6187], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [6187, 6213], "text": [{"text": ["cos(@ptnum * 2)"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": ["Position Z "], "role": "th", "extent": [6213, 6231], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [6231, 6262], "text": [{"text": ["sin(@ptnum * 2)"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}], "type": "table", "thead": []}], "indent": 0, "text": [{"text": "", "fullpath": "/images/expressions/Arcs.png", "scheme": "Image", "type": "link", "value": "/images/expressions/Arcs.png"}], "role": "item", "extent": [5906, 5949], "container": true, "type": "fig"}], "container": true, "role": "item_group", "type": "fig_group"}, {"indent": 0, "type": "para", "extent": [6262, 6562], "text": ["(This may be useful for creating interesting effects, however you can often accomplish similar effects by creating arcs and circles with the ", {"text": ["Circle SOP"], "fullpath": "/nodes/sop/circle", "scheme": "Node", "type": "link", "value": "/nodes/sop/circle"}, ". For example, you can place items in a circle by creating a polygonal circle and then copying the items to the circle\u2019s points.)"]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [6608, 6738], "text": ["You can create a spiral by increasing the position in the third dimension as you control the other two with ", {"text": ["sin"], "type": "code"}, " and ", {"text": ["cos"], "type": "code"}, "."]}, {"body": [{"body": [{"indent": 4, "text": ["X "], "role": "th", "extent": [6738, 6747], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [6747, 6799], "text": [{"text": ["cos(@ptnum * freq) * amplitudeX + offsetX"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": ["Y "], "role": "th", "extent": [6799, 6808], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [6808, 6838], "text": [{"text": ["@ptnum * amplitudeY"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": ["Z "], "role": "th", "extent": [6838, 6847], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [6847, 6900], "text": [{"text": ["sin(@ptnum * freq) * amplitudeZ + offsetZ"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}], "type": "table", "thead": []}], "indent": 0, "text": [{"text": "", "fullpath": "/images/expressions/3DSpiral.png", "scheme": "Image", "type": "link", "value": "/images/expressions/3DSpiral.png"}], "role": "item", "extent": [6562, 6608], "container": true, "type": "fig"}], "container": true, "role": "item_group", "type": "fig_group"}, {"body": [{"body": [{"body": [{"body": [{"body": [], "indent": 4, "text": ["To play with this example, open ", {"text": ["$HH/help/files/logSpiral.hip"], "type": "code"}, "."], "attrs": {"glyph": "fa-file"}, "extent": [6982, 7052], "container": true, "blevel": 6, "type": "bullet"}], "container": true, "type": "bullet_group"}], "indent": 0, "text": [{"text": "", "fullpath": "/images/expressions/LogSpiral.png", "scheme": "Image", "type": "link", "value": "/images/expressions/LogSpiral.png"}], "role": "item", "extent": [6934, 6982], "container": true, "type": "fig"}], "container": true, "role": "item_group", "type": "fig_group"}, {"indent": 0, "type": "para", "extent": [7077, 7145], "text": ["The example uses channel references to get values from parameters."]}, {"lang": "vex", "indent": 0, "type": "pre", "extent": [7145, 7619], "text": ["\n// Expose point normals\n@N = @N;\n\n// Natural log\nfloat e = 2.718281828;\n\n// Calculate point positions of log spiral\n@P.x = chf(\"a\") * pow(e, chf(\"b\") * @ptnum * .001) * sin(@ptnum);\n@P.z = chf(\"a\") * pow(e, chf(\"b\") * @ptnum * .001) * cos(@ptnum);\n\n// Calculate general size of each instance\n@pscale = chf(\"sc\") * chf(\"a\") * pow(e, chf(\"b\") * @ptnum * .001);\n\n// Look up color table based on point position\n@Cd = chramp(\"color_spectrum\", @ptnum/(@numpt-1.0));\n"]}], "indent": 0, "level": 3, "text": ["Logarithmic spiral in VEX"], "extent": [6900, 6934], "container": true, "type": "h", "id": null}], "indent": 0, "level": 2, "text": ["Arcs, circles, and spirals"], "extent": [5873, 5906], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [], "indent": 0, "text": ["For examples of using waveforms in HScript expressions and VEX, open ", {"text": ["$HH/help/files/WaveFormExamples.hip"], "type": "code"}, "."], "attrs": {"glyph": "fa-file"}, "extent": [7636, 7747], "container": true, "blevel": 2, "type": "bullet"}], "container": true, "type": "bullet_group"}, {"indent": 0, "type": "para", "extent": [7768, 7861], "text": ["Waveforms are very useful for generating mathematical repeating placement, size, or motion."]}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [7934, 8028], "text": ["A step function takes a continuous input and converts it to an output in discrete steps."]}, {"indent": 4, "type": "para", "extent": [8028, 8066], "text": [{"text": ["floor(@P.x * freq) * amplitude"], "type": "code"}]}], "indent": 0, "text": [{"text": "", "fullpath": "/images/expressions/StepFunction.png", "scheme": "Image", "type": "link", "value": "/images/expressions/StepFunction.png"}], "role": "item", "extent": [7883, 7934], "container": true, "type": "fig"}], "container": true, "role": "item_group", "type": "fig_group"}], "indent": 0, "level": 3, "text": ["Step function"], "extent": [7861, 7883], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"body": [{"body": [], "indent": 4, "text": ["For examples of sin waves in HScript expressions and VEX, open ", {"text": ["$HH/help/files/SinFunctionExample.hip"], "type": "code"}, "."], "attrs": {"glyph": "fa-file"}, "extent": [8139, 8249], "container": true, "blevel": 6, "type": "bullet"}], "container": true, "type": "bullet_group"}, {"indent": 4, "type": "para", "extent": [8274, 8452], "text": ["The ", {"text": ["sin"], "type": "code"}, " (and ", {"text": ["cos"], "type": "code"}, ") function are useful for creating of all kinds of shapes. You can use the basic ", {"text": ["sin"], "type": "code"}, " function to transform a line or surface into an oscillating wave."]}], "indent": 0, "text": [{"text": "", "fullpath": "/images/expressions/CyclicalValues_03.png", "scheme": "Image", "type": "link", "value": "/images/expressions/CyclicalValues_03.png"}], "role": "item", "extent": [8083, 8139], "container": true, "type": "fig"}], "container": true, "role": "item_group", "type": "fig_group"}, {"indent": 0, "type": "para", "extent": [8452, 8499], "text": ["The general form for a geometric sin wave is:"]}, {"indent": 0, "type": "para", "extent": [8499, 8548], "text": [{"text": ["sin ( @P.x * frequency ) * amplitude + offset"], "type": "code"}]}, {"indent": 0, "type": "para", "extent": [8548, 8597], "text": ["For wave motion, you could use this expression:"]}, {"indent": 0, "type": "para", "extent": [8597, 8647], "text": [{"text": ["sin ( @Time * frequency ) * amplitude + offset"], "type": "code"}]}, {"indent": 0, "type": "para", "extent": [8647, 8658], "text": ["\u2026where:"]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [8666, 8780], "text": ["The basis for the wave: to animate the geometry of the wave, this could be set instead to (@P.x + ", {"text": ["@Frame"], "type": "code"}, ")."]}], "indent": 0, "text": [{"text": ["@P.x"], "type": "code"}], "extent": [8658, 8666], "container": true, "type": "dt"}, {"body": [{"indent": 4, "type": "para", "extent": [8793, 8948], "text": ["Controls the number of waves. You could set this to the bounding box position, $BBX, to make the waves more frequent towards the end of the line."]}], "indent": 0, "text": [{"text": ["frequency"], "type": "code"}], "extent": [8780, 8793], "container": true, "type": "dt"}, {"body": [{"indent": 4, "type": "para", "extent": [8961, 9188], "text": ["Controls the height of waves. You could set this to the bounding box position, $BBX, to flatten the waves toward the end of the line, or the current frame, @Frame, to make the waves larger as the animation progresses."]}], "indent": 0, "text": [{"text": ["amplitude"], "type": "code"}], "extent": [8948, 8961], "container": true, "type": "dt"}, {"body": [{"indent": 4, "type": "para", "extent": [9198, 9240], "text": ["Translates the waves \"up\" or \"down\"."]}], "indent": 0, "text": [{"text": ["offset"], "type": "code"}], "extent": [9188, 9198], "container": true, "type": "dt"}], "container": true, "type": "dt_group"}], "indent": 0, "level": 3, "text": ["Sin wave"], "extent": [8066, 8083], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [9318, 9385], "text": ["A ", {"text": ["square wave"], "scheme": "Wp", "type": "link", "exists": true, "value": "http://en.wikipedia.org/wiki/Square_wave"}, " alternates between two values:"]}, {"indent": 4, "type": "para", "extent": [9385, 9442], "text": [{"text": ["abs(floor(@P.x * freq + offset) % 2 * amplitude))"], "type": "code"}]}], "indent": 0, "text": [{"text": "", "fullpath": "/images/expressions/SquareFunction.png", "scheme": "Image", "type": "link", "value": "/images/expressions/SquareFunction.png"}], "role": "item", "extent": [9264, 9318], "container": true, "type": "fig"}, {"body": [{"indent": 4, "type": "para", "extent": [9497, 9564], "text": ["A ", {"text": ["sawtooth wave"], "scheme": "Wp", "type": "link", "exists": true, "value": "http://en.wikipedia.org/wiki/Sawtooth_wave"}, " increases and then resets:"]}, {"indent": 4, "type": "para", "extent": [9564, 9590], "text": [{"text": ["@P.x - floor(@P.x)"], "type": "code"}]}], "indent": 0, "text": [{"text": "", "fullpath": "/images/expressions/SawToothFunction.png", "scheme": "Image", "type": "link", "value": "/images/expressions/SawToothFunction.png"}], "role": "item", "extent": [9442, 9497], "container": true, "type": "fig"}, {"body": [{"indent": 4, "type": "para", "extent": [9649, 9722], "text": ["A ", {"text": ["triangle wave"], "scheme": "Wp", "type": "link", "exists": true, "value": "http://en.wikipedia.org/wiki/Triangle_wave"}, " bounces back and forth linearly:"]}, {"indent": 4, "type": "para", "extent": [9722, 9776], "text": [{"text": ["abs(@P.x * freq % amplitude - 0.5 * amplitude)"], "type": "code"}]}], "indent": 0, "text": [{"text": "", "fullpath": "/images/expressions/TriangleWaveFunction.png", "scheme": "Image", "type": "link", "value": "/images/expressions/TriangleWaveFunction.png"}], "role": "item", "extent": [9590, 9649], "container": true, "type": "fig"}], "container": true, "role": "item_group", "type": "fig_group"}], "indent": 0, "level": 3, "text": ["Other waveforms"], "extent": [9240, 9264], "container": true, "type": "h", "id": null}], "indent": 0, "level": 2, "text": ["Waveforms"], "extent": [7619, 7636], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [], "indent": 0, "text": ["For examples of deformations in HScript expressions and VEX, open ", {"text": ["$HH/help/files/Deformation_Examples.hip"], "type": "code"}, "."], "attrs": {"glyph": "fa-file"}, "extent": [9805, 9917], "container": true, "blevel": 2, "type": "bullet"}], "container": true, "type": "bullet_group"}, {"indent": 0, "type": "para", "extent": [9938, 10178], "text": ["You can alter point positions using HScript expressions in the ", {"text": ["Point SOP"], "fullpath": "/nodes/sop/point", "scheme": "Node", "type": "link", "value": "/nodes/sop/point"}, ", or using VEX in the ", {"text": ["Attribute Wrangle SOP"], "fullpath": "/nodes/sop/attribwrangle", "scheme": "Node", "type": "link", "value": "/nodes/sop/attribwrangle"}, ", to create geometric deformations such as shear, taper, twist, squash, and bend."]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [10184, 10389], "text": ["You can get the common deformations ", {"text": ["much"], "type": "strong"}, " more easily through the ", {"text": ["Twist SOP"], "fullpath": "/nodes/sop/twist", "scheme": "Node", "type": "link", "value": "/nodes/sop/twist"}, ". However, you can use these expressions if you need to customize or elaborate on the simple deformations."]}], "indent": 0, "role": "item", "extent": [10178, 10184], "container": true, "type": "note"}], "container": true, "role": "item_group", "type": "note_group"}, {"indent": 0, "type": "para", "extent": [10389, 10455], "text": ["Remember that the equivalent of ", {"text": ["$BBX"], "type": "code"}, " in VEX is ", {"text": ["relbox(@P).x"], "type": "code"}, "."]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [10509, 10538], "text": ["To ", {"text": ["shear"], "type": "em"}, " along X:"]}, {"body": [{"body": [{"indent": 4, "text": ["Pos X "], "role": "th", "extent": [10538, 10551], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [10551, 10591], "text": [{"text": ["@P.x + $BBY * ch(\"strength\")"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}], "type": "table", "thead": []}], "indent": 0, "text": [{"text": "", "fullpath": "/images/expressions/ShearDeformation.png", "scheme": "Image", "type": "link", "value": "/images/expressions/ShearDeformation.png"}], "role": "item", "extent": [10455, 10509], "container": true, "type": "fig"}, {"body": [{"indent": 4, "type": "para", "extent": [10645, 10674], "text": ["To ", {"text": ["taper"], "type": "em"}, " along Y:"]}, {"body": [{"body": [{"indent": 4, "text": ["Pos X "], "role": "th", "extent": [10674, 10687], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [10687, 10728], "text": [{"text": ["@P.x * (ch(\"strength\") ^ $BBY)"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": ["Pos Z "], "role": "th", "extent": [10728, 10741], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [10741, 10783], "text": [{"text": ["@P.z * (ch(\"strength\") ^ $BBY)"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}], "type": "table", "thead": []}], "indent": 0, "text": [{"text": "", "fullpath": "/images/expressions/TaperDeformation.png", "scheme": "Image", "type": "link", "value": "/images/expressions/TaperDeformation.png"}], "role": "item", "extent": [10591, 10645], "container": true, "type": "fig"}, {"body": [{"indent": 4, "type": "para", "extent": [10884, 10937], "text": ["To ", {"text": ["squash and stretch"], "type": "em"}, " along Y in HScript:"]}, {"body": [{"body": [{"indent": 4, "text": ["Scale X "], "role": "th", "extent": [10937, 10952], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [10952, 10981], "text": [{"text": ["1 / sqrt(ch(\"sy\"))"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": ["Scale Y "], "role": "th", "extent": [10981, 10996], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [10996, 11021], "text": [{"text": ["ch(\"strength\")"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": ["Scale Z "], "role": "th", "extent": [11021, 11036], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [11036, 11066], "text": [{"text": ["1 / sqrt(ch(\"sy\"))"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}], "type": "table", "thead": []}, {"indent": 4, "type": "para", "extent": [11066, 11083], "text": ["In VEX:"]}, {"lang": "vex", "indent": 4, "type": "pre", "extent": [11083, 11317], "text": ["\n    v@scale = @scale;\n    @scale.x = set( 1/sqrt(ch(\"strength\")));\n    @scale.y = ch(\"strength\");\n    @scale.z = set(1/sqrt(ch(\"strength\")));\n    @P.x *= @scale.x;\n    @P.y *= @scale.y;\n    @P.z *= @scale.z;\n    "]}], "indent": 0, "text": [{"text": "", "fullpath": "/images/expressions/SquashStretch01.png", "scheme": "Image", "type": "link", "value": "/images/expressions/SquashStretch01.png"}, "\n", {"text": "", "fullpath": "/images/expressions/SquashStretch02.png", "scheme": "Image", "type": "link", "value": "/images/expressions/SquashStretch02.png"}], "role": "item", "extent": [10783, 10884], "container": true, "type": "fig"}, {"body": [{"indent": 4, "type": "para", "extent": [11372, 11469], "text": ["To ", {"text": ["twist"], "type": "em"}, " along Y in HScript (note that you use ", {"text": ["sin"], "type": "code"}, " in one axis and ", {"text": ["cos"], "type": "code"}, " in the other):"]}, {"body": [{"body": [{"indent": 4, "text": ["Pos X "], "role": "th", "extent": [11469, 11482], "container": true, "type": "cell"}, {"body": [{"indent": 9, "type": "para", "extent": [11482, 11606], "text": [{"text": ["(@P.x - $CEX) * cos( ch(\"strength\") * ($BBY - 0.5)) - (@P.z - $CEZ) * sin(ch(\"strength\")) * ($BBY - 0.5)) + $CEX"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": ["Pos Z "], "role": "th", "extent": [11606, 11619], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [11619, 11743], "text": [{"text": ["(@P.x - $CEX) * cos( ch(\"strength\") * ($BBY - 0.5)) - (@P.z - $CEZ) * cos(ch(\"strength\")) * ($BBY - 0.5)) + $CEX"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}], "type": "table", "thead": []}, {"indent": 4, "type": "para", "extent": [11743, 11760], "text": ["In VEX:"]}, {"lang": "vex", "indent": 4, "type": "pre", "extent": [11760, 12223], "text": ["\n    v@min = {0.0, 0.0, 0.0};\n    v@max = {0.0, 0.0, 0.0};\n    getpointbbox(0, @min, @max);\n    v@cent = (@max + @min) / 2.0;\n    f@twistX = cos(radians(chf(\"strength\")) * (relbbox(@P).y - 0.5));\n    f@twistZ = sin(radians(chf(\"strength\")) * (relbbox(@P).y - 0.5));\n    @P.x = (@P.x - @cent.x) * @twistX - (@P.z - @cent.z) * @twistZ + @centroid.x;\n    @P.z = (@P.x - @centroid.x) * @twistZ + (@P.z - @centroid.z) * @twistX + @centroid.z;\n    "]}], "indent": 0, "text": [{"text": "", "fullpath": "/images/expressions/TwistDeformation.png", "scheme": "Image", "type": "link", "value": "/images/expressions/TwistDeformation.png"}], "role": "item", "extent": [11317, 11372], "container": true, "type": "fig"}, {"body": [{"indent": 4, "type": "para", "extent": [12275, 12325], "text": ["To ", {"text": ["bulge and pinch"], "type": "em"}, " along Y in HScript:"]}, {"body": [{"body": [{"indent": 4, "text": ["Pos X "], "role": "th", "extent": [12325, 12338], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [12338, 12416], "text": [{"text": ["@P.x + (sin($BBY * 180) * (1 / ch(\"strength\"))) - 1) * ($BBX - 0.5)"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": ["Pos Z "], "role": "th", "extent": [12416, 12429], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [12429, 12508], "text": [{"text": ["@P.z + (sin($BBY * 180) * (1 / ch(\"strength\"))) - 1) * ($BBZ - 0.5)"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}], "type": "table", "thead": []}, {"indent": 4, "type": "para", "extent": [12508, 12525], "text": ["In VEX:"]}, {"lang": "vex", "indent": 4, "type": "pre", "extent": [12525, 12785], "text": ["\n    float PI = 3.1415926535897932384;\n    @P.x += (sin(relbbox(@P).y * PI) * (1.0 / chf(\"bulge_factor\")) - 1.0) *(relbbox(@P).x - 0.5);\n    @P.z += (sin(relbbox(@P).y * PI) * (1.0 / chf(\"bulge_factor\")) - 1.0) *(relbbox(@P).z - 0.5);\n    "]}], "indent": 0, "text": [{"text": "", "fullpath": "/images/expressions/BulgeAndPinch.png", "scheme": "Image", "type": "link", "value": "/images/expressions/BulgeAndPinch.png"}], "role": "item", "extent": [12223, 12275], "container": true, "type": "fig"}, {"body": [{"indent": 4, "type": "para", "extent": [12840, 12879], "text": ["To ", {"text": ["bend"], "type": "em"}, " along Y in HScript:"]}, {"body": [{"body": [{"indent": 4, "text": ["Pos X "], "role": "th", "extent": [12879, 12892], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [12892, 12972], "text": [{"text": ["@P.x * cos($BBY * ch(\"strength\")) - @P.y * sin($BBY * ch(\"strength\"))"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": ["Pos Y "], "role": "th", "extent": [12972, 12985], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [12985, 13066], "text": [{"text": ["@P.x * sin($BBY * ch(\"strength\")) + @P.y * cos($BBY * ch(\"strength\"))"], "type": "code"}]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}], "type": "table", "thead": []}, {"indent": 4, "type": "para", "extent": [13066, 13083], "text": ["In VEX:"]}, {"lang": "vex", "indent": 4, "type": "pre", "extent": [13083, 13339], "text": ["\n    @P.x *= cos(radians(relbbox(@P).y * ch(\"strength\"))) - @P.y * sin(radians(relbbox(@P).y * ch(\"bend_factor\")));\n    @P.y *= sin(radians(relbbox(@P).y * ch(\"strength\"))) + @P.y * cos(radians(relbbox(@P).y * ch(\"bend_factor\")));\n    "]}], "indent": 0, "text": [{"text": "", "fullpath": "/images/expressions/BendDeformation.png", "scheme": "Image", "type": "link", "value": "/images/expressions/BendDeformation.png"}], "role": "item", "extent": [12785, 12840], "container": true, "type": "fig"}], "container": true, "role": "item_group", "type": "fig_group"}], "indent": 0, "level": 2, "text": ["Geometric deformations"], "extent": [9776, 9805], "container": true, "type": "h", "id": null}], "summary": ["Tips and tricks for writing expressions to accomplish various effects."], "type": "root", "attrs": {}, "title": ["Expression cookbook"]}