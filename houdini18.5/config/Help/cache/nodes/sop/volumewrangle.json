{"type": "root", "attrs": {"type": "node", "context": "sop", "internal": "volumewrangle", "icon": "SOP/volumewrangle", "tags": "volume, attrs, core, tech", "since": "12.5", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Volume Wrangle"], "extent": [0, 19]}, {"type": "summary", "indent": 0, "text": ["Runs a VEX snippet to modify voxel values in a volume."], "extent": [143, 205]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Overview"], "extent": [205, 220], "body": [{"type": "para", "indent": 0, "text": ["This is a very powerful, low-level node that lets experts who are\nfamiliar with VEX tweak voxel values using code."], "extent": [220, 337]}, {"type": "para", "indent": 0, "text": ["This node corresponds to the ", {"scheme": "Node", "value": "/nodes/sop/volumevop", "type": "link", "text": ["Volume VOP SOP"], "fullpath": "/nodes/sop/volumevop"}, ",\nbut uses a textual VEX snippet instead of a VOP network."], "extent": [337, 461]}, {"type": "warning_group", "body": [{"type": "warning", "indent": 0, "role": "item", "extent": [461, 470], "body": [{"type": "para", "indent": 4, "text": ["This node requires that you understand the ", {"scheme": null, "value": "/vex/", "type": "link", "text": ["vex language"], "fullpath": "/vex/index"}, ".\n    It is very easy to write incorrect code using this node."], "extent": [470, 601]}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 0, "text": ["This node runs the snippet ", {"type": "em", "text": ["on every voxel in the input volume(s)"]}, "\n(unless the ", {"type": "ui", "text": ["Bind each volume to density"]}, " parameter is on).\nThe snippet can edit the input geometry by changing attributes.\nIt can access information from other geometry using attributes and VEX functions."], "extent": [601, 877]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["Press ", {"keys": ["MMB"], "type": "keys", "text": null}, " on the node to see any error output from the snippet."], "extent": [877, 948]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["You can use the VEX function ", {"type": "code", "text": ["ch"]}, " to evaluate parameters.\n  The path is relative to this node (", {"type": "code", "text": ["ch(\"parm\")"]}, " will evaluate the parameter ", {"type": "code", "text": ["parm"]}, " on this node).\n  This evaluation will be done at the current time."], "extent": [948, 1161]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Unlike the ", {"scheme": "Node", "value": "/nodes/sop/volumemix", "type": "link", "text": ["Volume Mix SOP"], "fullpath": "/nodes/sop/volumemix"}, ", this does not use local variables.\n  Further, all backtick expressions and ", {"type": "code", "text": ["$F"]}, " variables will be evaluated at frame 1,\n  not the current time.\n  Use ", {"type": "code", "text": ["Frame"]}, ", ", {"type": "code", "text": ["Time"]}, ", or ", {"type": "code", "text": ["TimeInc"]}, " instead."], "extent": [1161, 1401]}], "container": true}, {"body": [{"indent": 0, "type": "para", "extent": [29, 294], "text": ["The ", {"text": ["VEX snippet"], "type": "ui"}, " parameter lets you enter a snippet of ", {"text": ["VEX code"], "fullpath": "/vex/index", "scheme": null, "type": "link", "value": "/vex/"}, " to run on the input geometry.\nSee ", {"text": ["VEX snippets"], "fullpath": "/vex/snippets", "scheme": null, "type": "link", "value": "/vex/snippets"}, " for information on special syntax in the snippet parameter.\nSee ", {"text": ["the VEX chapter"], "fullpath": "/vex/index", "scheme": null, "type": "link", "value": "/vex/"}, " for information on the VEX language."]}], "indent": 0, "level": 3, "text": ["Syntax"], "extent": [16, 29], "container": true, "type": "h", "id": null}]}, {"level": 2, "id": "values", "container": true, "type": "h", "indent": 0, "text": ["Reading and modifying the voxel value"], "extent": [1427, 1480], "body": [{"type": "para", "indent": 0, "text": ["The current voxel value in a volume is available as ", {"type": "code", "text": ["@", {"type": "var", "text": ["volume_name"]}]}, ".\nYou can read this variable to get the current value, and assign it to change the value.\nFor example, to add ", {"type": "code", "text": ["0.1"]}, " to the value of every voxel in the float volume ", {"type": "code", "text": ["foo"]}, ":"], "extent": [1480, 1723]}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\n@foo += 0.1\n"], "extent": [1723, 1749]}, {"type": "para", "indent": 0, "text": ["If a volume does not have a name, it will automatically be bound to ", {"type": "code", "text": ["@density"]}, "."], "extent": [1749, 1831]}, {"type": "para", "indent": 0, "text": ["If you have multiple named volumes in the input, you can write a single snippet\nthat modifies the different volumes in different ways, for example:"], "extent": [1831, 1980]}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\n@foo += 0.1\n@bar += 0.2\n@baz += 0.3\n"], "extent": [1980, 2030]}, {"type": "para", "indent": 0, "text": ["Alternatively, you can turn on ", {"type": "ui", "text": ["Bind each volume to density"]}, ".\nThis acts as if every input volume was named ", {"type": "code", "text": ["density"]}, ",\nso you can use the same snippet to modify every voxel in every volume:"], "extent": [2030, 2223]}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\n// Modify @foo, @bar, and @baz in the same way\n// (when Bind each volume to density is on)\n@density += sin(@P.x)\n"], "extent": [2223, 2350]}, {"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [2350, 2357], "body": [{"type": "para", "indent": 4, "text": ["Unlike how the\n    ", {"scheme": "Node", "value": "/nodes/sop/pointwrangle", "type": "link", "text": ["Point Wrangle"], "fullpath": "/nodes/sop/pointwrangle"}, "\n    and ", {"scheme": "Node", "value": "/nodes/sop/attribwrangle", "type": "link", "text": ["Attribute Wrangle"], "fullpath": "/nodes/sop/attribwrangle"}, " nodes work,\n    writing to an unknown ", {"type": "code", "text": ["@", {"type": "var", "text": ["name"]}]}, " variable will not create a volume."], "extent": [2357, 2555]}], "container": true}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["VEX variables"], "extent": [2555, 2575], "body": [{"type": "para", "indent": 0, "text": ["You can create temporary variables.\nFor example, the following code reads an offset location from a point."], "extent": [2575, 2684]}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\nvector temp = @P;\ntemp += {0.1, 0.2, 0.3};\n@density = volumesample(@OpInput1, 0, temp);\n"], "extent": [2684, 2786]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Bound Variables"], "extent": [2786, 2809], "body": [{"type": "para", "indent": 0, "text": ["A number of variables are bound in the Volume VOP context. \nUse the ", {"type": "code", "text": ["@"]}, " prefix syntax to access them."], "extent": [2809, 2913]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["P"]}], "extent": [2913, 2918], "body": [{"type": "para", "indent": 8, "text": ["Location of the current voxel\u2019s center."], "extent": [2918, 2966]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["ix"]}, ", ", {"type": "code", "text": ["iy"]}, ", ", {"type": "code", "text": ["iz"]}], "extent": [2966, 2984], "body": [{"type": "para", "indent": 8, "text": ["The integer index of the current voxel.  With VDBs, this can be\n        negative."], "extent": [2984, 3074]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["resx"]}, ", ", {"type": "code", "text": ["resy"]}, ", ", {"type": "code", "text": ["resz"]}], "extent": [3074, 3098], "body": [{"type": "para", "indent": 8, "text": ["The resolution of the current volume primitive.  For VDBs this\n        is the size of the active voxel region."], "extent": [3098, 3217]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["dPdx"]}, ", ", {"type": "code", "text": ["dPdy"]}, ", ", {"type": "code", "text": ["dPdz"]}], "extent": [3217, 3241], "body": [{"type": "para", "indent": 8, "text": ["Vectors giving the length and orientation of the x, y, and z edges of\n        the 0th voxel."], "extent": [3241, 3342]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["center"]}], "extent": [3342, 3352], "body": [{"type": "para", "indent": 8, "text": ["The center of the volume in SOP space."], "extent": [3352, 3399]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["Time"]}], "extent": [3399, 3407], "body": [{"type": "para", "indent": 8, "text": ["Current time in seconds."], "extent": [3407, 3440]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["Frame"]}], "extent": [3440, 3449], "body": [{"type": "para", "indent": 8, "text": ["Current time in frames."], "extent": [3449, 3481]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["TimeInc"]}], "extent": [3481, 3492], "body": [{"type": "para", "indent": 8, "text": ["Time increment between frames, in seconds."], "extent": [3492, 3543]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["OpInput1"]}, ", ", {"type": "code", "text": ["OpInput2"]}, ", ", {"type": "code", "text": ["OpInput3"]}, ", ", {"type": "code", "text": ["OpInput4"]}], "extent": [3543, 3591], "body": [{"type": "para", "indent": 8, "text": ["A string that can be used to refer to the corresponding input\n        of this SOP in vex operations that take file parameters."], "extent": [3591, 3727]}], "container": true}], "container": true}]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [3727, 3739], "body": [{"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Code"], "extent": [3739, 3751], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Group"], "extent": [3751, 3759], "body": [{"type": "para", "indent": 4, "text": ["Only run the program on these volumes in the input geometry.\n    Leave this blank to modify all volumes in the input."], "extent": [3759, 3886]}, {"type": "para", "indent": 4, "text": ["(See ", {"scheme": null, "value": "#values", "type": "link", "text": ["reading and writing voxel values"], "fullpath": "/nodes/sop/volumewrangle#values", "fragment": "#values"}, " above.)"], "extent": [3886, 3947]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Bind Each to Density"], "extent": [3947, 3969], "body": [{"type": "para", "indent": 4, "text": ["Changes how the node applies the snippet.\n    When this is off, you must refer to specific volumes in the input by name (for example ", {"type": "code", "text": ["@foo"]}, ").\n    When this is on, every input volume is treated as ", {"type": "code", "text": ["@density"]}, ",\n    so you can write one snippet to affect every input volume regardless of their names."], "extent": [3969, 4275]}, {"type": "para", "indent": 4, "text": ["(See ", {"scheme": null, "value": "#values", "type": "link", "text": ["reading and writing voxel values"], "fullpath": "/nodes/sop/volumewrangle#values", "fragment": "#values"}, " above.)"], "extent": [4275, 4340]}], "container": true, "role": "item"}, {"body": [{"indent": 4, "type": "para", "extent": [2491, 2636], "text": ["A snippet of VEX code that will manipulate the point attributes.\n    You can use ", {"text": ["@", {"text": ["variable_name"], "type": "var"}], "type": "code"}, " syntax to access geometry attributes."]}], "indent": 0, "text": ["VEXpression"], "role": "item", "attrs": {"id": "snippet"}, "extent": [2460, 2473], "container": true, "type": "parameters_item"}, {"type": "parameters_item", "indent": 0, "text": ["Volumes To Write To"], "extent": [4372, 4393], "body": [{"type": "para", "indent": 4, "text": ["Only modify volumes if their names match this pattern.\n    The default pattern allows any volume to be modified.\n    You can speed up the node by only listing volumes that are ", {"type": "em", "text": ["actually"]}, " modified by the snippet."], "extent": [4393, 4614]}, {"type": "para", "indent": 4, "text": ["For example, in the following snippet, only the ", {"type": "code", "text": ["density"]}, " volume is modified.\n    The ", {"type": "code", "text": ["temperature"]}, " volume is not modified, only read."], "extent": [4614, 4758]}, {"lang": "vex", "type": "pre", "indent": 4, "text": ["\n    @density = @temperature;\n    "], "extent": [4758, 4813]}, {"type": "para", "indent": 4, "text": ["However, for obscure reasons, the node will both modify ", {"type": "code", "text": ["density"]}, " and ", {"type": "em", "text": ["copy"]}, " ", {"type": "code", "text": ["temperature"]}, ".\n    This uses time and memory.\n    To prevent this, you could set this parameter to ", {"type": "code", "text": ["density"]}, " to prevent the node\n    from copying ", {"type": "code", "text": ["temperature"]}, ".\n    Of course, this requires that you explicitly manage the list of writable volumes."], "extent": [4813, 5147]}], "container": true, "role": "item"}, {"body": [{"indent": 4, "type": "para", "extent": [36, 248], "text": ["Requires that you declare ", {"text": ["@"], "type": "code"}, " bindings in snippets as prototypes before using them. This applies to both attributes (for example ", {"text": ["@Cd"], "type": "code"}, ") and \"convenience\" bindings such as ", {"text": ["@ptnum"], "type": "code"}, " and ", {"text": ["@Frame"], "type": "code"}, ". For example:"]}, {"lang": "vex", "indent": 4, "type": "pre", "extent": [248, 447], "text": ["\n    // Declare bindings\n    int @ptnum;\n    float @Frame;\n    vector @Cd;\n\n    // Use bindings after declaration\n    int pointnum = @ptnum;\n    float red = @Cd[0] / @Frame;\n    "]}, {"indent": 4, "type": "para", "extent": [447, 646], "text": ["Automatic binding with the ", {"text": ["@"], "type": "code"}, " syntax can be convenient, but as your scene becomes more complex there is the risk that a typo in an ", {"text": ["@"], "type": "code"}, " binding will silently just bind a non-existent attribute."]}], "indent": 0, "text": ["Enforce Prototypes"], "extent": [16, 36], "container": true, "type": "parameters_item", "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Bindings"], "extent": [5184, 5199], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Autobind by Name"], "extent": [5199, 5222], "body": [{"type": "para", "indent": 8, "text": ["Will use the name primitive attribute to determine which\n        volume binds with which parameter.  If the name attribute\n        isn\u2019t present, the first volume is bound to density."], "extent": [5222, 5415]}, {"type": "para", "indent": 8, "text": ["A name like \"foo\" will be bound to the float parameter\n        \"foo\".  A name of \"foo.x\" will be bound to the x\n        component of the vector (three float) parameter \"foo\".  A\n        name like \"foo.zx\" will be bound to the x,z component of\n        the matrix (three by three) parameter \"foo\"."], "extent": [5415, 5724]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Primitive, Primitive Name, VEX Parameter"], "extent": [5724, 5770], "body": [{"type": "para", "indent": 8, "text": ["Manually specifies the bindings of each primitive.  This\n        is equivalent to those primitives having a name attribute\n        with the given name.  If Primitive Name is not empty,\n        the primitive with the matching name will be bound to the\n        given vex parameter."], "extent": [5770, 6059]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Only Output Created Geometry"], "extent": [6059, 6093], "body": [{"type": "para", "indent": 8, "text": ["Don\u2019t output any of the incoming volumes.  Instead, the output\n        will consiste of only geometry created by the VOPs.  This\n        is useful if generating points from volumes.  Note you will\n        still have to do a dummy write to any volume you wish\n        to iterate over."], "extent": [6093, 6386]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Evaluation Node Path"], "extent": [6386, 6412], "body": [{"type": "para", "indent": 8, "text": ["VEX functions like ", {"type": "code", "text": ["ch()"]}, " usually evaluate with respect to this node.\n        Providing a path here can override where the path search starts\n        from.  This is useful for embedding in a digital asset where you\n        would like the top level digital asset to be the search root."], "extent": [6412, 6706]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Export Parameters"], "extent": [6706, 6729], "body": [{"type": "para", "indent": 8, "text": ["This pattern can be used to override\n        the export option on the VEX shader to avoid writing to \n        certain volumes.  The pattern matches the VEX parameter, not\n        the bound volume.  The volume will still be bound for\n        reading."], "extent": [6729, 6988]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}]}, {"type": "parameters_item_group", "body": [{"body": [{"indent": 4, "type": "para", "extent": [2886, 3008], "text": ["VEX can evaluate at 32-bit or 64-bit precision.  64-bit provides\n    higher accuracy, especially for transforms."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [3018, 3227], "text": ["Incoming attributes will preserve their original precision, so using 64-bit VEX on 32-bit positions will convert them to 64-bit, apply the operation, then convert back to 32-bit when writing out."]}], "indent": 4, "role": "item", "extent": [3008, 3018], "container": true, "type": "note"}], "container": true, "role": "item_group", "type": "note_group"}, {"indent": 4, "type": "para", "extent": [3227, 3535], "text": ["The auto mode will switch between 32-bit and 64-bit depending on the preferred precision of the incoming geometry. When run in 64-bit precision, any created attributes will be 64-bit. When run in 32-bit any created attributes will be 32-bit. Use ", {"text": "", "fullpath": "/nodes/sop/attribcast", "scheme": "Node", "type": "link", "value": "/nodes/sop/attribcast"}, " to change the preferred precision."]}], "indent": 0, "text": ["VEX Precision"], "role": "item", "attrs": {"id": "vex_precision"}, "extent": [2846, 2862], "container": true, "type": "parameters_item"}], "container": true, "role": "item_group"}], "text": "Parameters"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [7034, 7043], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/volumemix", "type": "link", "text": "", "fullpath": "/nodes/sop/volumemix"}], "extent": [7043, 7067]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/volumevop", "type": "link", "text": "", "fullpath": "/nodes/sop/volumevop"}], "extent": [7067, 7090]}], "container": true}], "text": "Related"}], "title": ["Volume Wrangle"], "summary": ["Runs a VEX snippet to modify voxel values in a volume."], "included": ["/nodes/sop/attribvop", "/nodes/sop/pointwrangle", "/nodes/sop/wrangle_syntax", "/vex/_enforce_prototypes"]}