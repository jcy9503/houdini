{"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [45, 215], "text": ["This detail attribute records the current animation range and sample rate\n    as well as the original animation range and sample rate of the imported\n    animation."]}], "indent": 0, "text": ["clipinfo"], "attrs": {"id": "clipinfo"}, "extent": [16, 26], "container": true, "type": "dt"}, {"body": [{"indent": 4, "type": "para", "extent": [267, 482], "text": ["This point attribute specifies the scaling behavior when performing local\n    transformations. For more details on what these values indicate see\n    ", {"text": "", "value": "/vex/functions/combinelocaltransform", "fallback_text": "combinelocaltransform()", "fullpath": "/vex/functions/combinelocaltransform", "scheme": "Vex", "type": "link"}, " and ", {"text": "", "value": "/vex/functions/extractlocaltransform", "fallback_text": "extractlocaltransform()", "fullpath": "/vex/functions/extractlocaltransform", "scheme": "Vex", "type": "link"}]}], "indent": 0, "text": ["scaleinheritance"], "attrs": {"id": "scaleinheritance_attrib"}, "extent": [215, 233], "container": true, "type": "dt"}, {"body": [{"indent": 4, "type": "para", "extent": [520, 746], "text": ["This 3\u00d73 matrix point attribute specifies the world transform for the\n    point. While the world position of the point is still ", {"text": ["P"], "type": "code"}, ", this transform\n    encodes the world transform\u2019s rotation, scale, and shear components."]}], "indent": 0, "text": ["transform"], "attrs": {"id": "transform_attrib"}, "extent": [482, 493], "container": true, "type": "dt"}, {"body": [{"indent": 4, "type": "para", "extent": [793, 1031], "text": ["This dictionary point attribute configures how the joint behaves in a\n    full-body inverse kinematics solver. For more details on the valid keys,\n    see the ", {"text": ["jointoptions"], "type": "code"}, " parameter for ", {"text": "", "value": "/vex/functions/solvephysfbik", "fallback_text": "solvephysfbik()", "fullpath": "/vex/functions/solvephysfbik", "scheme": "Vex", "type": "link"}, " and\n    ", {"text": "", "value": "/vex/functions/solvefbik", "fallback_text": "solvefbik()", "fullpath": "/vex/functions/solvefbik", "scheme": "Vex", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["fbik_jointconfig"], "type": "code"}], "attrs": {"id": "fbik_jointconfig"}, "extent": [746, 766], "container": true, "type": "dt"}, {"body": [{"indent": 4, "type": "para", "extent": [1080, 1467], "text": ["This dictionary point attribute configures how the joint\u2019s goal transform\n    behaves in a full-body inverse kinematics solver. This is only used when\n    the joint has a goal transform (for example, if the joint is mapped to a\n    joint on the source skeleton). For more details on the valid keys, see the\n    ", {"text": ["targetoptions"], "type": "code"}, " parameter for ", {"text": "", "value": "/vex/functions/solvephysfbik", "fallback_text": "solvephysfbik()", "fullpath": "/vex/functions/solvephysfbik", "scheme": "Vex", "type": "link"}, " and ", {"text": "", "value": "/vex/functions/solvefbik", "fallback_text": "solvefbik()", "fullpath": "/vex/functions/solvefbik", "scheme": "Vex", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["fbik_targetconfig"], "type": "code"}], "attrs": {"id": "fbik_targetconfig"}, "extent": [1031, 1052], "container": true, "type": "dt"}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [1540, 1615], "text": ["The point group to which this multiparm instance will be applied."]}], "indent": 4, "text": ["Group"], "attrs": {"id": "group"}, "extent": [1510, 1521], "container": true, "type": "dt"}, {"body": [{"indent": 8, "type": "para", "extent": [1643, 1769], "text": ["This parameter specifies how the transformation described by this multiparm instance should be applied to the input."]}, {"body": [{"body": [{"indent": 12, "type": "para", "extent": [1820, 1997], "text": ["The transformation will be applied 'on top' of the input pose, this is analogous to treating any input local transformations as an Object node\u2019s ", {"text": ["pre-transform"], "type": "ui"}, "."]}], "indent": 8, "text": ["Pre-Multiply"], "attrs": {"id": "premultiply"}, "extent": [1769, 1791], "container": true, "type": "dt"}, {"body": [{"indent": 12, "type": "para", "extent": [2050, 2439], "text": ["The transformation will be applied in between the input point\u2019s parent transform and its local transform. This is analogous to modifying the ", {"text": ["pre-transform"], "type": "ui"}, " of a Object node. This mode is especially useful when we wish to reproportion an animated input using simple translations without compromising any input motion, effectively moving the pivot for the point\u2019s animation."]}], "indent": 8, "text": ["Post-Multiply"], "attrs": {"id": "postmultiply"}, "extent": [1997, 2020], "container": true, "type": "dt"}, {"body": [{"indent": 12, "type": "para", "extent": [2483, 2747], "text": ["The transformation described in this multiparm instance will completely overwrite any input local transforms on the points. This is useful when we wish to 'zero out' any input animation, or when working with the ", {"text": ["Bake"], "type": "ui"}, " options on the Rig Pose node."]}], "indent": 8, "text": ["Override"], "attrs": {"id": "override"}, "extent": [2439, 2457], "container": true, "type": "dt"}, {"body": [{"indent": 12, "type": "para", "extent": [2801, 3120], "text": ["The transformation will behave just as in the ", {"text": ["Pre-Multiply"], "type": "ui"}, " mode, but any input animation will be replaced be the pose specified in the ", {"text": ["Rest Pose"], "type": "ui"}, " parameter. This is useful when you wish to revert a points transform to a 'rest pose' rather than simply zeroing the local transform as in ", {"text": ["Override"], "type": "ui"}, "."]}], "indent": 8, "text": ["From Rest Pose"], "attrs": {"id": "fromrestpose"}, "extent": [2747, 2771], "container": true, "type": "dt"}], "container": true, "type": "dt_group"}], "indent": 4, "text": ["Mode"], "attrs": {"id": "mode"}, "extent": [1615, 1625], "container": true, "type": "dt"}, {"body": [{"indent": 8, "type": "para", "extent": [3164, 3505], "text": ["The left menu chooses the order in which transforms are applied\n        (for example, scale, then rotate, then translate). This can change the\n        position and orientation of the object, in the same way that going a\n        block and turning east takes you to a different place than turning east\n        and then going a block."]}, {"indent": 8, "type": "para", "extent": [3505, 3705], "text": ["The right menu chooses the order in which to rotate around the\n        X, Y, and Z axes. Certain orders can make character joint\n        transforms easier to use, depending on the character."]}], "indent": 4, "text": ["Transform Order"], "attrs": {"id": "transform"}, "extent": [3120, 3141], "container": true, "type": "dt"}, {"body": [{"indent": 8, "type": "para", "extent": [3743, 3780], "text": ["Translation along XYZ axes."]}], "indent": 4, "text": ["Translate"], "attrs": {"id": "translate"}, "extent": [3705, 3720], "container": true, "type": "dt"}, {"body": [{"indent": 8, "type": "para", "extent": [3812, 3854], "text": ["Degrees rotation about XYZ axes."]}], "indent": 4, "text": ["Rotate"], "attrs": {"id": "rotate"}, "extent": [3780, 3792], "container": true, "type": "dt"}, {"body": [{"indent": 8, "type": "para", "extent": [3884, 3929], "text": ["Non-uniform scaling about XYZ axes."]}], "indent": 4, "text": ["Scale"], "attrs": {"id": "scale"}, "extent": [3854, 3865], "container": true, "type": "dt"}, {"body": [{"body": [{"body": [{"indent": 12, "type": "para", "extent": [3984, 4035], "text": ["The pivot translation along XYZ axes."]}], "indent": 8, "text": ["Pivot Translate"], "extent": [3959, 3984], "container": true, "type": "dt"}, {"body": [{"indent": 12, "type": "para", "extent": [4057, 4105], "text": ["The pivot rotation about XYZ axes."]}], "indent": 8, "text": ["Pivot Rotate"], "extent": [4035, 4057], "container": true, "type": "dt"}], "container": true, "type": "dt_group"}], "indent": 4, "text": ["Pivot"], "attrs": {"id": "pivot"}, "extent": [3929, 3940], "container": true, "type": "dt"}], "container": true, "type": "dt_group"}], "indent": 0, "text": ["Transformations"], "attrs": {"id": "transformations"}, "extent": [1467, 1484], "container": true, "type": "dt"}, {"body": [{"indent": 4, "type": "para", "extent": [4134, 4444], "text": ["This parameter allows you to choose whether to use a dictionary attribute on the first input to look up the drivers on the second input or simply to match by an attribute present on both inputs. For example, the second option is useful when the second input contains a subset of the first input\u2019s points."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [4467, 4737], "text": ["Use a dictionary point attribute present on the first input to look up the drivers on the second input. This attribute is created for you by the ", {"text": ["Map Points SOP"], "fullpath": "/nodes/sop/kinefx--mappoints", "scheme": "Node", "type": "link", "value": "/nodes/sop/kinefx--mappoints"}, ", but any dictionary attribute matching the following format can be used:"]}, {"body": [{"body": [{"lang": "vex", "indent": 12, "type": "pre", "extent": [4789, 5131], "text": ["\n            {\n                'reference': string, // The point attribute on the driver skeleton to use as reference. If set to \"ptnum\", the point number will be used.\n                'value': string or int // The value of the point attribute on the point to use as the driver.\n            }\n            "]}], "indent": 8, "text": ["Dictionary attribute VEX format"], "role": "item", "extent": [4737, 4789], "container": true, "type": "disclosure"}], "container": true, "role": "item_group", "type": "disclosure_group"}], "indent": 4, "text": ["Mapping Attribute"], "extent": [4444, 4467], "container": true, "type": "dt"}, {"body": [{"indent": 8, "type": "para", "extent": [5164, 5442], "text": ["Match points on the first input to corresponding points on the second input using a given point attribute. For example, if ", {"text": ["Attribute To Match"], "type": "ui"}, " is set to 'name' then the points on the first input will be driven by points on the second input that share the same name."]}], "indent": 4, "text": ["Match By Attribute"], "extent": [5131, 5164], "container": true, "type": "dt"}], "container": true, "type": "dt_group"}], "indent": 0, "text": ["Map Using"], "attrs": {"id": "mapusing"}, "extent": [4105, 4116], "container": true, "type": "dt"}, {"body": [{"indent": 4, "type": "para", "extent": [5488, 5575], "text": ["The name of the dictionary point attribute on the first input to use for mapping."]}], "indent": 0, "text": ["Mapping Attribute"], "attrs": {"id": "mappingattribname"}, "extent": [5442, 5461], "container": true, "type": "dt"}, {"body": [{"indent": 4, "type": "para", "extent": [5618, 5704], "text": ["The name of the point attribute present on both inputs to be used to map points."]}], "indent": 0, "text": ["Attribute To Match"], "attrs": {"id": "attribtomatch"}, "extent": [5575, 5595], "container": true, "type": "dt"}, {"body": [{"indent": 4, "type": "para", "extent": [5740, 6070], "text": ["This detail ", {"text": ["dict"], "type": "code"}, " attribute maps between a channel name and a ", {"text": ["dict"], "type": "code"}, " describing the attribute that stores the channel\u2019s value.\n    The channel\u2019s value can be stored in a detail attribute, or the point attribute value for a specific joint.\n    The channel names can contain characters that are not valid for attribute names."]}, {"indent": 4, "type": "para", "extent": [6070, 6119], "text": ["The valid keys for the channel options are:"]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [6133, 6302], "text": ["Specifies the name of a ", {"text": ["float"], "type": "code"}, " attribute containing the channel value.\n        If this key is not present, the attribute name is the same as the channel name."]}], "indent": 4, "text": [{"text": ["attrib"], "type": "code"}], "extent": [6119, 6133], "container": true, "type": "dt"}, {"body": [{"indent": 8, "type": "para", "extent": [6321, 6491], "text": ["Specifies the attribute\u2019s class, which can be either ", {"text": ["detail"], "type": "code"}, " or ", {"text": ["point"], "type": "code"}, ".\n        If this key is not present, the attribute is assumed to be a detail attribute."]}], "indent": 4, "text": [{"text": ["attribclass"], "type": "code"}], "extent": [6302, 6321], "container": true, "type": "dt"}, {"body": [{"indent": 8, "type": "para", "extent": [6503, 6611], "text": ["If the ", {"text": ["attribclass"], "type": "code"}, " is ", {"text": ["point"], "type": "code"}, ", specifies the name of the joint to read the attribute value from."]}], "indent": 4, "text": [{"text": ["name"], "type": "code"}], "extent": [6491, 6503], "container": true, "type": "dt"}], "container": true, "type": "dt_group"}], "indent": 0, "text": ["clipchannels"], "attrs": {"id": "clipchannels"}, "extent": [5704, 5718], "container": true, "type": "dt"}, {"body": [{"indent": 4, "type": "para", "extent": [6659, 6738], "text": ["Specifies the channel that provides the weight for the blend shape input."]}], "indent": 0, "text": ["blendshape_channel"], "attrs": {"id": "blendshape_channel"}, "extent": [6611, 6631], "container": true, "type": "dt"}, {"body": [{"indent": 4, "type": "para", "extent": [6780, 7026], "text": ["Specifies the name of the blend shape input (the standard ", {"text": ["name"], "type": "code"}, " attribute contains the name of the base shape that the input is associated with). This is primarily used for round-tripping from formats where the blend shape inputs are named."]}], "indent": 0, "text": ["blendshape_name"], "attrs": {"id": "blendshape_name"}, "extent": [6738, 6755], "container": true, "type": "dt"}], "container": true, "type": "dt_group"}], "type": "root", "attrs": {"type": "include"}}