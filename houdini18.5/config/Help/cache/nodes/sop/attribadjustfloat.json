{"body": [{"indent": 0, "text": ["Attribute Adjust Float"], "type": "title", "extent": [98, 125], "level": 0}, {"indent": 0, "type": "summary", "extent": [125, 200], "text": ["Modifies floating point attribute values on the incoming geometry."]}, {"body": [{"indent": 0, "type": "para", "extent": [215, 551], "text": ["The Attribute Adjust Float SOP provides an interface to vary ", {"text": ["float"], "type": "code"}, " type attribute values, reducing the need to create VOP networks or write VEX code. It allows modification by a uniform value or a varying value for each element. The varying values can be generated fully randomly or sampled from a spatially-coherent noise pattern."]}, {"indent": 0, "type": "para", "extent": [551, 804], "text": ["This node can also post-process the values, for example by blending them with another attribute or limiting them to the specified range. Additionally, it has the functionality to convert between units of frame and time or between degrees and radians. "]}, {"indent": 0, "type": "para", "extent": [804, 905], "text": ["The following graph provides a basic schematic view of the processes behind Attribute Adjust Float."]}, {"indent": 0, "type": "para", "extent": [905, 939], "text": [{"text": "", "fullpath": "/images/sop/aa_graph.svg", "scheme": "Image", "type": "link", "value": "/images/sop/aa_graph.svg"}]}], "indent": 0, "level": 2, "text": ["Overview"], "extent": [200, 215], "container": true, "type": "h", "id": null}, {"body": [{"body": [], "indent": 0, "level": 2, "text": [" General "], "attrs": {"id": "linkgeneral"}, "extent": [951, 966], "container": true, "type": "sep"}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [1010, 1124], "text": ["The subset of the input geometry to apply the modifications to. Leave this blank to affect all elements."]}], "indent": 0, "text": ["Group"], "role": "item", "attrs": {"id": "group"}, "extent": [988, 995], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1156, 1319], "text": ["The name of the attribute to create or modify. If the attribute does not exist with the given name, it will be added to the selected ", {"text": ["Attribute Class"], "type": "ui"}, "."]}], "indent": 0, "text": ["Attribute Name"], "role": "item", "attrs": {"id": "attrib"}, "extent": [1124, 1140], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1351, 1434], "text": ["Element type for the destination attribute (specified by ", {"text": ["Attribute Name"], "type": "ui"}, ")."]}], "indent": 0, "text": ["Attribute Class"], "role": "item", "attrs": {"id": "class"}, "extent": [1319, 1336], "container": true, "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}, {"indent": 0, "text": [" Units "], "type": "sep", "extent": [1434, 1446], "level": 2}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [1484, 2013], "text": ["You may want to specify parameter values in different units from the ones\n    the attribute is stored in. As an example, a ", {"text": ["life"], "type": "code"}, " attribute stores its\n    values in seconds, while it might be more intuitive to set it in terms of\n    frames. ", {"text": ["Unit Settings"], "type": "ui"}, " allows you to specify units for the attribute and\n    parameters, and the node will internally perform the conversions. There are\n    presets for commonly-used combinations, as well as the ", {"text": ["Custom"], "type": "ui"}, " option if\n    you'd like to provide your own conversion formula."]}], "indent": 0, "text": ["Unit Settings"], "role": "item", "attrs": {"id": "unitsettings"}, "extent": [1446, 1462], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [2044, 2209], "text": ["Sets the units for attribute values. The node will internally convert\n    relevant parameter values from units of ", {"text": ["Parameters"], "type": "ui"}, " to units of\n    ", {"text": ["Attribute"], "type": "ui"}, "."]}], "indent": 0, "text": ["Attribute"], "role": "item", "attrs": {"id": "attribunit"}, "extent": [2013, 2024], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [2239, 2387], "text": ["Sets the units of parameter values. The node will internally convert\n    relevant parameter values from these units to units of ", {"text": ["Attribute"], "type": "ui"}, "."]}], "indent": 0, "text": ["Parameters"], "role": "item", "attrs": {"id": "parmunit"}, "extent": [2209, 2221], "container": true, "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}, {"indent": 0, "type": "para", "extent": [2387, 2439], "text": ["Some example uses of of ", {"text": ["Units"], "type": "ui"}, " are given below."]}, {"body": [{"body": [{"body": [{"indent": 4, "blevel": 6, "type": "ord", "extent": [2491, 2531], "text": ["Set ", {"text": ["Attribute Name"], "type": "ui"}, " to ", {"text": ["life"], "type": "code"}, "."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [2531, 2574], "text": ["Set ", {"text": ["Operation"], "type": "ui"}, " to ", {"text": ["Set Always"], "type": "ui"}, "."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [2574, 2612], "text": ["Set ", {"text": ["Constant Value"], "type": "ui"}, " to ", {"text": ["10"], "type": "code"}, "."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [2612, 2738], "text": ["Set ", {"text": ["Unit Settings"], "type": "ui"}, " to ", {"text": ["Duration"], "type": "ui"}, ", make sure ", {"text": ["Attribute"], "type": "ui"}, " is ", {"text": ["Seconds"], "type": "ui"}, " and ", {"text": ["Parameters"], "type": "ui"}, " is set to ", {"text": ["Frames"], "type": "ui"}, "."]}], "container": true, "type": "ord_group"}, {"indent": 4, "type": "para", "extent": [2738, 2833], "text": ["This will give you the value, 0.416667 and your particles will live for exactly 10 frames."]}], "indent": 0, "text": [" Set particles to live for exactly 10 frames"], "role": "item", "extent": [2439, 2491], "container": true, "type": "task"}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "ord", "extent": [2894, 2934], "text": ["Set ", {"text": ["Attribute Name"], "type": "ui"}, " to ", {"text": ["life"], "type": "code"}, "."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [2934, 2970], "text": ["Set ", {"text": ["Operation"], "type": "ui"}, " to ", {"text": ["Add"], "type": "ui"}, "."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [2970, 3008], "text": ["Set ", {"text": ["Constant Value"], "type": "ui"}, " to ", {"text": ["14"], "type": "code"}, "."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [3008, 3133], "text": ["Set ", {"text": ["Unit Settings"], "type": "ui"}, " to ", {"text": ["Duration"], "type": "ui"}, ", make sure ", {"text": ["Attribute"], "type": "ui"}, " is ", {"text": ["Seconds"], "type": "ui"}, " and ", {"text": ["Parameters"], "type": "ui"}, " is set to ", {"text": ["Frames"], "type": "ui"}, "."]}], "container": true, "type": "ord_group"}], "indent": 0, "text": [" Extend particle\u2019s ", {"text": ["life"], "type": "code"}, " attribute exactly 14 frames"], "role": "item", "extent": [2833, 2894], "container": true, "type": "task"}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "ord", "extent": [3180, 3220], "text": ["Set ", {"text": ["Attribute Name"], "type": "ui"}, " to ", {"text": ["life"], "type": "code"}, "."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [3220, 3263], "text": ["Set ", {"text": ["Operation"], "type": "ui"}, " to ", {"text": ["Set Always"], "type": "ui"}, "."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [3263, 3295], "text": ["Disable ", {"text": ["Adjust Value"], "type": "ui"}, "."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [3295, 3334], "text": ["Turn on ", {"text": ["Enable Post-Process"], "type": "ui"}, "."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [3334, 3431], "text": ["Turn on ", {"text": ["Maximum"], "type": "ui"}, " and set it to 5.\n    After this no value will be larger than 0.208333."]}], "container": true, "type": "ord_group"}], "indent": 0, "text": [" Limit the ", {"text": ["life"], "type": "code"}, " attribute to 5 frames"], "role": "item", "extent": [3133, 3180], "container": true, "type": "task"}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "ord", "extent": [3490, 3530], "text": ["Set ", {"text": ["Attribute Name"], "type": "ui"}, " to ", {"text": ["life"], "type": "code"}, "."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [3530, 3571], "text": ["Set ", {"text": ["Adjust with"], "type": "ui"}, " to ", {"text": ["Random"], "type": "ui"}, "."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [3571, 3700], "text": ["Set ", {"text": ["Operation"], "type": "ui"}, " to ", {"text": ["Minimum"], "type": "ui"}, ". This will pick the lowest value between the incoming attribute and the adjustment value."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [3700, 3755], "text": ["Set ", {"text": ["Min Value"], "type": "ui"}, " to 24 and ", {"text": ["Max Value"], "type": "ui"}, " to 72."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [3755, 3824], "text": ["Optionally, set ", {"text": ["Enable Stepping"], "type": "ui"}, " with a ", {"text": ["Step Size"], "type": "ui"}, " of 1."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [3824, 3949], "text": ["Set ", {"text": ["Unit Settings"], "type": "ui"}, " to ", {"text": ["Duration"], "type": "ui"}, ", make sure ", {"text": ["Attribute"], "type": "ui"}, " is ", {"text": ["Seconds"], "type": "ui"}, " and ", {"text": ["Parameters"], "type": "ui"}, " is set to ", {"text": ["Frames"], "type": "ui"}, "."]}], "container": true, "type": "ord_group"}], "indent": 0, "text": [" Limit the ", {"text": ["life"], "type": "code"}, " attribute between 24 to 72 frames"], "role": "item", "extent": [3431, 3490], "container": true, "type": "task"}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "ord", "extent": [4037, 4082], "text": ["Set ", {"text": ["Attribute Name"], "type": "ui"}, " to ", {"text": ["starttime"], "type": "code"}, "."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [4082, 4125], "text": ["Set ", {"text": ["Operation"], "type": "ui"}, " to ", {"text": ["Set Always"], "type": "ui"}, "."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [4125, 4163], "text": ["Set ", {"text": ["Constant Value"], "type": "ui"}, " to ", {"text": ["10"], "type": "code"}, "."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [4163, 4285], "text": ["Set ", {"text": ["Unit Settings"], "type": "ui"}, " to ", {"text": ["Time"], "type": "ui"}, ", make sure ", {"text": ["Attribute"], "type": "ui"}, " is ", {"text": ["Seconds"], "type": "ui"}, " and ", {"text": ["Parameters"], "type": "ui"}, " is set to ", {"text": ["Frames"], "type": "ui"}, "."]}], "container": true, "type": "ord_group"}, {"indent": 4, "type": "para", "extent": [4285, 4527], "text": ["This will output the value of 0.375, which is equal to frame 10. You have to use ", {"text": ["Time"], "type": "ui"}, ", as frame one is equal to time zero, which requires you to offset the frame unit for the correct conversion.\n    To offset this value by 14 frames:"]}, {"body": [{"indent": 4, "blevel": 6, "type": "ord", "extent": [4527, 4604], "text": ["Append an other ", {"text": ["Attribute Adjust Float "], "scheme": null, "type": "link", "exists": true, "value": " Node:sop/attribadjustfloat"}, "."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [4604, 4649], "text": ["Set ", {"text": ["Attribute Name"], "type": "ui"}, " to ", {"text": ["starttime"], "type": "code"}, "."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [4649, 4698], "text": ["Make sure ", {"text": ["Operation"], "type": "ui"}, " is set to ", {"text": ["Add"], "type": "ui"}, "."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [4698, 4736], "text": ["Set ", {"text": ["Constant Value"], "type": "ui"}, " to ", {"text": ["14"], "type": "code"}, "."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [4736, 5037], "text": ["Set ", {"text": ["Unit Settings"], "type": "ui"}, " to ", {"text": ["Duration"], "type": "ui"}, ", make sure ", {"text": ["Attribute"], "type": "ui"}, " is ", {"text": ["Seconds"], "type": "ui"}, " and ", {"text": ["Parameters"], "type": "ui"}, " is set to ", {"text": ["Frames"], "type": "ui"}, ".\n    This will output the value of 0.958333, which is equal to frame 24 as the correct output. Here ", {"text": ["Duration"], "type": "ui"}, " is used instead, as we need to offset the value by an interval."]}], "container": true, "type": "ord_group"}], "indent": 0, "text": [" Set ", {"text": ["starttime"], "type": "code"}, " attribute as unit of ", {"text": ["frame"], "type": "code"}, " to 10, then offset it by 14 frames."], "role": "item", "extent": [3949, 4037], "container": true, "type": "task"}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "ord", "extent": [5107, 5153], "text": ["Set ", {"text": ["Attribute Name"], "type": "ui"}, " to ", {"text": ["startframe"], "type": "code"}, "."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [5153, 5196], "text": ["Set ", {"text": ["Operation"], "type": "ui"}, " to ", {"text": ["Set Always"], "type": "ui"}, "."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [5196, 5267], "text": ["Set ", {"text": ["Constant Value"], "type": "ui"}, " to ", {"text": ["0.5"], "type": "code"}, ", which represents half a second."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [5267, 5463], "text": ["Set ", {"text": ["Unit Settings"], "type": "ui"}, " to ", {"text": ["Time"], "type": "ui"}, ", make sure ", {"text": ["Attribute"], "type": "ui"}, " is ", {"text": ["Frames"], "type": "ui"}, " and ", {"text": ["Parameters"], "type": "ui"}, " is set to ", {"text": ["Seconds"], "type": "ui"}, ".\n    This will output the value of 13, which is the frame at half a second."]}], "container": true, "type": "ord_group"}], "indent": 0, "text": [" Set ", {"text": ["startframe"], "type": "code"}, " attribute as unit of ", {"text": ["time"], "type": "code"}, " to half a second"], "role": "item", "extent": [5037, 5107], "container": true, "type": "task"}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "ord", "extent": [5545, 5591], "text": ["Set ", {"text": ["Attribute Name"], "type": "ui"}, " to ", {"text": ["startframe"], "type": "code"}, "."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [5591, 5627], "text": ["Set ", {"text": ["Operation"], "type": "ui"}, " to ", {"text": ["Add"], "type": "ui"}, "."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [5627, 5707], "text": ["Set ", {"text": ["Constant Value"], "type": "ui"}, " to ", {"text": ["1.5"], "type": "code"}, ", which represents one and a half seconds."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [5707, 5828], "text": ["Set ", {"text": ["Unit Settings"], "type": "ui"}, " to ", {"text": ["Time"], "type": "ui"}, ", make sure ", {"text": ["Attribute"], "type": "ui"}, " is ", {"text": ["Frames"], "type": "ui"}, " and ", {"text": ["Parameters"], "type": "ui"}, " is set to ", {"text": ["Seconds"], "type": "ui"}, "."]}], "container": true, "type": "ord_group"}], "indent": 0, "text": [" Offset ", {"text": ["startframe"], "type": "code"}, " attribute as unit of ", {"text": ["time"], "type": "code"}, " by one and a half seconds"], "role": "item", "extent": [5463, 5545], "container": true, "type": "task"}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "ord", "extent": [5898, 5987], "text": ["Set ", {"text": ["Attribute Name"], "type": "ui"}, " to ", {"text": ["starttime"], "type": "code"}, ", this is the attribute we are converting to."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [5987, 6030], "text": ["Set ", {"text": ["Operation"], "type": "ui"}, " to ", {"text": ["Set Always"], "type": "ui"}, "."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [6030, 6162], "text": ["Set ", {"text": ["Adjust with"], "type": "ui"}, " to ", {"text": ["Attribute"], "type": "ui"}, " and ", {"text": ["Adjustment Attribute"], "type": "ui"}, " to ", {"text": ["startframe"], "type": "code"}, ", which is the attribute we want to convert."]}, {"indent": 4, "blevel": 6, "type": "ord", "extent": [6162, 6408], "text": ["Set ", {"text": ["Unit Settings"], "type": "ui"}, " to ", {"text": ["Time"], "type": "ui"}, ", make sure ", {"text": ["Attribute"], "type": "ui"}, " is ", {"text": ["Seconds"], "type": "ui"}, " and ", {"text": ["Parameters"], "type": "ui"}, " is set to ", {"text": ["Frames"], "type": "ui"}, ".\n    This will create a new attribute with the name ", {"text": ["starttime"], "type": "code"}, ", and it\u2019s value is equal to ", {"text": ["startframe"], "type": "code"}, " in units of ", {"text": ["time"], "type": "code"}, "."]}], "container": true, "type": "ord_group"}], "indent": 0, "text": [" Convert ", {"text": ["startframe"], "type": "code"}, " attribute to a new ", {"text": ["starttime"], "type": "code"}, " attribute."], "role": "item", "extent": [5828, 5898], "container": true, "type": "task"}], "container": true, "role": "item_group", "type": "task_group"}, {"body": [], "indent": 0, "level": 2, "text": [" Adjustment Value "], "attrs": {"id": "linkadjustmentvalue"}, "extent": [6408, 6431], "container": true, "type": "sep"}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [6497, 6648], "text": ["Generates a value that will be combined with the incoming attribute value. When this option is turned off, only post-processing will be done."]}], "indent": 0, "text": ["Adjust Value"], "role": "item", "attrs": {"id": "adjustvalue"}, "extent": [6461, 6476], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [6680, 7098], "text": ["Specifies how the adjustment value is generated. ", {"text": ["Constant Value"], "type": "ui"}, " will use the same ", {"text": ["Value"], "type": "ui"}, " for every element. ", {"text": ["Random"], "type": "ui"}, " and ", {"text": ["Noise"], "type": "ui"}, " will generate varying values across each element of the geometry, in which case varying values will be inside a well defined range or selected from a list of specific values. Additionally, you can provide another attribute to use as the adjustment value for every element."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [7112, 7292], "text": ["The adjustment value will be the same for all elements in the geometry. Use this to do simple math operations for all elements. For example, to offset all element values."]}], "indent": 4, "text": ["Constant"], "extent": [7098, 7112], "container": true, "type": "dt"}, {"body": [{"indent": 8, "type": "para", "extent": [7304, 7464], "text": ["The adjustment values will be sampled fully randomly. Adjustment values can be inside a well defined range or selected from a list of specific values."]}], "indent": 4, "text": ["Random"], "extent": [7292, 7304], "container": true, "type": "dt"}, {"body": [{"indent": 8, "type": "para", "extent": [7475, 7705], "text": ["The adjustment values will be sampled based on a coherent noise field using the ", {"text": ["Attribute Noise SOP"], "fullpath": "/nodes/sop/attribnoise", "scheme": "Node", "type": "link", "value": "/nodes/sop/attribnoise"}, ". Adjustment values can be inside a well defined range or selected from a list of specific values."]}], "indent": 4, "text": ["Noise"], "extent": [7464, 7475], "container": true, "type": "dt"}, {"body": [{"indent": 8, "type": "para", "extent": [7720, 7822], "text": ["Value of the attribute specified in ", {"text": ["Attribute Name"], "type": "ui"}, " will be used as the adjustment value."]}], "indent": 4, "text": ["Attribute"], "extent": [7705, 7720], "container": true, "type": "dt"}], "container": true, "type": "dt_group"}], "indent": 0, "text": ["Adjust with"], "role": "item", "attrs": {"id": "valuetype"}, "extent": [6648, 6661], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [7852, 8052], "text": ["Specifies how to combine the generated adjustment value with the incoming attribute value. If the target attribute does not exist on the input geometry, all operations will have the same effect."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [8069, 8280], "text": ["Use this operation if you want to ensure the attribute is created, but don\u2019t want to overwrite any existing value. If the target attribute is already present, its values will be left untouched."]}], "indent": 4, "text": ["Set Initial"], "extent": [8052, 8069], "container": true, "type": "dt"}, {"body": [{"indent": 8, "type": "para", "extent": [8296, 8405], "text": ["Use this operation if you want to overwrite any existing value with the generated adjustment value."]}], "indent": 4, "text": ["Set Always"], "extent": [8280, 8296], "container": true, "type": "dt"}, {"body": [{"indent": 8, "type": "para", "extent": [8414, 8501], "text": ["The generated adjustment value will be added to the existing attribute value."]}], "indent": 4, "text": ["Add"], "extent": [8405, 8414], "container": true, "type": "dt"}, {"body": [{"indent": 8, "type": "para", "extent": [8515, 8609], "text": ["The generated adjustment value will be subtracted from the existing attribute value."]}], "indent": 4, "text": ["Subtract"], "extent": [8501, 8515], "container": true, "type": "dt"}, {"body": [{"indent": 8, "type": "para", "extent": [8623, 8715], "text": ["The existing attribute value will be multiplied by the generated adjustment value."]}], "indent": 4, "text": ["Multiply"], "extent": [8609, 8623], "container": true, "type": "dt"}, {"body": [{"indent": 8, "type": "para", "extent": [8728, 8826], "text": ["Output will be minimum of the existing attribute value and the adjustment value."]}], "indent": 4, "text": ["Minimum"], "extent": [8715, 8728], "container": true, "type": "dt"}, {"body": [{"indent": 8, "type": "para", "extent": [8839, 8930], "text": ["Output will be maximum of the existing attribute value and the adjustment value."]}], "indent": 4, "text": ["Maximum"], "extent": [8826, 8839], "container": true, "type": "dt"}], "container": true, "type": "dt_group"}], "indent": 0, "text": ["Operation"], "role": "item", "attrs": {"id": "operation"}, "extent": [7822, 7833], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [8965, 9269], "text": ["The adjustment value will be generated in the selected range. This parameter governs how this range is specified. You can also provide a list of specific values or multiple ranges by selecting ", {"text": ["Specific Values"], "type": "ui"}, ", which can be useful to create attribute values representing specific trigger frames."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [9290, 9370], "text": ["The range contains all values between ", {"text": ["Min Value"], "type": "ui"}, " and ", {"text": ["Max Value"], "type": "ui"}, "."]}, {"body": [{"body": [{"indent": 8, "text": ["0 "], "role": "td", "extent": [9450, 9474], "container": true, "type": "cell"}, {"indent": 12, "text": ["1 "], "role": "td", "extent": [9474, 9490], "container": true, "type": "cell"}, {"body": [{"indent": 16, "type": "para", "extent": [9490, 9513], "text": ["0 to 1"]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 8, "text": ["5 "], "role": "td", "extent": [9513, 9537], "container": true, "type": "cell"}, {"indent": 12, "text": ["10 "], "role": "td", "extent": [9537, 9554], "container": true, "type": "cell"}, {"body": [{"indent": 16, "type": "para", "extent": [9554, 9578], "text": ["5 to 10"]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 8, "text": ["-5 "], "role": "td", "extent": [9578, 9603], "container": true, "type": "cell"}, {"indent": 12, "text": ["7 "], "role": "td", "extent": [9603, 9619], "container": true, "type": "cell"}, {"body": [{"indent": 16, "type": "para", "extent": [9619, 9644], "text": ["-5 to 7"]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}], "type": "table", "thead": [{"body": [{"indent": 8, "text": ["Min Value "], "role": "th", "extent": [9370, 9391], "container": true, "type": "cell"}, {"indent": 12, "text": ["Max Value "], "role": "th", "extent": [9391, 9417], "container": true, "type": "cell"}, {"indent": 16, "role": "th", "type": "cell", "extent": [9417, 9450], "text": ["Custom Range "]}], "divider": false, "type": "row"}]}], "indent": 4, "text": ["Min/Max"], "extent": [9269, 9290], "container": true, "type": "dt"}, {"body": [{"indent": 8, "type": "para", "extent": [9668, 9909], "text": ["The range contains all values between ", {"text": ["Min Value"], "type": "ui"}, " and ", {"text": ["Min Value + Range Length"], "type": "ui"}, ". For instance, if ", {"text": ["Min Value"], "type": "ui"}, " is ", {"text": ["2"], "type": "code"}, " and ", {"text": ["Range Length"], "type": "ui"}, " is ", {"text": ["5"], "type": "code"}, ", the minimum and maximum limits of the range will be ", {"text": ["2"], "type": "code"}, " and ", {"text": ["7"], "type": "code"}, ", respectively."]}, {"body": [{"body": [{"indent": 8, "text": ["0 "], "role": "td", "extent": [9992, 10016], "container": true, "type": "cell"}, {"indent": 12, "text": ["1 "], "role": "td", "extent": [10016, 10032], "container": true, "type": "cell"}, {"body": [{"indent": 16, "type": "para", "extent": [10032, 10055], "text": ["0 to 1"]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 8, "text": ["5 "], "role": "td", "extent": [10055, 10079], "container": true, "type": "cell"}, {"indent": 12, "text": ["10 "], "role": "td", "extent": [10079, 10096], "container": true, "type": "cell"}, {"body": [{"indent": 16, "type": "para", "extent": [10096, 10120], "text": ["5 to 15"]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 8, "text": ["-5 "], "role": "td", "extent": [10120, 10145], "container": true, "type": "cell"}, {"indent": 12, "text": ["7 "], "role": "td", "extent": [10145, 10161], "container": true, "type": "cell"}, {"body": [{"indent": 16, "type": "para", "extent": [10161, 10186], "text": ["-5 to 2"]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}], "type": "table", "thead": [{"body": [{"indent": 8, "text": ["Min Value "], "role": "th", "extent": [9909, 9930], "container": true, "type": "cell"}, {"indent": 12, "text": ["Range Length "], "role": "th", "extent": [9930, 9959], "container": true, "type": "cell"}, {"indent": 16, "role": "th", "type": "cell", "extent": [9959, 9992], "text": ["Custom Range "]}], "divider": false, "type": "row"}]}], "indent": 4, "text": ["Min + Range Length"], "extent": [9644, 9668], "container": true, "type": "dt"}, {"body": [{"indent": 8, "type": "para", "extent": [10213, 10495], "text": ["The range contains all values between ", {"text": ["Middle Value - Range Length / 2"], "type": "ui"}, " and ", {"text": ["Middle Value + Range Length / 2"], "type": "ui"}, ". For instance, if ", {"text": ["Middle Value"], "type": "ui"}, " is ", {"text": ["8"], "type": "code"}, " and ", {"text": ["Range Length"], "type": "ui"}, " is ", {"text": ["4"], "type": "code"}, ", the minimum and maximum limits of the range will be ", {"text": ["6"], "type": "code"}, " and ", {"text": ["10"], "type": "code"}, ", respectively."]}, {"body": [{"body": [{"indent": 8, "text": ["0 "], "role": "td", "extent": [10581, 10605], "container": true, "type": "cell"}, {"indent": 12, "text": ["1 "], "role": "td", "extent": [10605, 10621], "container": true, "type": "cell"}, {"body": [{"indent": 16, "type": "para", "extent": [10621, 10649], "text": ["-0.5 to 0.5"]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 8, "text": ["5 "], "role": "td", "extent": [10649, 10673], "container": true, "type": "cell"}, {"indent": 12, "text": ["10 "], "role": "td", "extent": [10673, 10690], "container": true, "type": "cell"}, {"body": [{"indent": 16, "type": "para", "extent": [10690, 10714], "text": ["0 to 10"]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 8, "text": ["-5 "], "role": "td", "extent": [10714, 10739], "container": true, "type": "cell"}, {"indent": 12, "text": ["7 "], "role": "td", "extent": [10739, 10755], "container": true, "type": "cell"}, {"body": [{"indent": 16, "type": "para", "extent": [10755, 10784], "text": ["-8.5 to 1.5"]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}], "type": "table", "thead": [{"body": [{"indent": 8, "text": ["Middle Value "], "role": "th", "extent": [10495, 10519], "container": true, "type": "cell"}, {"indent": 12, "text": ["Range Length "], "role": "th", "extent": [10519, 10548], "container": true, "type": "cell"}, {"indent": 16, "role": "th", "type": "cell", "extent": [10548, 10581], "text": ["Custom Range "]}], "divider": false, "type": "row"}]}], "indent": 4, "text": ["Middle \u00b1 Range Length"], "extent": [10186, 10213], "container": true, "type": "dt"}, {"body": [{"indent": 8, "type": "para", "extent": [10805, 11042], "text": ["The adjustment value will be one of the discrete listed values. The probability of selecting each value is proportional to its ", {"text": ["Weight"], "type": "ui"}, ". ", {"text": ["Pattern Type"], "type": "ui"}, " controls how the adjustment value is sampled for each element."]}], "indent": 4, "text": ["Specific Values"], "extent": [10784, 10805], "container": true, "type": "dt"}], "container": true, "type": "dt_group"}], "indent": 0, "text": ["Range Values"], "role": "item", "attrs": {"id": "rangemethod"}, "extent": [8930, 8944], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [11079, 11157], "text": ["Sets the adjustment to this value for every element in the geometry."]}], "indent": 0, "text": ["Constant Value"], "role": "item", "attrs": {"id": "singlevalue"}, "extent": [11042, 11058], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [11186, 11240], "text": ["Sets the minimum limit of the custom range. "]}], "indent": 0, "text": ["Min Value"], "role": "item", "attrs": {"id": "minvalue"}, "extent": [11157, 11168], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [11269, 11323], "text": ["Sets the maximum limit of the custom range. "]}], "indent": 0, "text": ["Max Value"], "role": "item", "attrs": {"id": "maxvalue"}, "extent": [11240, 11251], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [11355, 11416], "text": ["This value lies in the center of the custom range. "]}], "indent": 0, "text": ["Middle Value"], "role": "item", "attrs": {"id": "midvalue"}, "extent": [11323, 11337], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [11450, 11611], "text": ["Sets the length of the custom range; that is, the difference between the maximum and minimum of the range will be equal to the value of this parameter."]}], "indent": 0, "text": ["Range Length"], "role": "item", "attrs": {"id": "rangevalue"}, "extent": [11416, 11430], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [11655, 11735], "text": ["Provides a way to control distribution of the generated adjustment values."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [11748, 11840], "text": ["Generated adjustment values will be uniformly distributed within the custom range."]}, {"indent": 8, "type": "para", "extent": [11840, 11934], "text": ["Elements are distributed in ", {"text": ["-1"], "type": "code"}, " to ", {"text": ["1"], "type": "code"}, " range using different pattern types:"]}, {"indent": 8, "type": "para", "extent": [11934, 11984], "text": [{"text": "", "fullpath": "/images/sop/aaf_pattern_type.png", "scheme": "Image", "type": "link", "value": "/images/sop/aaf_pattern_type.png"}]}], "indent": 4, "text": ["Uniform"], "extent": [11735, 11748], "container": true, "type": "dt"}, {"body": [{"indent": 8, "type": "para", "extent": [12012, 12198], "text": ["The generated value will be fed through the ", {"text": ["Remap Ramp"], "type": "ui"}, " to produce the final adjustment value. You can use this option to shift the values or create gaps in the given range."]}, {"indent": 8, "type": "para", "extent": [12198, 12354], "text": ["Elements are distributed in ", {"text": ["-1"], "type": "code"}, " to ", {"text": ["1"], "type": "code"}, " range using different pattern types, while shifting values towards the minimum limit of the range:"]}, {"indent": 8, "type": "para", "extent": [12354, 12401], "text": [{"text": "", "fullpath": "/images/sop/aaf_remapping.png", "scheme": "Image", "type": "link", "value": "/images/sop/aaf_remapping.png"}]}], "indent": 4, "text": ["Uniform with Remapping"], "extent": [11984, 12012], "container": true, "type": "dt"}, {"body": [{"indent": 8, "type": "para", "extent": [12428, 13017], "text": ["Allows for a percentage of elements to extend beyond the given range. Use the outlier visualizer button next to ", {"text": ["Outlier Attribute"], "type": "ui"}, " to see which elements are selected as outliers. It is possible to extend the range beyond the minimum and/or maximum limits, either by adding or multiplying the selected limits with ", {"text": ["Outlier Range"], "type": "ui"}, ". For example, when modifying a ", {"text": ["life"], "type": "code"}, " attribute, you can set ", {"text": ["Outlier Percent"], "type": "ui"}, " to ", {"text": ["15"], "type": "code"}, " and ", {"text": ["Outlier Range"], "type": "ui"}, " to ", {"text": ["2"], "type": "code"}, ", forcing 15% of the points to live up to 2 seconds longer (in ", {"text": ["Additive"], "type": "ui"}, " mode) or twice as long (in ", {"text": ["Multiplicative"], "type": "ui"}, " mode)."]}, {"indent": 8, "type": "para", "extent": [13017, 13097], "text": ["Using outliers to extend both minimum and maximum range limit:"]}, {"indent": 8, "type": "para", "extent": [13097, 13148], "text": [{"text": "", "fullpath": "/images/sop/aaf_use_outliers.png", "scheme": "Image", "type": "link", "value": "/images/sop/aaf_use_outliers.png"}, " "]}, {"body": [{"body": [{"indent": 12, "type": "para", "extent": [13162, 13391], "text": ["It is possible to achieve similar value manipulation by using ", {"text": ["Uniform with Remapping"], "type": "ui"}, ". However, ", {"text": ["Uniform with Outliers"], "type": "ui"}, " lets you to precisely control the proportion of points that fall outside the proper range."]}], "indent": 8, "role": "item", "extent": [13148, 13162], "container": true, "type": "note"}], "container": true, "role": "item_group", "type": "note_group"}], "indent": 4, "text": ["Uniform with Outliers"], "extent": [12401, 12428], "container": true, "type": "dt"}], "container": true, "type": "dt_group"}], "indent": 0, "text": ["Value Distribution"], "role": "item", "attrs": {"id": "distribinrange"}, "extent": [11611, 11631], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [13426, 13593], "text": ["The intermediate uniformly-distributed value will be fed through this ramp to obtain the adjustment value. Vertical axis of this ramp spans the custom range."]}], "indent": 0, "text": ["Remap Ramp"], "role": "item", "attrs": {"id": "remapramp    "}, "extent": [13391, 13403], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [13634, 13784], "text": ["Controls the number of outliers. Value of ", {"text": ["15"], "type": "code"}, " means that the adjustment value for 15% of all elements will fall outside the original range."]}], "indent": 0, "text": ["Outlier Percent"], "role": "item", "attrs": {"id": "outlierpercent"}, "extent": [13593, 13610], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [13826, 13939], "text": ["Integer attribute to store whether an element is outlier (indicated by ", {"text": ["1"], "type": "code"}, ") or not (signaled with ", {"text": ["0"], "type": "code"}, ")."]}], "indent": 0, "text": ["Outlier Attribute"], "role": "item", "attrs": {"id": "outlierattrib"}, "extent": [13784, 13803], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [13976, 14144], "text": ["Controls how much the outlier range extends beyond the original. You can extend the maximum range, minimum range, or both either by multiplication or addition."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [14158, 14252], "text": [{"text": ["Outlier Range"], "type": "ui"}, " will be added to the maximum and/or minimum of the original range."]}, {"indent": 8, "type": "para", "extent": [14252, 14350], "text": ["Elements are distributed in ", {"text": ["-2"], "type": "code"}, " to ", {"text": ["2"], "type": "code"}, " range with ", {"text": ["Outlier Range"], "type": "ui"}, " set to ", {"text": ["3"], "type": "code"}, ":"]}, {"indent": 8, "type": "para", "extent": [14350, 14406], "text": [{"text": "", "fullpath": "/images/sop/aaf_outlier_additive.png", "scheme": "Image", "type": "link", "value": "/images/sop/aaf_outlier_additive.png"}, " "]}], "indent": 4, "text": ["Additive"], "extent": [14144, 14158], "container": true, "type": "dt"}, {"body": [{"indent": 8, "type": "para", "extent": [14426, 14517], "text": [{"text": ["Outlier Range"], "type": "ui"}, " will multiply the maximum and/or minimum of the original range."]}, {"indent": 8, "type": "para", "extent": [14517, 14607], "text": ["Elements are distributed in ", {"text": ["-2"], "type": "code"}, " to ", {"text": ["2"], "type": "code"}, " range with ", {"text": ["Outlier Range"], "type": "ui"}, " set to ", {"text": ["3"], "type": "code"}, ":"]}, {"indent": 8, "type": "para", "extent": [14607, 14675], "text": [{"text": "", "fullpath": "/images/sop/aaf_outlier_additiveabove.png", "scheme": "Image", "type": "link", "value": "/images/sop/aaf_outlier_additiveabove.png"}, " "]}], "indent": 4, "text": ["Multiplicative"], "extent": [14406, 14426], "container": true, "type": "dt"}, {"body": [{"indent": 8, "type": "para", "extent": [14696, 14749], "text": ["Only extend the minimum limit of the range."]}, {"indent": 8, "type": "para", "extent": [14749, 14839], "text": ["Elements are distributed in ", {"text": ["-2"], "type": "code"}, " to ", {"text": ["2"], "type": "code"}, " range with ", {"text": ["Outlier Range"], "type": "ui"}, " set to ", {"text": ["3"], "type": "code"}, ":"]}, {"indent": 8, "type": "para", "extent": [14839, 14899], "text": [{"text": "", "fullpath": "/images/sop/aaf_outlier_additivebelow.png", "scheme": "Image", "type": "link", "value": "/images/sop/aaf_outlier_additivebelow.png"}, " "]}], "indent": 4, "text": ["Below Min Value"], "extent": [14675, 14696], "container": true, "type": "dt"}, {"body": [{"indent": 8, "type": "para", "extent": [14917, 14982], "text": ["Extend both the minimum and maximum limit of the range."]}, {"indent": 8, "type": "para", "extent": [14982, 15072], "text": ["Elements are distributed in ", {"text": ["-2"], "type": "code"}, " to ", {"text": ["2"], "type": "code"}, " range with ", {"text": ["Outlier Range"], "type": "ui"}, " set to ", {"text": ["3"], "type": "code"}, ":"]}, {"indent": 8, "type": "para", "extent": [15072, 15139], "text": [{"text": "", "fullpath": "/images/sop/aaf_outlier_additiveboth.png", "scheme": "Image", "type": "link", "value": "/images/sop/aaf_outlier_additiveboth.png"}, " "]}], "indent": 4, "text": ["Both"], "extent": [14899, 14917], "container": true, "type": "dt"}], "container": true, "type": "dt_group"}], "indent": 0, "text": ["Outlier Range"], "role": "item", "attrs": {"id": "outlierrange"}, "extent": [13939, 13954], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [15166, 15290], "text": ["Controls random selection of outliers. Change the value of the ", {"text": ["Seed"], "type": "ui"}, " if the outlier selection is undesirable. "]}], "indent": 0, "text": ["Seed"], "role": "item", "attrs": {"id": "outlierseed"}, "extent": [15139, 15145], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [15331, 15600], "text": ["If this checkbox is turned on, possible adjustment values will be quantized to the ", {"text": ["Step Size"], "type": "ui"}, ". For example, if the minimum and maximum of the range are ", {"text": ["0.1"], "type": "code"}, " and ", {"text": ["3"], "type": "code"}, ", and the ", {"text": ["Step Size"], "type": "ui"}, " is set to ", {"text": ["1"], "type": "code"}, ", then the possible adjustment values are ", {"text": ["0.1, 1.1, 2.1"], "type": "code"}, "."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [15609, 15761], "text": ["To create a float type attribute ", {"text": ["startframe"], "type": "code"}, " with values rounded to integer values, turn on this checkbox and set the ", {"text": ["Step Size"], "type": "ui"}, " to 1."]}], "indent": 4, "role": "item", "extent": [15600, 15609], "container": true, "type": "tip"}], "container": true, "role": "item_group", "type": "tip_group"}], "indent": 0, "text": ["Enable Stepping"], "role": "item", "attrs": {"id": "enablestepping"}, "extent": [15290, 15307], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [15790, 15861], "text": ["Controls the spacing between the generated adjustment values."]}, {"indent": 4, "type": "para", "extent": [15861, 15903], "text": [{"text": "", "fullpath": "/images/sop/aaf_stepping.png", "scheme": "Image", "type": "link", "value": "/images/sop/aaf_stepping.png"}]}], "indent": 0, "text": ["Step Size"], "role": "item", "attrs": {"id": "stepsize"}, "extent": [15761, 15772], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [15938, 16145], "text": ["Controls the number of sets of possible adjustment values. Each set can be a single value or a list of numbers. Probability of selecting each adjustment from each set is proportional to its ", {"text": ["Weight"], "type": "ui"}, "."]}], "indent": 0, "text": ["Number of Values"], "role": "item", "attrs": {"id": "nvalues"}, "extent": [15903, 15921], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [16168, 16209], "text": ["Sets an exact adjustment value."]}], "indent": 0, "text": ["Value"], "role": "item", "attrs": {"id": "value#"}, "extent": [16145, 16152], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [16241, 16383], "text": ["In ", {"text": ["Constant"], "type": "ui"}, " mode, the set will only contain the ", {"text": ["Value"], "type": "ui"}, ". In ", {"text": ["List of Values"], "type": "ui"}, " mode, ", {"text": ["Value List"], "type": "ui"}, " defines the set of values."]}], "indent": 0, "text": ["Value Type"], "role": "item", "attrs": {"id": "valuetype#"}, "extent": [16209, 16221], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [16408, 16617], "text": ["Samples the given adjustment value with the specified weight. Values with lower ", {"text": ["Weight"], "type": "ui"}, " will be selected less frequently. When all weights are the same, each adjustment value has the same probability."]}], "indent": 0, "text": ["Weight"], "role": "item", "attrs": {"id": "weight#"}, "extent": [16383, 16391], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [16646, 16975], "text": ["Sets adjustment values by a list of independent range sequences or numbers. The listings can be separated by whitespace, commas and semi-colons. Use the syntax ", {"text": ["min-max:stepsize"], "type": "code"}, ", which expands to values between ", {"text": ["min"], "type": "code"}, " and ", {"text": ["max"], "type": "code"}, ", separated by ", {"text": ["stepsize"], "type": "code"}, ". When ", {"text": ["stepsize"], "type": "code"}, " is not provided, the default value of  ", {"text": ["1"], "type": "code"}, " is used.  "]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [16985, 17053], "text": ["Each expanded values will be assigned the same ", {"text": ["Weight"], "type": "ui"}, "."]}], "indent": 4, "role": "item", "extent": [16975, 16985], "container": true, "type": "note"}], "container": true, "role": "item_group", "type": "note_group"}, {"body": [{"body": [{"indent": 4, "text": ["5 "], "role": "td", "extent": [17099, 17120], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [17120, 17134], "text": ["5.0 "]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": ["3;5 7 "], "role": "td", "extent": [17134, 17158], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [17158, 17181], "text": ["3.0, 5.0, 7.0"]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": ["1-3 "], "role": "td", "extent": [17181, 17199], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [17199, 17226], "text": ["1.0, 2.0, 3.0"]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": ["0-1:0.25 "], "role": "td", "extent": [17226, 17241], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [17241, 17276], "text": ["0.0, 0.25, 0.5, 0.75, 1.0"]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 4, "text": ["0-1:0.25 5; 8-12:2 "], "role": "td", "extent": [17276, 17301], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [17301, 17358], "text": ["0.0, 0.25, 0.5, 0.75, 1.0, 5.0, 8.0, 10.0, 12.0"]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}], "type": "table", "thead": [{"body": [{"indent": 4, "text": ["Value List "], "role": "th", "extent": [17053, 17071], "container": true, "type": "cell"}, {"indent": 8, "role": "th", "type": "cell", "extent": [17071, 17099], "text": ["Expanded Values "]}], "divider": false, "type": "row"}]}], "indent": 0, "text": ["Value List"], "role": "item", "attrs": {"id": "values#"}, "extent": [16617, 16629], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [17406, 17641], "text": ["Specifies the attribute storing the adjustment value to use. The attribute value can be pre-scaled (", {"text": ["Scale Value"], "type": "ui"}, "), pre-offset (", {"text": ["Offset Value"], "type": "ui"}, ") or both (", {"text": ["Apply Both"], "type": "ui"}, ") before it is combined with the incoming attribute value."]}], "indent": 0, "text": ["Adjustment Attribute"], "role": "item", "attrs": {"id": "adjustmentattrib"}, "extent": [17358, 17380], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [17682, 17773], "text": ["Offsets the adjustment value before it is combined with the incoming attribute value."]}], "indent": 0, "text": ["Offset"], "role": "item", "attrs": {"id": "adjustmentattriboffset"}, "extent": [17641, 17650], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [17812, 17902], "text": ["Scales the adjustment value before it is combined with the incoming attribute value."]}], "indent": 0, "text": ["Scale"], "role": "item", "attrs": {"id": "adjustmentattribscale"}, "extent": [17773, 17781], "container": true, "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [17982, 18443], "text": ["Specifies how the pseudo-random number generator is seeded for each element to produce the adjustment value. ", {"text": ["Element Number"], "type": "ui"}, " will use the point, primitive, or vertex number depending on ", {"text": ["Attribute Class"], "type": "ui"}, ". Topology changes on the input geometry can shift element numbers, causing different adjustment values to be used. ", {"text": ["Custom Attribute"], "type": "ui"}, " lets you provide an integer attribute to make sure the random value is not dependent on element order."]}, {"body": [{"body": [{"indent": 12, "type": "para", "extent": [18456, 18693], "text": ["In case of a particle simulation, use ", {"text": ["id"], "type": "code"}, " attribute to apply the same random value to the particles throughout their lifetime. You can also use ", {"text": ["Custom Attribute"], "type": "ui"}, " to apply the same random value to multiple elements."]}], "indent": 8, "role": "item", "extent": [18443, 18456], "container": true, "type": "tip"}], "container": true, "role": "item_group", "type": "tip_group"}], "indent": 4, "text": ["Randomization By"], "role": "item", "attrs": {"id": "randmethod"}, "extent": [17936, 17958], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [18739, 18815], "text": ["The attribute to use for seeding random number generation."]}], "indent": 4, "text": ["Custom Attribute"], "role": "item", "attrs": {"id": "randattrib"}, "extent": [18693, 18715], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [18858, 18995], "text": ["All generated values depend randomly on this value. Choose a different value if the current seed produces undesirable samples. "]}], "indent": 4, "text": ["Seed"], "role": "item", "attrs": {"id": "randomseed    "}, "extent": [18815, 18825], "container": true, "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 2, "text": [" Random "], "attrs": {"id": "linkrandom"}, "extent": [17902, 17915], "container": true, "type": "sep"}, {"body": [{"body": [{"body": [{"type": "para", "indent": 4, "extent": [3119, 3223], "text": ["The type of noise to generate. Different algorithms give noise with different characteristics."]}, {"body": [{"body": [{"body": [{"body": [{"type": "para", "indent": 12, "extent": [3264, 3353], "text": ["The default. A faster and more interesting variant of Perlin noise."]}, {"type": "para", "indent": 12, "extent": [3353, 3415], "text": [{"text": "", "fullpath": "/images/nodes/vop/unoise_simplex.png", "scheme": "Image", "type": "link", "value": "/images/nodes/vop/unoise_simplex.png"}]}], "container": true, "text": ["Fast"], "extent": [3250, 3264], "indent": 8, "type": "dt"}, {"body": [{"type": "para", "indent": 12, "extent": [3443, 3557], "text": ["Sparse Convolution noise is similar to Worley noise. Does not have artifacts at grid points."]}, {"type": "para", "indent": 12, "extent": [3557, 3618], "text": [{"text": "", "fullpath": "/images/nodes/vop/unoise_sparse.png", "scheme": "Image", "type": "link", "value": "/images/nodes/vop/unoise_sparse.png"}]}], "container": true, "text": ["Sparse Convolution"], "extent": [3415, 3443], "indent": 8, "type": "dt"}, {"body": [{"type": "para", "indent": 12, "extent": [3637, 3736], "text": ["Produces a bumpy output. Named for its alleged resemblance to alligator skin."]}, {"type": "para", "indent": 12, "extent": [3736, 3800], "text": [{"text": "", "fullpath": "/images/nodes/vop/unoise_alligator.png", "scheme": "Image", "type": "link", "value": "/images/nodes/vop/unoise_alligator.png"}]}], "container": true, "text": ["Alligator"], "extent": [3618, 3637], "indent": 8, "type": "dt"}], "type": "dt_group", "container": true}], "container": true, "text": ["Value noise types"], "role": "item", "extent": [3223, 3250], "indent": 4, "type": "box"}, {"body": [{"body": [{"body": [{"type": "para", "indent": 12, "extent": [3844, 3953], "text": ["A noise where the visual details are the same size. ", {"text": ["Wikipedia article"], "scheme": "Wp", "type": "link", "value": "http://en.wikipedia.org/wiki/Perlin_noise", "exists": true}]}, {"type": "para", "indent": 12, "extent": [3953, 4079], "text": [{"text": "", "fullpath": "/images/nodes/vop/unoise_perlin.png", "scheme": "Image", "type": "link", "value": "/images/nodes/vop/unoise_perlin.png"}, "\n            ", {"text": "", "fullpath": "/images/nodes/vop/unoise_periodic_perlin.png", "scheme": "Image", "type": "link", "value": "/images/nodes/vop/unoise_periodic_perlin.png"}]}], "container": true, "text": ["Perlin"], "extent": [3828, 3844], "indent": 8, "type": "dt"}, {"body": [{"type": "para", "indent": 12, "extent": [4093, 4317], "text": ["A noise that\u2019s stable over time, like a rotated Perlin noise, useful to create noise that seems to swirl and flow smoothly across time. Use the ", {"text": ["Flow rotation"], "type": "ui"}, " parameter below to control the rotation."]}, {"type": "para", "indent": 12, "extent": [4317, 4437], "text": [{"text": "", "fullpath": "/images/nodes/vop/unoise_flow.gif", "scheme": "Anim", "type": "link", "value": "/images/nodes/vop/unoise_flow.gif"}, "\n            ", {"text": "", "fullpath": "/images/nodes/vop/unoise_periodic_flow.gif", "scheme": "Anim", "type": "link", "value": "/images/nodes/vop/unoise_periodic_flow.gif"}]}], "container": true, "text": ["Flow"], "extent": [4079, 4093], "indent": 8, "type": "dt"}], "type": "dt_group", "container": true}], "container": true, "text": ["Perlin noise types"], "role": "item", "extent": [3800, 3828], "indent": 4, "type": "box"}, {"body": [{"body": [{"body": [{"type": "para", "indent": 12, "extent": [4486, 4651], "text": ["Produces cellular features similar to plant cells, ocean waves, honeycombs, cratered landscapes, and so on. ", {"text": ["Wikipedia article"], "scheme": "Wp", "type": "link", "value": "http://en.wikipedia.org/wiki/Worley_noise", "exists": true}]}, {"type": "para", "indent": 12, "extent": [4651, 4719], "text": [{"text": "", "fullpath": "/images/nodes/vop/unoise_worley_f1.png", "scheme": "Image", "type": "link", "value": "/images/nodes/vop/unoise_worley_f1.png"}]}], "container": true, "text": ["F1"], "extent": [4474, 4486], "indent": 8, "type": "dt"}, {"body": [{"type": "para", "indent": 12, "extent": [4734, 4826], "text": ["A variant of Worley noise that produces blunted and cornered features."]}, {"type": "para", "indent": 12, "extent": [4826, 4894], "text": [{"text": "", "fullpath": "/images/nodes/vop/unoise_worley_f2.png", "scheme": "Image", "type": "link", "value": "/images/nodes/vop/unoise_worley_f2.png"}]}], "container": true, "text": ["F2-F1"], "extent": [4719, 4734], "indent": 8, "type": "dt"}, {"body": [{"type": "para", "indent": 12, "extent": [4916, 5052], "text": ["A variant of Worley F1 noise that uses Manhattan distance calculation. Useful when you want unusual-looking noise."]}], "container": true, "text": ["Manhattan F1"], "extent": [4894, 4916], "indent": 8, "type": "dt"}, {"body": [{"type": "para", "indent": 12, "extent": [5077, 5216], "text": ["A variant of Worley F2-F1 noise that uses Manhattan distance calculation. Useful when you want unusual-looking noise."]}], "container": true, "text": ["Manhattan F2-F1"], "extent": [5052, 5077], "indent": 8, "type": "dt"}, {"body": [{"type": "para", "indent": 12, "extent": [5238, 5374], "text": ["A variant of Worley F1 noise that uses Chebyshev distance calculation. Useful when you want unusual-looking noise."]}], "container": true, "text": ["Chebyshev F1"], "extent": [5216, 5238], "indent": 8, "type": "dt"}, {"body": [{"type": "para", "indent": 12, "extent": [5399, 5530], "text": ["A variant of Worley F2-F1 noise that uses Chebyshev distance calculation. Useful when you want unusual-looking noise."]}], "container": true, "text": ["Chebyshev F2-F1"], "extent": [5374, 5399], "indent": 8, "type": "dt"}], "type": "dt_group", "container": true}], "container": true, "text": ["Worley/Cellular noise types"], "role": "item", "extent": [4437, 4474], "indent": 4, "type": "box"}], "role": "item_group", "container": true, "type": "box_group"}], "indent": 0, "text": ["Noise type"], "role": "item", "attrs": {"id": "basis"}, "extent": [3092, 3104], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [6078, 6491], "text": ["The node generates values for each element by sampling a noise field at the location specified by this vector attribute on the incoming geometry. If this is ", {"text": ["P"], "type": "code"}, " (point position, the default), the points of the geometry will appear to swim through the noise. If you want the noise to \"stick\" to the points, you can copy the initial point positions into a ", {"text": ["rest"], "type": "code"}, " attribute and use that attribute here instead."]}], "indent": 0, "text": ["Location Attribute"], "role": "item", "attrs": {"id": "locationattrib"}, "extent": [6033, 6053], "container": true, "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [6527, 6572], "text": ["Uniform scale of elements in the noise."]}, {"type": "para", "indent": 4, "extent": [6572, 6686], "text": ["Click the ", {"text": "", "fullpath": "/nodes/sop/BUTTONS/decompose_transforms", "scheme": "Smallicon", "type": "link", "value": "BUTTONS/decompose_transforms"}, " Per Component button for separate scales along each axis."]}, {"type": "para", "indent": 4, "extent": [6686, 6739], "text": [{"text": "", "fullpath": "/images/nodes/vop/unoise_frequency.gif", "scheme": "Image", "type": "link", "value": "/images/nodes/vop/unoise_frequency.gif"}]}], "indent": 0, "text": ["Element Size"], "role": "item", "attrs": {"id": "elementsize"}, "extent": [6491, 6505], "container": true, "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [6781, 6940], "text": ["When you turn on the ", {"text": "", "fullpath": "/nodes/sop/BUTTONS/decompose_transforms", "scheme": "Smallicon", "type": "link", "value": "BUTTONS/decompose_transforms"}, " Per Component button, this lets you scale the ", {"text": ["Element Size"], "type": "ui"}, " separately across each axis."]}], "indent": 0, "text": ["Element Scale"], "role": "item", "attrs": {"id": "elementscale"}, "extent": [6739, 6754], "container": true, "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [6965, 7168], "text": ["Offset within the evaluated noise field (added to each axis). If you have the general noise effect you want, but want to get a different set of values for a different look, try changing the offset."]}, {"type": "para", "indent": 4, "extent": [7168, 7396], "text": ["You can animate the noise using an expression such as ", {"text": ["$T * 0.25"], "type": "code"}, " here. This is faster to compute than ", {"text": ["Animate Noise"], "type": "ui"}, ", but gives the visual effect of \"panning\" across the noise field, which may or may not be acceptable."]}, {"type": "para", "indent": 4, "extent": [7396, 7526], "text": ["Click the ", {"text": "", "fullpath": "/nodes/sop/BUTTONS/decompose_transforms", "scheme": "Smallicon", "type": "link", "value": "BUTTONS/decompose_transforms"}, " Per Component button for separate additional offsets along each axis."]}, {"type": "para", "indent": 4, "extent": [7526, 7577], "text": [{"text": "", "fullpath": "/images/nodes/vop/unoise_offset.gif", "scheme": "Anim", "type": "link", "value": "/images/nodes/vop/unoise_offset.gif"}]}], "indent": 0, "text": ["Offset"], "role": "item", "attrs": {"id": "offset"}, "extent": [6940, 6948], "container": true, "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [7607, 7753], "text": ["When you turn on the ", {"text": "", "fullpath": "/nodes/sop/BUTTONS/decompose_transforms", "scheme": "Smallicon", "type": "link", "value": "BUTTONS/decompose_transforms"}, " Per Component button, this lets you add the a separate offset along each axis."]}], "indent": 0, "text": ["Offset"], "role": "item", "attrs": {"id": "offsetv"}, "extent": [7577, 7585], "container": true, "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [7799, 7906], "text": ["Turn this checkbox on to use a VEXpression to override parameters based on abitrary attribute values."]}], "indent": 0, "text": ["Use VEXpression"], "role": "item", "attrs": {"id": "usenoiseexpression"}, "extent": [7753, 7770], "container": true, "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}, {"body": [{"body": [{"body": [{"type": "para", "indent": 8, "extent": [8736, 8831], "text": ["Vary the generated noise with time. Some noise types do not support this feature."]}, {"type": "para", "indent": 8, "extent": [8831, 9047], "text": ["Applying animation this way on geometries with millions of element count is slower to compute than using expressions such as ", {"text": ["$T * 0.25"], "type": "code"}, " in the ", {"text": ["Offset"], "type": "ui"}, " parameter to \"pan\" across the noise field. "]}], "indent": 4, "text": ["Animate Noise"], "role": "item", "attrs": {"id": "animated"}, "extent": [8694, 8713], "container": true, "type": "parameters_item"}, {"body": [{"type": "para", "indent": 8, "extent": [9095, 9191], "text": ["When ", {"text": ["Animated Noise"], "type": "ui"}, " is on, this controls the rate of change of the noise pattern."]}], "indent": 4, "text": ["Pulse Duration"], "role": "item", "attrs": {"id": "pulseduration"}, "extent": [9047, 9067], "container": true, "type": "parameters_item"}], "role": "item_group", "container": true, "type": "parameters_item_group"}], "indent": 0, "level": 3, "text": [" Animation "], "attrs": {"id": "linkanimation"}, "extent": [8647, 8665], "container": true, "type": "sep"}, {"body": [{"type": "para", "indent": 4, "extent": [9237, 9350], "text": ["The fractal controls let you add additional fractal noise on top of the output of the basic noise type."]}, {"body": [{"body": [{"body": [{"body": [{"type": "para", "indent": 8, "extent": [6734, 6812], "text": ["Does not add any additional noise on top of the basic noise."]}, {"type": "para", "indent": 8, "extent": [6812, 6875], "text": [{"text": "", "fullpath": "/images/nodes/vop/unoise_fractal_none.png", "scheme": "Image", "type": "link", "value": "/images/nodes/vop/unoise_fractal_none.png"}]}], "container": true, "text": ["None"], "extent": [6724, 6734], "indent": 4, "type": "dt"}, {"body": [{"type": "para", "indent": 8, "extent": [6889, 6959], "text": ["Adds pseudo-random noise on top of the basic output."]}, {"type": "para", "indent": 8, "extent": [6959, 7026], "text": [{"text": "", "fullpath": "/images/nodes/vop/unoise_fractal_standard.png", "scheme": "Image", "type": "link", "value": "/images/nodes/vop/unoise_fractal_standard.png"}]}], "container": true, "text": ["Standard"], "extent": [6875, 6889], "indent": 4, "type": "dt"}, {"body": [{"type": "para", "indent": 8, "extent": [7039, 7177], "text": ["Adds noise like \"Standard\" but dampens the noise in the valleys, which can be useful for generating mountainous terrain."]}, {"type": "para", "indent": 8, "extent": [7177, 7243], "text": [{"text": "", "fullpath": "/images/nodes/vop/unoise_fractal_terrain.png", "scheme": "Image", "type": "link", "value": "/images/nodes/vop/unoise_fractal_terrain.png"}]}], "container": true, "text": ["Terrain"], "extent": [7026, 7039], "indent": 4, "type": "dt"}, {"body": [{"type": "para", "indent": 8, "extent": [7255, 7318], "text": ["Like terrain, but with more sharpness in the valleys."]}], "container": true, "text": ["Hybrid"], "extent": [7243, 7255], "indent": 4, "type": "dt"}], "type": "dt_group", "container": true}], "indent": 0, "text": ["Fractal Type"], "role": "item", "attrs": {"id": "fractal"}, "extent": [6688, 6702], "container": true, "type": "parameters_item"}], "role": "item_group", "container": true, "type": "parameters_item_group"}, {"type": "para", "indent": 4, "extent": [9401, 9508], "text": ["The following parameters are available when Fractal type is anything except ", {"text": ["None"], "type": "ui"}, ".        "]}, {"body": [{"body": [{"type": "para", "indent": 4, "extent": [7426, 7802], "text": ["The number of iterations of distortion to add to the output of the basic noise. The more iterations you add, the more \"detailed\" the output. Note that the output may have fewer octaves than this parameter (that is, increasing the parameter will eventually stop adding detail), because the node eventually stops when there\u2019s no more room to add more detail in the output."]}], "indent": 0, "text": ["Max octaves"], "role": "item", "attrs": {"id": "oct"}, "extent": [7395, 7408], "container": true, "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [7832, 7968], "text": ["The frequency increment between iterations of fractal noise added to the basic output. Note that you can use a negative value."]}, {"type": "para", "indent": 4, "extent": [7968, 8020], "text": [{"text": "", "fullpath": "/images/nodes/vop/unoise_lacunarity.gif", "scheme": "Anim", "type": "link", "value": "/images/nodes/vop/unoise_lacunarity.gif"}]}], "indent": 0, "text": ["Lacunarity"], "role": "item", "attrs": {"id": "lac"}, "extent": [7802, 7814], "container": true, "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [8051, 8254], "text": ["The scale increment between iterations of fractal noise added to the basic output. The higher the value the larger the \"jaggies\" added to the output. You can use a negative value for roughness."]}, {"type": "para", "indent": 4, "extent": [8254, 8306], "text": [{"text": "", "fullpath": "/images/nodes/vop/unoise_roughness.gif", "scheme": "Anim", "type": "link", "value": "/images/nodes/vop/unoise_roughness.gif"}]}], "indent": 0, "text": ["Roughness"], "role": "item", "attrs": {"id": "rough"}, "extent": [8020, 8031], "container": true, "type": "parameters_item"}], "role": "item_group", "container": true, "type": "parameters_item_group"}], "indent": 0, "level": 3, "text": [" Fractal "], "attrs": {"id": "linkfractal"}, "extent": [9191, 9207], "container": true, "type": "sep"}, {"body": [{"type": "para", "indent": 4, "extent": [9686, 9824], "text": [{"text": ["Lattice Warp"], "type": "ui"}, " and ", {"text": ["Gradient Warp"], "type": "ui"}, " are two methods for adding \"fractal-ness\" to the basic noises by warping the noise space."]}, {"body": [{"body": [{"type": "para", "indent": 8, "extent": [9865, 9930], "text": ["Adds \"stringiness\" or \"wiriness\" to standard noise."]}, {"type": "para", "indent": 8, "extent": [9930, 9992], "text": [{"text": "", "fullpath": "/images/nodes/vop/unoise_lattice_warp.gif", "scheme": "Anim", "type": "link", "value": "/images/nodes/vop/unoise_lattice_warp.gif"}]}], "indent": 4, "text": ["Lattice Warp"], "role": "item", "attrs": {"id": "disp"}, "extent": [9824, 9842], "container": true, "type": "parameters_item"}, {"body": [{"type": "para", "indent": 8, "extent": [10043, 10143], "text": ["Controls base feature size of the generated noise. The value applies to each axis."]}], "indent": 4, "text": ["Lattice Warp Size"], "role": "item", "attrs": {"id": "dispesize"}, "extent": [9992, 10015], "container": true, "type": "parameters_item"}, {"body": [{"type": "para", "indent": 8, "extent": [10186, 10248], "text": ["Widens the peaks or valleys of the noise output."]}, {"type": "para", "indent": 8, "extent": [10248, 10311], "text": [{"text": "", "fullpath": "/images/nodes/vop/unoise_gradient_warp.gif", "scheme": "Anim", "type": "link", "value": "/images/nodes/vop/unoise_gradient_warp.gif"}]}], "indent": 4, "text": ["Gradient Warp"], "role": "item", "attrs": {"id": "gflow"}, "extent": [10143, 10162], "container": true, "type": "parameters_item"}, {"body": [{"type": "para", "indent": 8, "extent": [10365, 10561], "text": ["Accumulates the warp for each iteration (octave) of added fractal noise. This can add interesting smudgy effects when used in images, and interesting landmarks when used for terrain."]}], "indent": 4, "text": ["Accumulate Lattice Warp"], "role": "item", "attrs": {"id": "accuml"}, "extent": [10311, 10340], "container": true, "type": "parameters_item"}, {"body": [{"type": "para", "indent": 8, "extent": [10616, 10702], "text": ["Accumulates the warp for each iteration (octave) of added fractal noise."]}], "indent": 4, "text": ["Accumulate Gradient Warp"], "role": "item", "attrs": {"id": "accumg"}, "extent": [10561, 10591], "container": true, "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [9331, 9628], "text": ["When ", {"text": ["Noise type"], "type": "ui"}, " is \"Flow\", this controls the rotation of the \"swirl\", from ", {"text": ["0"], "type": "code"}, " to ", {"text": ["1"], "type": "code"}, ". Because this parameter is fractional, you can\u2019t just use ", {"text": ["$F"], "type": "code"}, " to animate it, since all integral values will look the same, representing a complete revolution. Instead, try something like ", {"text": ["$FF / 100"], "type": "code"}, "."]}], "indent": 0, "text": ["Flow Rotation"], "role": "item", "attrs": {"id": "flowrot"}, "extent": [9294, 9309], "container": true, "type": "parameters_item"}], "role": "item_group", "container": true, "type": "parameters_item_group"}], "indent": 0, "level": 3, "text": [" Warping "], "attrs": {"id": "linkwarping"}, "extent": [9648, 9664], "container": true, "type": "sep"}], "indent": 0, "level": 2, "text": [" Noise Pattern "], "attrs": {"id": "linknoise"}, "extent": [18995, 19015], "container": true, "type": "sep"}, {"indent": 0, "text": [" Post-Process "], "type": "sep", "extent": [19443, 19462], "level": 2}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [19512, 19709], "text": ["Displays a set of controls to further fine tune the output attribute value. All post-process modifications will take place after adjustment is applied to the attribute, unless set otherwise."]}], "indent": 0, "text": ["Enable Post-Process"], "role": "item", "attrs": {"id": "enable_postprocess"}, "extent": [19462, 19484], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [19737, 20194], "text": ["Blends between the incoming attribute and the output attribute value. A blend of ", {"text": ["0"], "type": "code"}, " means that no adjustment takes place: the incoming attribute value is the output value. Likewise, a value of ", {"text": ["1"], "type": "code"}, " will output the adjusted value, ignoring the initial value. Blending can be done either by uniform value (", {"text": ["Blend by Constant"], "type": "ui"}, ") or by value of the ", {"text": ["Blend Attribute"], "type": "ui"}, " (when the menu on the right of this parameter is set to ", {"text": ["Blend by Attribute"], "type": "ui"}, ")."]}], "indent": 0, "text": ["Blend"], "role": "item", "attrs": {"id": "blendweight"}, "extent": [19709, 19716], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [20232, 20598], "text": ["A float attribute between the range ", {"text": ["0"], "type": "code"}, " to ", {"text": ["1"], "type": "code"}, " to use as blend value. This attribute must be present on the appropriate elements (as set by ", {"text": ["Attribute Class"], "type": "ui"}, "). A blend value of ", {"text": ["0"], "type": "code"}, " means that no adjustment takes place: the incoming attribute value is the output value. Likewise, a value of ", {"text": ["1"], "type": "code"}, " will output the adjusted value, ignoring the initial value."]}], "indent": 0, "text": ["Blend Attribute"], "role": "item", "attrs": {"id": "blendattrib"}, "extent": [20194, 20211], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [20630, 20736], "text": ["If this checkbox is turned on, output attribute values are clamped to the specified ", {"text": ["Minimum"], "type": "ui"}, "."]}], "indent": 0, "text": ["Minimum"], "role": "item", "attrs": {"id": "clampminvalue"}, "extent": [20598, 20607], "container": true, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [20768, 20870], "text": ["If this checkbox is turned on, output attribute values are clamped to the specified ", {"text": ["Maximum"], "type": "ui"}, "."]}], "indent": 0, "text": ["Maximum"], "role": "item", "attrs": {"id": "clampmaxvalue"}, "extent": [20736, 20745], "container": true, "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [20969, 21241], "text": ["If this checkbox is turned on, it overwrites the default value property for the target attribute. Merging the output of this node with another geometry that is missing the attribute guarantees that new values will be initialized to this ", {"text": ["Default Value"], "type": "ui"}, "."]}], "indent": 4, "text": ["Default Value"], "role": "item", "attrs": {"id": "default"}, "extent": [20929, 20948], "container": true, "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 2, "text": [" Attribute Properties "], "attrs": {"id": "linkattribproperties"}, "extent": [20870, 20897], "container": true, "type": "sep"}], "indent": 0, "level": 1, "text": "Parameters", "role": "section", "extent": [939, 951], "container": true, "type": "parameters_section", "id": "parameters"}, {"body": [{"body": [{"indent": 0, "blevel": 2, "type": "bullet", "extent": [21250, 21309], "text": [{"text": ["Attribute Adjust Integer"], "fullpath": "/nodes/sop/attribadjustinteger", "scheme": "Node", "type": "link", "value": "/nodes/sop/attribadjustinteger"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [21309, 21365], "text": [{"text": ["Attribute Adjust Vector"], "fullpath": "/nodes/sop/attribadjustvector", "scheme": "Node", "type": "link", "value": "/nodes/sop/attribadjustvector"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [21365, 21406], "text": [{"text": ["Attribute Noise"], "fullpath": "/nodes/sop/attribnoise", "scheme": "Node", "type": "link", "value": "/nodes/sop/attribnoise"}]}], "container": true, "type": "bullet_group"}], "indent": 0, "level": 1, "text": "Related", "role": "section", "extent": [21241, 21250], "container": true, "type": "related_section", "id": "related"}], "title": ["Attribute Adjust Float"], "summary": ["Modifies floating point attribute values on the incoming geometry."], "attrs": {"since": "18.5", "namespace": null, "version": null, "context": "sop", "type": "node", "internal": "attribadjustfloat", "icon": "SOP/attribadjustfloat"}, "included": ["/nodes/sop/attribnoise", "/nodes/vop/unifiednoise"], "type": "root"}