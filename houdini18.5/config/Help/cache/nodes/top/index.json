{"body": [{"indent": 0, "text": ["TOP nodes"], "type": "title", "extent": [0, 14], "level": 0}, {"indent": 0, "type": "summary", "extent": [49, 276], "text": ["TOP nodes define a workflow where data is fed into the network, turned into \"work items\" and manipulated by different nodes. Many nodes represent external processes that can be run on the local machine or a server farm."]}, {"indent": 0, "type": "para", "extent": [276, 333], "text": ["See ", {"text": ["how to use TOP nodes"], "fullpath": "/tops/index", "scheme": null, "type": "link", "value": "/tops/"}, " for more information."]}, {"body": [{"indent": 0, "type": "para", "extent": [25165, 25524], "text": ["TOP networks contain task nodes that represent a series of tasks or ", {"text": ["work items"], "type": "em"}, " to be performed. There are four main types of TOP node: ", {"text": ["processors"], "type": "em"}, " that generate work items, ", {"text": ["schedulers"], "type": "em"}, " that run the work item\u2019s jobs, ", {"text": ["partitioners"], "type": "em"}, " that join together incoming work items, and ", {"text": ["mappers"], "type": "em"}, " that establish dependencies between otherwise unrelated work items."]}, {"indent": 0, "type": "para", "extent": [25524, 25911], "text": ["With a TOP node network, you can create a scalable recipe for generating work items, running them locally or on a farm, establishing the network of dependencies between all the work items, and figuring out how to do it all as efficiently as possible. This recipe is called a ", {"text": ["PDG"], "type": "em"}, " (Procedural Dependency Graph). For more information about TOPs and PDG, see ", {"text": ["Intro to TOPs"], "fullpath": "/tops/intro", "scheme": null, "type": "link", "value": "/tops/intro"}, "."]}, {"indent": 0, "type": "para", "extent": [25911, 26249], "text": ["Houdini creates a default task network (", {"text": ["/topnet1"], "type": "code"}, ") at ", {"text": ["/tasks"], "type": "code"}, ", and a default scheduler (", {"text": ["localscheduler"], "type": "code"}, ") at ", {"text": ["/tasks/topnet1"], "type": "code"}, ". Much like ROPs, you can create a standalone TOP network at any level of the scene. For example, you can create a TOP network in the ", {"text": ["/stage"], "type": "code"}, " context to generate variations of LOP prims for a Solaris project."]}, {"indent": 0, "type": "para", "extent": [26249, 26329], "text": ["The TOP level requires that you connect your nodes, all except for schedulers."]}, {"body": [{"body": [], "indent": 0, "text": [" ", {"text": "", "fullpath": "/images/nodes/flags_top_anno.png", "scheme": "Image", "type": "link", "value": "/images/nodes/flags_top_anno.png"}], "role": "item", "attrs": {"display": "left full"}, "extent": [26329, 26376], "container": true, "type": "fig"}], "container": true, "role": "item_group", "type": "fig_group"}, {"body": [{"indent": 0, "type": "para", "extent": [26419, 26558], "text": ["For more information about how TOP nodes and their work items are visualized in the viewport, see ", {"text": ["PDG node network interface"], "fullpath": "/tops/ui", "scheme": null, "type": "link", "value": "/tops/ui"}, "."]}, {"body": [{"body": [{"indent": 0, "text": [{"text": "", "fullpath": "/network/NETVIEW/bypass_flag", "scheme": "Icon", "type": "link", "value": "NETVIEW/bypass_flag"}, " "], "role": "td", "attrs": {"style": "background-color: #333333; width: 40px;"}, "extent": [26600, 26630], "container": true, "type": "cell"}, {"indent": 4, "text": [{"keys": ["Q"], "text": null, "type": "keys"}, " or ", {"keys": ["B"], "text": null, "type": "keys"}, " "], "role": "td", "attrs": {"style": "width: 8em;"}, "extent": [26687, 26708], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [26745, 26958], "text": [{"text": ["Bypass"], "type": "strong"}, " disables the node, making it pass its channels through to the output unchanged. This is useful for testing and visualizing the effect the node is having in the viewport or on the output."]}, {"indent": 8, "type": "para", "extent": [26958, 27040], "text": ["When a node is bypassed, the flag on the left of the node is lit yellow."]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}, {"body": [{"indent": 0, "text": [{"text": "", "fullpath": "/network/NETVIEW/output_flag", "scheme": "Icon", "type": "link", "value": "NETVIEW/output_flag"}, " "], "role": "td", "attrs": {"style": "background-color: #333333;"}, "extent": [27040, 27069], "container": true, "type": "cell"}, {"indent": 4, "text": [{"keys": ["T"], "text": null, "type": "keys"}, " "], "role": "td", "extent": [27113, 27125], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [27125, 27209], "text": [{"text": ["Output"], "type": "strong"}, " sets this node\u2019s output as the output of the TOP network."]}, {"indent": 8, "type": "para", "extent": [27209, 27339], "text": ["When the output flag is on, the flag on the right of the node is lit orange and an orange ring appears around the node."]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}], "type": "table", "thead": [{"body": [{"indent": 0, "text": ["Icon "], "role": "th", "extent": [26558, 26566], "container": true, "type": "cell"}, {"indent": 4, "text": ["Key "], "role": "th", "extent": [26566, 26577], "container": true, "type": "cell"}, {"indent": 8, "role": "th", "type": "cell", "extent": [26577, 26600], "text": ["Description "]}], "divider": false, "type": "row"}]}], "indent": 0, "level": 3, "text": ["TOP flags"], "extent": [26401, 26419], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 0, "text": [{"text": "", "fullpath": "/network/NETVIEW/dynamic_badge.png", "scheme": "Icon", "type": "link", "value": "NETVIEW/dynamic_badge.png"}, " "], "role": "td", "attrs": {"style": "background-color: #333333;"}, "extent": [27412, 27448], "container": true, "type": "cell"}, {"indent": 4, "text": ["None "], "role": "td", "extent": [27492, 27503], "container": true, "type": "cell"}, {"body": [{"indent": 8, "type": "para", "extent": [27503, 27603], "text": ["When a TOP node is ", {"text": ["dynamic"], "type": "em"}, ", a purple ", {"text": ["badge"], "fullpath": "/network/badges", "scheme": null, "type": "link", "value": "badges"}, " appears on the node."]}, {"indent": 8, "type": "para", "extent": [27603, 27968], "text": ["In TOPs, there are two types of nodes: static and dynamic. Static nodes can generate their work items without any inputs as they are not dependent on any upstream data. Dynamic nodes on the other hand require information from their inputs upstream to generate their work items. That is why dynamic nodes can only generate work items once they are cooking."]}, {"indent": 8, "type": "para", "extent": [27968, 28096], "text": ["To learn more about about static and dynamic TOP nodes and their significance in a TOP network, see Static vs. Dynamic."]}], "role": "td", "type": "cell"}], "divider": false, "type": "row"}], "type": "table", "thead": [{"body": [{"indent": 0, "text": ["Icon "], "role": "th", "extent": [27369, 27378], "container": true, "type": "cell"}, {"indent": 4, "text": ["Key "], "role": "th", "extent": [27378, 27389], "container": true, "type": "cell"}, {"indent": 8, "role": "th", "type": "cell", "extent": [27389, 27412], "text": ["Description "]}], "divider": false, "type": "row"}]}], "indent": 0, "level": 3, "text": ["TOP badge"], "extent": [27339, 27369], "container": true, "type": "h", "id": "top_badge"}], "indent": 0, "level": 2, "text": ["Task node (TOP) networks"], "extent": [25128, 25165], "container": true, "type": "h", "id": "top"}, {"body": [{"body": [{"body": [], "indent": 0, "role": "item", "attrs": {"query": "type:node context:top", "sortedby": "title"}, "extent": [404, 411], "container": true, "type": "list"}], "container": true, "role": "item_group", "type": "list_group"}], "indent": 0, "level": 1, "text": ["Nodes"], "role": "section", "attrs": {"display": "show-icons"}, "extent": [364, 381], "container": true, "type": "subtopics_section", "id": "subtopics"}], "title": ["TOP nodes"], "summary": ["TOP nodes define a workflow where data is fed into the network, turned into \"work items\" and manipulated by different nodes. Many nodes represent external processes that can be run on the local machine or a server farm."], "attrs": {"type": "index", "icon": "NETWORKS/top"}, "included": ["/network/flags"], "type": "root"}