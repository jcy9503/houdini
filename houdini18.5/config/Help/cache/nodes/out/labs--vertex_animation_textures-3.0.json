{"body": [{"indent": 0, "text": ["Labs Vertex Animation Textures"], "type": "title", "extent": [0, 35], "level": 0}, {"indent": 0, "type": "summary", "extent": [170, 418], "text": [" The Vertex Animation Textures ROP will export a mesh and a set of textures to be used with a shader for complex real-time effects, such as: soft-body deformation, rigid-body dynamics, dynamically remeshed geometries, and particle sprites. "]}, {"indent": 0, "type": "para", "extent": [418, 848], "text": ["Vertex Animation Textures (VAT) is an efficient and powerful solution to recreate complex and non-traditional animations in real time. Because VAT only uses textures and shaders to achieve the visuals on the GPU, it has a much lighter performance impact on the CPU, compared to traditional skeletal mesh animations. This also makes VAT a good candidate to animate a large number of instanced meshes with per-instance variations."]}, {"indent": 0, "type": "para", "extent": [848, 1142], "text": ["Furthermore, VAT comes in handy when a skeletal animation rig is too complicated to be imported to the real-time engine. You can import the rig into Houdini and directly export the animated geometry through VAT, because all VAT needs is the points/vertices and the data on them on each frame."]}, {"indent": 0, "type": "para", "extent": [1142, 1314], "text": ["Vertex animations encoded in textures do not have to be played in complete loops or at a constant speed. You can start/stop at any frame or art direct the playback speed."]}, {"indent": 0, "type": "para", "extent": [1314, 1476], "text": ["The limitations of VAT include: texture memory budget on lower-end hardwares, the lack of animated collisions, and relatively limited real-time interactability."]}, {"indent": 0, "type": "para", "extent": [1476, 1614], "text": ["Compared to previous versions, VAT 3.0 offers more streamlined workflows, additional advanced features, and a lot more customizability."]}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [1642, 1880], "text": ["Cooks all dependent networks and renders all the assets specified on the ", {"text": ["Export"], "type": "strong"}, " tab. In Dynamic Remeshing (Fluid) mode, there are two render passes and this cooks all the assets pertaining to the currently selected render pass."]}], "indent": 4, "text": ["Render All"], "role": "item", "extent": [1626, 1642], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [1906, 2605], "text": [{"text": ["Mode"], "type": "strong"}, " depends on what kind of animation you want to export. ", {"text": ["Target Engine"], "type": "strong"}, " affects the coordinate system, the scale, and potentially some other engine-specific parameters. See the information on the ", {"text": ["Input"], "type": "strong"}, " tab for how to prepare your input geometry for a specific mode-and-engine combination.\n        ", {"text": [{"text": ["Soft-Body Deformation (Soft)"], "type": "strong"}, ": the surfaces have consistent topologies; they simply deform."], "tag": "p", "type": "xml", "attrs": {}}, "\n        ", {"text": [{"text": ["Rigid-Body Dynamics (Rigid)"], "type": "strong"}, ": packed pieces with RBD simulation data."], "tag": "p", "type": "xml", "attrs": {}}, "\n        ", {"text": [{"text": ["Dynamic Remeshing (Fluid)"], "type": "strong"}, ": the surfaces are potentially remeshed every frame with dynamic topologies."], "tag": "p", "type": "xml", "attrs": {}}, "\n        ", {"text": [{"text": ["Particle Sprites (Sprite)"], "type": "strong"}, ": points with particle simulation data."], "tag": "p", "type": "xml", "attrs": {}}]}], "indent": 4, "text": ["Mode / Target Engine"], "role": "item", "extent": [1880, 1906], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [2620, 2712], "text": ["The first frame and last frame of the animation to export. Both ends are inclusive."]}], "indent": 4, "text": ["Start/End"], "role": "item", "extent": [2605, 2620], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [2732, 2795], "text": ["The path to the geometry node that you want to render."]}], "indent": 4, "text": ["Input Geometry"], "role": "item", "extent": [2712, 2732], "container": true, "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [2884, 3464], "text": ["Compresses the normals from the vector type to the float type and stores them in Position Texture\u2019s alpha channel. This is a lossy compression resulting in medium-quality normals. If you do not plan to apply (tangent-space) surface normal maps to your real-time asset, this is a more memory-efficient alternative as it bypasses the cost of sampling Rotation Texture. But if you want to apply surface normal maps, turn this off and use Rotation Texture instead. Turning this on also precludes you from exporting a custom attribute through Position Texture\u2019s alpha channel."]}], "indent": 4, "text": ["Export Compressed Normals in Position Alpha"], "role": "item", "extent": [2835, 2884], "container": true, "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 4, "level": 2, "text": ["Settings: Soft-Body Deformation"], "extent": [2795, 2835], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [3522, 4704], "text": ["The vertices on every rigid-body piece are transformed relative to the piece\u2019s pivot. Therefore, the accuracy of the pivot encoding determines the accuracy of piece translations and rotations throughout the animation.\n        ", {"text": [{"text": ["High"], "type": "strong"}, ": select this if your vertex shader is a performance bottleneck; uses two 16-bit UV channels to store unencoded pivots; the overall cheapest option."], "tag": "p", "type": "xml", "attrs": {}}, " \n        ", {"text": [{"text": ["Very High"], "type": "strong"}, ": recommended; uses two 16-bit UV channels to store encoded pivots; deploys two split-encoding formats and dynamically pick the better format for each piece, producing an accuracy very close to that of \"Maximum\" at only half of the latter\u2019s memory footprint; costs more vertex shader instructions."], "tag": "p", "type": "xml", "attrs": {}}, "\n        ", {"text": [{"text": ["Maximum"], "type": "strong"}, ": select this only if you absolutely need the highest possible accuracy; uses two 32-bit UV channels to store unencoded pivots; in Unreal Engine, you have to turn on ", {"text": ["Use Full Precision UVs"], "type": "strong"}, " in Mesh Editor, otherwise the actual accuracy is slightly worse than \"High\". Because Rigid-Body Dynamics (Rigid) mode requires 4-6 UV channels on the exported mesh, turning on Use Full Precision UVs doubles the memory footprints for all of them."], "tag": "p", "type": "xml", "attrs": {}}]}], "indent": 4, "text": ["Pivot Accuracy"], "role": "item", "extent": [3502, 3522], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [4732, 5972], "text": ["Select \"Accurate Multi-RPF Slerp with Angular Velocity\" unless your input geometry cannot provide the angular velocity attribute \"w\". If your input geometry comes from a RBD simulation, angular velocity is directly available. Simply make sure the attribute is included in the simulation output attributes and that it is transferred to points.\n        ", {"text": [{"text": ["Accurate Multi-RPF Slerp with Angular Velocity"], "type": "strong"}, ": uses an angular-velocity-assisted spherical linear interpolation (slerp) algorithm to fairly accurately interpolate rotations of fast-spinning pieces; capable of interpolating pieces that spin much faster than 360 degrees per integer frame (multi-revolutions per frame); also capable of handling the edge case where a piece rotates to the exact same orientation as that of the previous frame; allows you to freely dilate time in real-time playbacks."], "tag": "p", "type": "xml", "attrs": {}}, "\n        ", {"text": [{"text": ["Basic Short-Path Slerp without Angular Velocity"], "type": "strong"}, ": uses the standard short-path spherical linear interpolation (slerp) algorithm that does not require the input angular velocity; this limits accurate rotation interpolations to pieces that spin less than 180 degrees per inter frame; when any piece spins faster than that, its interpolation will be incorrect."], "tag": "p", "type": "xml", "attrs": {}}]}], "indent": 4, "text": ["Rotation Interpolation"], "role": "item", "extent": [4704, 4732], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [6020, 6405], "text": ["This requires you to export Color Texture and set Texture Format to \"HDR\". It recomputes accelerations and exports them through the RGB channels of Color Texture. Using accelerations, the shader can reconstruct curved interframe trajectories in a more realistic way which take velocites into account, instead of constructing straight paths to connect adjacent-frame positions."]}], "indent": 4, "text": ["Support Smoothly Interpolated Trajectories"], "role": "item", "extent": [5972, 6020], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [6426, 6772], "text": ["If the maximum RPF (revolutions per frame) ever reached in the animation by any piece is too high, it may affect the accuracy of the rotation interpolation for all pieces due to floating point precision limitations. Set this parameter to a reasonably high number prevents extremely fast-spinning outlier pieces from causing that problem."]}], "indent": 4, "text": ["Max RPF Allowed"], "role": "item", "extent": [6405, 6426], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [6800, 7450], "text": ["Helps to resolve the edge case where a piece rotates to the exact same orientation as that of the previous frame. The slerp function is not defined for rotations that are exact multiples of 360 degrees. The solution is therefore to slightly rotate any edge-case piece towards or away from its next frame\u2019s orientation. On even frames, it will rotate forward in time by a random degree between 50% and 150% the value of this parameter; on odd frames, it will rotate backward in time by a random degree between -50% and -150% the value of this parameter. Do not set this value too low, or the real-time shader may suffer from numerical errors."]}], "indent": 4, "text": ["Slerp Edge Case Offset"], "role": "item", "extent": [6772, 6800], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [7476, 7812], "text": ["A global random seed that contributes to (but not solely responsible for) generating random degrees by which to rotate edge-case pieces (see the tooltip of Slerp Edge Case Offset). It is extremely unlikely that you will need to change this parameter. Only change it if the node displays an error message that asks you to do so."]}], "indent": 4, "text": ["Slerp Edge Case Seed"], "role": "item", "extent": [7450, 7476], "container": true, "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 4, "level": 2, "text": ["Settings: Rigid-Body Dynamics"], "extent": [3464, 3502], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [7865, 8767], "text": ["Dynamic Remeshing (Fluid) mode requires you to render output files in two separate passes in order to reduce the texture memory consumption. Leave this at \"First Pass\" when you are configuring the node\u2019s settings, and then press ", {"text": ["Render All"], "type": "strong"}, ". After the first pass is complete, change this to \"Second Pass\" and press ", {"text": ["Render All"], "type": "strong"}, " again. (Almost all other parameters are locked during the second pass, because you are not allowed to change setting between the two passes.) If ", {"text": ["Preview Texture Size"], "type": "strong"}, " is on, this parameter decides which pass\u2019s texture size to preview.\n        ", {"text": [{"text": ["First Pass"], "type": "strong"}, ": renders Geometry, Lookup Table Texture, and optionally the Real-Time Data JSON file / the Unity Material file. "], "tag": "p", "type": "xml", "attrs": {}}, "\n        ", {"text": [{"text": ["Second Pass"], "type": "strong"}, ": renders the animation data textures (i.e. Position Texture, Rotation Texture, Color Texture, etc.), which are much smaller in size than Lookup Table Texture."], "tag": "p", "type": "xml", "attrs": {}}]}], "indent": 4, "text": ["Render Pass"], "role": "item", "extent": [7848, 7865], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [8784, 8845], "text": ["Turn this off if you do not want to fuse any points."]}], "indent": 4, "text": ["Enable Fuse"], "role": "item", "extent": [8767, 8784], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [8867, 9183], "text": ["The point group that will be affected by fusing. Points will be fused together if they are within the distance threshold set by ", {"text": ["Fuse Distance"], "type": "strong"}, ". You can also use the \"!group_name\" or \"* ^group_a_name ^group_b_name\" syntax to exclude certain groups. When this parameter is blank, all points will be affected."]}], "indent": 4, "text": ["Fuse Point Group"], "role": "item", "extent": [8845, 8867], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [9202, 9386], "text": ["Fuses together points within this distance to one another in the input geometry. This helps to remove tiny triangles that are a waste of resources and potentially problematic."]}], "indent": 4, "text": ["Fuse Distance"], "role": "item", "extent": [9183, 9202], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [9435, 10023], "text": ["Compresses the normals from the vector type to the float type and stores them in Position Texture\u2019s alpha channel. This is a lossy compression resulting in medium-quality normals. If you do not plan to apply regular (tangent-space) surface normal maps to your real-time asset, this is a more memory-efficient alternative as it bypasses the cost of sampling Rotation Texture. But if you want to apply regular normal maps, turn this off and use Rotation Texture instead. Turning this on also precludes you from exporting a custom attribute through Position Texture\u2019s alpha channel."]}], "indent": 4, "text": ["Export Compressed Normals in Position Alpha"], "role": "item", "extent": [9386, 9435], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [10081, 10483], "text": ["Exports the animated UV attributes through Position Texture\u2019s alpha channel and Color Texture\u2019s alpha channel. Dynamic Remeshing (Fluid) mode can support UV maps, but since the topology is dynamic, the input geometry has to be UV unwrapped on every frame. You can either UV unwrap the input geometry yourself (recommended) or rely on the auto UV generation method specified on the ", {"text": ["Input"], "type": "strong"}, " tab."]}], "indent": 4, "text": ["Export Surface UVs in Position Alpha and Color Alpha"], "role": "item", "extent": [10023, 10081], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [10530, 10904], "text": ["Exports the animated UV attributes through Color Texture\u2019s red and green channels. Dynamic Remeshing (Fluid) mode can support UV maps, but since the topology is dynamic, the input geometry has to be UV unwrapped on every frame. You can either UV unwrap the input geometry yourself (recommended) or rely on the auto UV generation method specified on the ", {"text": ["Input"], "type": "strong"}, " tab."]}], "indent": 4, "text": ["Export Surface UVs in Color Red and Green"], "role": "item", "extent": [10483, 10530], "container": true, "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 4, "level": 2, "text": ["Settings: Dynamic Remeshing"], "extent": [7812, 7848], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [10986, 11187], "text": ["Changes how the data are arranged on the output textures to make it possible to interpolate particle attributes in real time. This requires the input geometry to have the point attribute \"id\"."]}], "indent": 4, "text": ["Support Particle Interframe Interpolation"], "role": "item", "extent": [10939, 10986], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [11203, 11368], "text": ["Set the shape of the particle card geometry. Different shapes have slightly different performance impacts. But all shapes share the same centre in UV space."]}], "indent": 4, "text": ["Card Shape"], "role": "item", "extent": [11187, 11203], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [11392, 11485], "text": ["How the square particle cards will be oriented in UV space and real-time view space."]}], "indent": 4, "text": ["Square Orientation"], "role": "item", "extent": [11368, 11392], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [11511, 11608], "text": ["How the triangular particle cards will be oriented in UV space and real-time view space."]}], "indent": 4, "text": ["Triangle Orientation"], "role": "item", "extent": [11485, 11511], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [11633, 11729], "text": ["How the hexagonal particle cards will be oriented in UV space and real-time view space."]}], "indent": 4, "text": ["Hexagon Orientation"], "role": "item", "extent": [11608, 11633], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [11751, 12053], "text": ["Replaces the default shape options with your own designs. The custom shape geometry has to be flat on the ZX plane. You can merge multiple shape variants together and point this parameter to the path of the combined geometry. See the tooltip of Multiple Shape Variants with Shape ID Attribute."]}], "indent": 4, "text": ["Custom ZX Shapes"], "role": "item", "extent": [11729, 11751], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [12075, 12366], "text": ["The custom shapes can either be filled polygons or simply outlines defined by closed curves with no interiors. The hollow outlines will be automatically filled. For performance reasons, consider using a Fuse SOP to reduce the number of points used to define the input custom shapes."]}], "indent": 4, "text": ["Shape Input Type"], "role": "item", "extent": [12053, 12075], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [12419, 12622], "text": ["When you merge multiple shape variants together (because Custom ZX Shapes only accepts one geometry path), they can still be uniquely identified if you assign each shape a unique shape ID value."]}], "indent": 4, "text": ["Multiple Shape Variants with Shape ID Attribute"], "role": "item", "extent": [12366, 12419], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [12646, 12734], "text": ["A point or primitive integer attribute to distinguish different shape variants."]}], "indent": 4, "text": ["Shape ID Attribute"], "role": "item", "extent": [12622, 12646], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [12762, 12986], "text": ["A point or primitive float attribute to determine the distribution of the shape variants. Each variant\u2019s likelihood of adoption by a particle is this variant\u2019s weight divided by the aggregate weight of all variants."]}], "indent": 4, "text": ["Shape Weight Attribute"], "role": "item", "extent": [12734, 12762], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [13036, 13254], "text": ["Preserves the relative scale differences between multiple variants. Turn this off if you want to scale (the width-to-height ratio will be locked) different shape variants to have the same bounding square size."]}], "indent": 4, "text": ["Preserve Relative Scales of Different Shapes"], "role": "item", "extent": [12986, 13036], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [13287, 13524], "text": ["Turn this on only if the particle cards have the wrong normals in your real-time engine, in which case, they may appear to be invisible but if you select the object, you can see the outlines. This is unlikely to happen, however."]}], "indent": 4, "text": ["Reverse Custom Card Normals"], "role": "item", "extent": [13254, 13287], "container": true, "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 4, "level": 2, "text": ["Settings: Particle Sprites"], "extent": [10904, 10939], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [13600, 13900], "text": ["Set this according to whether or not the input geometry is cached to integer frames and loaded from disk. Caching the input geometry is the recommended workflow as it shortens this node\u2019s render time, especially if the input depends on expensive simulations or nodes that are slow to recook."]}], "indent": 4, "text": ["Input Geometry Is Cached to Integer Frames"], "role": "item", "extent": [13552, 13600], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [13925, 14505], "text": ["Typically it is sufficient to select \"Non-HDR\" and \".png\" / \".tga\" for Lookup Table Texture to keep the memory consumption low. In Unreal Engine, if your Dynamic Remeshing (Fluid) mode animation has glitches, the first thing is to do is to restart Unreal Editor. (This is known to fix glitches that occur after newly imported files.) If the glitches persist, consider turning on ", {"text": ["Use Full Precision UVs"], "type": "strong"}, " in Mesh Editor. Only change this to \"HDR\" and \".exr\" / \".tiff\" if your second pass texture size is huge and all other solutions have failed to get rid of the glitches."]}], "indent": 4, "text": ["Lookup Table Format"], "role": "item", "extent": [13900, 13925], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [14525, 15131], "text": ["Select \"HDR\" if your performance budget can afford it, because it offers better precision for all the data you are exporting. Only EXR and TIFF extensions can support HDR, but all extensions can support non-HDR. If your animation spans a huge area, the data precision will be pushed to its limit and non-HDR formats may result in noticeable issues; consider switching to HDR formats or dividing the animation into several smaller local parts. In your real-time engine, match the texture compression setting with this setting (see the tooltip of Pad Texture Size to Powers of Two for an exception)."]}], "indent": 4, "text": ["Texture Format"], "role": "item", "extent": [14505, 14525], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [15170, 15498], "text": ["Uses two 8-bit textures for better precision when the target engine does not support 16/32-bit HDR textures. You must use both textures when this is on. The node automatically prevents you from accessing this option if you want to use a HDR Position Texture, but you can override this restriction in the ", {"text": ["Advanced"], "type": "strong"}, " tab."]}], "indent": 4, "text": ["Split Positions into Two Textures"], "role": "item", "extent": [15131, 15170], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [15530, 16021], "text": ["Spare Color Texture exports the point vector attribute \"Cd2\" and the point float attribute \"Alpha2\" on the input geometry. It is useful when you want to export a second set of animated colors. You can also use it to export the actual colors when Color Texture is occupied by non-color data. Color Texture is designed to be a multi-purpose texture whereas Spare Color Texture is more of a pure color texture. But of course, you can still write non-color data into \"Cd2\" and \"Alpha2\"."]}], "indent": 4, "text": ["Export Spare Color Texture"], "role": "item", "extent": [15498, 15530], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [16059, 16660], "text": ["To export vertex colors, create the attributes \"Cd_v\" and \"Alpha_v\" on vertices as opposed to points. This is to clearly differentiate between animated point/piece/particle colors, which are exported through the textures, and unchanging vertex colors, which are exported through the static mesh. Vertex colors can be used for masking and other purposes. Dynamic Remeshing (Fluid) mode does not have the concept of static vertex colors, since there is no consistent topology. Particle Sprites (Sprite) mode only exports static vertex colors if they exist on the geometry from Custom ZX Shapes."]}], "indent": 4, "text": ["Export Static Mesh Vertex Colors"], "role": "item", "extent": [16021, 16059], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [16704, 17341], "text": ["It is recommended to turn this on. When the real-time shader is not in the debug mode, the plane is not rendered and incurs next to no cost. Turning it off makes it harder to debug the real-time shader. (This feature is currently only supported with Unreal Engine.)\n        ", {"text": ["Prior to Vertex Animation Textures ROP 3.0, you needed to set a list of parameter values in the real-time shader. Those data are now embedded in the bounds of the static mesh and automatically derived at runtime. Turn this on to include a simple square in the exported static mesh to display the embedded data when the shader is in the debug mode."], "tag": "p", "type": "xml", "attrs": {}}]}], "indent": 4, "text": ["Include Hidden Debug Plane in Geometry"], "role": "item", "extent": [16660, 16704], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [17364, 17639], "text": ["A custom float attribute you want to export through Position Texture\u2019s alpha channel. This attribute can have any non-negative values, including values above 1.0, even when using non-HDR texture formats. But in order to support this, negative values are not allowed."]}], "indent": 4, "text": ["In Position Alpha"], "role": "item", "extent": [17341, 17364], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [17653, 18062], "text": ["A custom vector attribute you want to export through Color Texture\u2019s RGB channels. This attribute does not undergo any transform, conversion, or normalization. If the attribute has values outside the 0-1 range, set Texture Format to \"HDR\". If you have to use a non-HDR texture, you can pre-normalize the attributes in the input geometry and manually reverse the normalization in the real-time shader."]}], "indent": 4, "text": ["In Color"], "role": "item", "extent": [17639, 17653], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [18082, 18491], "text": ["A custom float attribute you want to export through Color Texture\u2019s alpha channel. This attribute does not undergo any transform, conversion, or normalization. If the attribute has values outside the 0-1 range, set Texture Format to \"HDR\". If you have to use a non-HDR texture, you can pre-normalize the attributes in the input geometry and manually reverse the normalization in the real-time shader."]}], "indent": 4, "text": ["In Color Alpha"], "role": "item", "extent": [18062, 18082], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [18515, 19106], "text": ["The target width of Lookup Table Texture. In Dynamic Remeshing (Fluid) mode, ", {"text": ["Target Texture Width"], "type": "strong"}, " can generally be less than half of this value, as Lookup Table Texture tends to be many times larger than the animation data textures.  \n        ", {"text": ["You can turn on ", {"text": ["Preview Texture Size"], "type": "strong"}, " to help you decide this value. Try to avoid creating textures that are too wide and short, or too narrow and tall. In Unreal Engine, if either the texture width or the height is much larger than 4096, consider turning on ", {"text": ["Use Full Precision UVs"], "type": "strong"}, " in Mesh Editor if the animation has glitches."], "tag": "p", "type": "xml", "attrs": {}}]}], "indent": 4, "text": ["Lookup Table Width"], "role": "item", "extent": [18491, 18515], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [19132, 19683], "text": ["The target width of the output textures. If there are fewer data points per frame than this value, the output textures use the number of data points as their widths.\n        ", {"text": ["You can turn on ", {"text": ["Preview Texture Size"], "type": "strong"}, " to help you decide this value. Try to avoid creating textures that are too wide and short, or too narrow and tall. In Unreal Engine, if either the texture width or the height is much larger than 4096 and the animation has glitches, consider turning on ", {"text": ["Use Full Precision UVs"], "type": "strong"}, " in Mesh Editor if the animation has glitches."], "tag": "p", "type": "xml", "attrs": {}}]}], "indent": 4, "text": ["Target Texture Width"], "role": "item", "extent": [19106, 19132], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [19716, 20194], "text": ["Turn this on to interactively preview the output texture size. It is somewhat slow because every time you toggle this on or some upstream parameter updates, the node will need to recheck the input geometry on every frame of the export frame range. But once it is on, updating Target Texture Width will have instant feedback. In Dynamic Remeshing (Fluid) mode, the two passes have two different texture sizes, so which preview size is displayed depends on ", {"text": ["Render Pass"], "type": "strong"}, "."]}], "indent": 4, "text": ["Preview Texture Size (Slow)"], "role": "item", "extent": [19683, 19716], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [20233, 20719], "text": ["You normally do not need to pad animation data textures to powers of two in dimensions, because as data textures, they should not be streamed. But if the target engine or hardware only accepts powers of two textures, turn this on. In Unreal Engine, sometimes there are issues with power-of-two textures that have data in their alpha channels, in which case, consider using the HDR compression setting in engine even if you exported those textures in non-HDR formats in Houdini."]}], "indent": 4, "text": ["Pad Texture Size to Powers of Two"], "role": "item", "extent": [20194, 20233], "container": true, "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 4, "level": 2, "text": ["Settings: All Modes"], "extent": [13524, 13552], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [20742, 20886], "text": ["Follow the input requirement checklist, which is specific to the current mode and target engine. Expand Legend to see more information."]}], "indent": 4, "role": "item", "extent": [20733, 20742], "container": true, "type": "tip"}], "container": true, "role": "item_group", "type": "tip_group"}], "indent": 4, "level": 2, "text": ["Input"], "extent": [20719, 20733], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [20946, 21589], "text": ["Even though the vertex attribute \"uv\" is listed as an optional attribute, it is required implicitly. The node simply auto-computes UVs if they are missing from the input geometry. When they are not missing, you still have the option to have this node recompute them for you, but that is a less transparent workflow. Consider using Labs Auto UV SOP when preparing the input geometry.\n        ", {"text": [{"text": ["UV Unwrap"], "type": "strong"}, ": faster; many more disjoint UV islands; fewer rotated islands in the UV layout."], "tag": "p", "type": "xml", "attrs": {}}, "\n        ", {"text": [{"text": ["UV Autoseam and Flatten"], "type": "strong"}, ": slower but generally better quality; fewer disjoint UV islands; more rotated islands in the UV layout."], "tag": "p", "type": "xml", "attrs": {}}]}], "indent": 4, "text": ["UV Generation"], "role": "item", "extent": [20927, 20946], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [21612, 22229], "text": ["Even though the vertex attribute \"N\" is listed as an optional attribute, it is required implicitly. The node simply auto-computes normals if they are missing from the input geometry. When they are not missing, you still have the option to have this node recompute them for you, but that is a less transparent workflow.\n        ", {"text": [{"text": ["Vertex Angle"], "type": "strong"}, ": sets the internal Normal SOP to run on vertices with a Cusp Angle of 60 and a Weighting Method of \"By Vertex Angle\"."], "tag": "p", "type": "xml", "attrs": {}}, "\n        ", {"text": [{"text": ["Face Area"], "type": "strong"}, ": sets the internal Normal SOP to run on vertices with a Cusp Angle of 60 and a Weighting Method of \"By Face Area\"."], "tag": "p", "type": "xml", "attrs": {}}]}], "indent": 4, "text": ["Normal Generation"], "role": "item", "extent": [21589, 21612], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [22253, 22370], "text": ["It is recommended to let the node recompute the tangent attribute \"tangentu\" for you using the MikkT method."]}], "indent": 4, "text": ["Tangent Generation"], "role": "item", "extent": [22229, 22253], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [22395, 22761], "text": ["The binormal attribute \"tangentv\" is always recomputed to ensure consistency. How binormals are computed depends on ", {"text": ["Target Engine"], "type": "strong"}, ".\n        ", {"text": [{"text": ["Right-Hand Rule"], "type": "strong"}, ": the binormal is computed from the cross product of the normal and the tangent."], "tag": "p", "type": "xml", "attrs": {}}, "\n        ", {"text": [{"text": ["Left-Hand Rule"], "type": "strong"}, ": the binormal is computed from the cross product of the tangent and the normal."], "tag": "p", "type": "xml", "attrs": {}}]}], "indent": 4, "text": ["Binormal Generation"], "role": "item", "extent": [22370, 22395], "container": true, "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 4, "level": 2, "text": ["Input: Attribute Auto Generation"], "extent": [20886, 20927], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [22793, 22845], "text": ["The directory in which to export the files."]}], "indent": 4, "text": ["Export Path"], "role": "item", "extent": [22776, 22793], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [22861, 22966], "text": ["The overall name of this art asset. The names of all exported files will begin with this string."]}], "indent": 4, "text": ["Asset Name"], "role": "item", "extent": [22845, 22861], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [22992, 23754], "text": ["Appends a suffix to the static mesh\u2019s file name right before the extension. Starting with Vertex Animation Textures ROP 3.0, the default workflow does not require you to export any real-time data file that contains the frame count and the FPS. The frame count is embedded and automatically derived by the real-time shader. The FPS should not change very often, so it is assumed that it is easier for you to simply remember the FPS than to export it every time. But in case you prefer to keep a copy of those numbers somewhere, this gives you an option to append them to the geometry file name. An alternative option available in Unreal Engine is to enter the debug mode to see the frame count (see the tooltip of Include Hidden Debug Plane in Geometry)."]}], "indent": 4, "text": ["Geometry Name Suffix"], "role": "item", "extent": [22966, 22992], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [23767, 24262], "text": ["Selects which of the following sets of files to render and export. Starting with Vertex Animation Textures ROP 3.0, Normal Texture is deprecated and replaced by Rotation Texture which describes both normals and tangents. Position Texture 2 and Spare Color Texture are not directly enabled/disabled here. They depend on parameters in the ", {"text": ["Settings"], "type": "strong"}, " tab. But you cannot export Position Texture 2 without Position Texture 1, and you cannot export Spare Color Texture without Color Texture."]}], "indent": 4, "text": ["Include"], "role": "item", "extent": [23754, 23767], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [24276, 24325], "text": ["The export path of the static mesh file."]}], "indent": 4, "text": ["Geometry"], "role": "item", "extent": [24262, 24276], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [24352, 24397], "text": ["The export path of Position Texture."]}], "indent": 4, "text": ["Position / Position 1"], "role": "item", "extent": [24325, 24352], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [24413, 24460], "text": ["The export path of Position Texture 2."]}], "indent": 4, "text": ["Position 2"], "role": "item", "extent": [24397, 24413], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [24474, 24519], "text": ["The export path of Rotation Texture."]}], "indent": 4, "text": ["Rotation"], "role": "item", "extent": [24460, 24474], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [24530, 24572], "text": ["The export path of Color Texture."]}], "indent": 4, "text": ["Color"], "role": "item", "extent": [24519, 24530], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [24589, 24637], "text": ["The export path of Spare Color Texture."]}], "indent": 4, "text": ["Spare Color"], "role": "item", "extent": [24572, 24589], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [24655, 24704], "text": ["The export path of Lookup Table Texture."]}], "indent": 4, "text": ["Lookup Table"], "role": "item", "extent": [24637, 24655], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [24724, 24767], "text": ["The export path of Unity Material."]}], "indent": 4, "text": ["Unity Material"], "role": "item", "extent": [24704, 24724], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [24787, 24840], "text": ["The export path of Real-Time Data JSON file."]}], "indent": 4, "text": ["Real-Time Data"], "role": "item", "extent": [24767, 24787], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [24877, 25010], "text": ["By default, output files are grouped into subdirectories by type. Turn this off to save all output files in the same folder."]}], "indent": 4, "text": ["Group Files into Subdirectories"], "role": "item", "extent": [24840, 24877], "container": true, "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 4, "level": 2, "text": ["Export"], "extent": [22761, 22776], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [25051, 25280], "text": ["Only useful when debugging or modifying this node. When this is on, any update to the input geometry, the node parameters, or internal networks may trigger a partial or full recook, depending on where the change is made."]}], "indent": 4, "text": ["Live Update (Slow)"], "role": "item", "extent": [25027, 25051], "container": true, "type": "parameters_item"}, {"body": [{"indent": 9, "type": "para", "extent": [25323, 25683], "text": ["Only useful when debugging or modifying this node. When you press Render All, the node automatically turns on Live Update to enable a full recook of the internal networks. After the renders are complete, the node automatically turns Live Update off, which you can prevent with this parameter. It is useful so you can keep debugging after the renders."]}], "indent": 4, "text": ["Do Not Reset Live Update After Render"], "role": "item", "extent": [25280, 25323], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [25736, 25970], "text": ["Normally it is a waste of resources to use two HDR Position Textures, so the access to Split Position into Two Textures is restricted when Texture Format is set to \"HDR\". You can override that restriction with this parameter."]}], "indent": 4, "text": ["Allow Splitting Positions into Two HDR Textures"], "role": "item", "extent": [25683, 25736], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [26025, 26946], "text": ["Starting with Vertex Animation Textures 3.0, the default workflow does not require you to export any real-time data file. The long list of parameters written to the data file in the older versions are now embedded in the bounds of the static mesh and are automatically derived at runtime. However, you may still want to work with the legacy parameters in at least two situations:\n        ", {"text": ["1. you need to support real-time instancing; the instance transforms may corrupted the embedded data;"], "tag": "p", "type": "xml", "attrs": {}}, "\n        ", {"text": ["2. you need to change the object\u2019s bound scale in engine, which may corrupt the embedded data; however, you should rarely have any reason to change the bound scale, because unlike prior versions, the bounds now encompass the full visible area of the animation, i.e., the mesh will not be incorrectly culled when you move the camera. However, changing the actor/component/object scale is totally safe."], "tag": "p", "type": "xml", "attrs": {}}]}], "indent": 4, "text": ["Allow Exporting Real-Time Data JSON File (Legacy)"], "role": "item", "extent": [25970, 26025], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [26980, 27370], "text": ["Turn this on to support real-time instancing of your vertex-animated mesh. Currently this parameter only makes a difference if ", {"text": ["Target Engine"], "type": "strong"}, " is set to \"Unreal Engine\". In Unreal Engine, instanced meshes' local-space tangents are not directly accessible, so when ", {"text": ["Mode"], "type": "strong"}, " is set to \"Rigid-Body Dynamics (Rigid)\", the tangents have to come from the vertex attributes \"uv5\" and \"uv6\"."]}], "indent": 4, "text": ["Support Real-Time Instancing"], "role": "item", "extent": [26946, 26980], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [27409, 27915], "text": ["Crops the output textures so that they only contain the first frame\u2019s data. (When this is on, ", {"text": ["Pad Texture Size to Powers of Two"], "type": "strong"}, " is ignored.)  This is useful in the real-time shader when you want to use a small texture to look up certain first-frame data regardless of the current animation progress. In Dynamic Remeshing (Fluid) mode, only Lookup Table Texture will be cropped, as the rest of the textures in this mode are not generated in a way that the first-frame data can be easily isolated."]}], "indent": 4, "text": ["Crop Textures to First Frame Only"], "role": "item", "extent": [27370, 27409], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [27962, 28553], "text": ["Only applicable when ", {"text": ["Crop Textures to First Frame Only"], "type": "strong"}, " is on. The point attribute \"pscale\" or any custom float attribute in Position Texture\u2019s alpha channel, by default, is encoded in a special way to allow the packing of additional information. Turn this on to disable the special encoding and to store the raw input float data in this channel. This way, when you access Position Texture\u2019s alpha channel in the real-time shader using a custom setup, you do not need to know how to decode the data. (This parameter has no effect on compressed normals, as they are not float data.)"]}], "indent": 4, "text": ["Preserve Raw Float Data in Position Alpha"], "role": "item", "extent": [27915, 27962], "container": true, "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 4, "level": 2, "text": ["Advanced"], "extent": [25010, 25027], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [28593, 29738], "text": ["Exports a single FBX containing multiple LODs and a single set of textures compatible with all the LODs. All non-zero LODs simply share LOD0's textures through point-mapping (described below in requirement 1), so adding more LODs does not increase the texture memory consumption.\n        ", {"text": ["The input geometry must meet the following requirements:"], "tag": "p", "type": "xml", "attrs": {}}, "\n        ", {"text": ["1. all LODs must have the integer point attribute \"lod0_ptnum\". This attribute maps all the points in every non-zero LOD to a subset of points in LOD0, enabling subsequent LODs to share the point data exported with LOD0. In Rigid-Body Dynamics (Rigid) mode, this attribute should be on packed points."], "tag": "p", "type": "xml", "attrs": {}}, "\n        ", {"text": ["2. in each LOD, all the points must be assigned to the respective point group \"lod#\" with \"#\" being the LOD number starting with 0. In Rigid-Body Dynamics (Rigid) mode, this group should be on packed points instead of points."], "tag": "p", "type": "xml", "attrs": {}}, "\n        ", {"text": ["3. all LODs must already have the desired UVs and normals on vertices; this node cannot reliably auto-generate missing UVs and normals that are consistent across all LODs; therefore, it will not attempt to do so."], "tag": "p", "type": "xml", "attrs": {}}]}], "indent": 4, "text": ["Export LODs"], "role": "item", "extent": [28576, 28593], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [29758, 29864], "text": ["The number of LODs to export. At least this number of LODs must be present in the input geometry."]}], "indent": 4, "text": ["Number of LODs"], "role": "item", "extent": [29738, 29758], "container": true, "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 4, "level": 2, "text": ["Advanced: LODs"], "extent": [28553, 28576], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [29921, 30311], "text": ["Forces all simulation OPs to be reset before Pre-Render Script is executed. This is the safest way to render out a simulation, because it starts the simulation from scratch and discards any partial simulations you might have done with different parameters. However, throwing away an already-cooked simulation can be expensive, especially for relatively slow solvers such as fluids."]}], "indent": 4, "text": ["Initialize Simulation OPs"], "role": "item", "extent": [29890, 29921], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [30334, 30388], "text": ["This script is executed before any rendering."]}], "indent": 4, "text": ["Pre-Render Script"], "role": "item", "extent": [30311, 30334], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [30412, 30465], "text": ["This script is executed after all rendering."]}], "indent": 4, "text": ["Post-Render Script"], "role": "item", "extent": [30388, 30412], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [30485, 30538], "text": ["Prints output file paths with optional tags."]}], "indent": 4, "text": ["PDG Log Output"], "role": "item", "extent": [30465, 30485], "container": true, "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 4, "level": 2, "text": ["Advanced: Scripts"], "extent": [29864, 29890], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [30614, 30872], "text": ["Image data in COPs is always linear. When writing to image formats that are not linear (sRGB, for example), this will convert the colorspace to preserve the look of the image. An 8-bit format that has an unspecified colorspace is assumed to be sRGB."]}], "indent": 4, "text": ["Convert to Image Format Colorspace"], "role": "item", "extent": [30574, 30614], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [30890, 31958], "text": ["The byte format of the image. Higher bit depths provide better color resolution and range at the expense of memory.\n        ", {"text": [{"text": ["8 Bit Integer"], "type": "strong"}, ": lowest bit depth; banding can occasionally be seen; suitable for video."], "tag": "p", "type": "xml", "attrs": {}}, "\n        ", {"text": [{"text": ["16 Bit Integer"], "type": "strong"}, ": intermediate bit depth; no banding can be seen, though clipping can still occur below and above the black and white points."], "tag": "p", "type": "xml", "attrs": {}}, "\n        ", {"text": [{"text": ["32 Bit Integer"], "type": "strong"}, ": generally not used for color, 32-bit integer values are used to store object IDs, counts, and other integer values with a large range."], "tag": "p", "type": "xml", "attrs": {}}, "\n        ", {"text": [{"text": ["16 Bit Floating Point"], "type": "strong"}, ": high bit depth; no banding can be seen, and no clipping occurs at white and black; uses less memory than 32-bit float, however processing time for this format is slightly higher as it is not a native CPU data format; this format supports values in the range -65504 to +65504."], "tag": "p", "type": "xml", "attrs": {}}, "\n        ", {"text": [{"text": ["32 Bit Floating Point"], "type": "strong"}, ": high bit depth; no banding can be seen, and no clipping occurs at white and black; uses 4 times as much memory as 8 bit, which is this format\u2019s main drawback."], "tag": "p", "type": "xml", "attrs": {}}]}], "indent": 4, "text": ["Raster Depth"], "role": "item", "extent": [30872, 30890], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [31982, 32465], "text": ["The integer formats (8, 16 and 32 bit) can specify the raw values that the black and white points occur at. The white point must always be higher than the black point. The minimum and maximum values for the black and white points for each format are:\n        ", {"text": [{"text": ["8 bit"], "type": "strong"}, "   :   0 - 255"], "tag": "p", "type": "xml", "attrs": {}}, "\n        ", {"text": [{"text": ["16 bit"], "type": "strong"}, "  :   0 - 65535"], "tag": "p", "type": "xml", "attrs": {}}, "\n        ", {"text": [{"text": ["32 bit"], "type": "strong"}, "  :   0 - 2,147,483,647"], "tag": "p", "type": "xml", "attrs": {}}, "\n        ", {"text": ["Floating point formats always have their black point at 0 and their white point at 1."], "tag": "p", "type": "xml", "attrs": {}}]}], "indent": 4, "text": ["Black/White Points"], "role": "item", "extent": [31958, 31982], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [32489, 32557], "text": ["Renders the channels separately for different data formats."]}], "indent": 4, "text": ["BC 4-Channel Split"], "role": "item", "extent": [32465, 32489], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [32579, 32650], "text": ["You can optionally turn this on if you are working with takes."]}], "indent": 4, "text": ["Render With Take"], "role": "item", "extent": [32557, 32579], "container": true, "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 4, "level": 2, "text": ["Advanced: Developer Options"], "extent": [30538, 30574], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [32695, 33203], "text": ["Set this to match the coordinate system of your custom engine. You first need to determine your engine\u2019s coordinate system. To use the clockwise rule, orient the axes so that all three positive directions are facing towards you; start from the up axis and count clockwise. To use the right/left-hand rule, take out the respective hand, extend the thumb and the index finger, and keep the middle finger perpendicular to the palm; the index finger points to +X, the middle finger +Y, and the thumb +Z."]}], "indent": 4, "text": ["Coordinate System"], "role": "item", "extent": [32672, 32695], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [33232, 33352], "text": ["How many target engine units equal one real-world metre. This is used to determine the export conversion scale."]}], "indent": 4, "text": ["1 Metre in Engine Units"], "role": "item", "extent": [33203, 33232], "container": true, "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 4, "level": 2, "text": ["Target Engine"], "extent": [32650, 32672], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [33400, 33463], "text": ["Displays the shader resources for the selected engine."]}], "indent": 4, "text": ["Find Shaders For"], "role": "item", "extent": [33378, 33400], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [33508, 33698], "text": ["Press this button to go to the directory of SideFX Labs content plugin for Unreal Engine. Click on the folder matching the Unreal Engine version you need. Follow the guides inside. "]}], "indent": 4, "text": ["Unreal Engine Content Plugin and Guides"], "role": "item", "extent": [33463, 33508], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [33728, 33895], "text": ["Press this button to go to the directory of SideFX Labs Vertex Animation Textures package for Unity. Click on the \"URP_VAT3\" folder. Follow the guides inside."]}], "indent": 4, "text": ["Unity Package and Guides"], "role": "item", "extent": [33698, 33728], "container": true, "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [33928, 34224], "text": ["Displays the data embedded in the bounds of the geometry. You can use this list to verify if the decoded data in your real-time shader are correct. The list is ordered according to the data display order in the target engine. Currently only Unreal Engine supports debugging embedded data."]}], "indent": 4, "text": ["Last Render\u2019s Embedded Data"], "role": "item", "extent": [33895, 33928], "container": true, "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 4, "level": 2, "text": ["Real-Time Shaders"], "extent": [33352, 33378], "container": true, "type": "h", "id": null}], "indent": 0, "level": 1, "text": "Parameters", "role": "section", "extent": [1614, 1626], "container": true, "type": "parameters_section", "id": "parameters"}], "summary": [" The Vertex Animation Textures ROP will export a mesh and a set of textures to be used with a shader for complex real-time effects, such as: soft-body deformation, rigid-body dynamics, dynamically remeshed geometries, and particle sprites. "], "type": "root", "attrs": {"version": "3.0", "tags": "sidefxlabs, gamedev ", "namespace": "labs", "internal": "labs::vertex_animation_textures::3.0", "context": "out", "type": "node", "icon": "vertexanimationtextures"}, "title": ["Labs Vertex Animation Textures"]}