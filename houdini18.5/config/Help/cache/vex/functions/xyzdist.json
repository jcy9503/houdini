{"body": [{"indent": 0, "text": ["xyzdist"], "type": "title", "extent": [0, 12], "level": 0}, {"indent": 0, "type": "summary", "extent": [81, 133], "text": ["Finds the distance of a point to a geometry."]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [185, 263], "text": ["Finds the distance from ", {"text": ["origin"], "type": "var"}, " to the closest point on the geometry."]}], "indent": 0, "text": [" ", {"text": ["float xyzdist(<geometry>, vector origin)"], "type": "code"}], "role": "item", "extent": [133, 185], "container": true, "type": "usage"}, {"indent": 0, "role": "item", "type": "usage", "extent": [263, 337], "text": [" ", {"text": ["float xyzdist(<geometry>, vector origin, int &prim, vector &uv)"], "type": "code"}]}, {"body": [{"indent": 4, "type": "para", "extent": [427, 589], "text": ["Finds the distance from ", {"text": ["origin"], "type": "var"}, " to the closest point on the geometry,\n    and also outputs the primitive number and UV coordinates for the closest point."]}], "indent": 0, "text": [" ", {"text": ["float xyzdist(<geometry>, vector origin, int &prim, vector &uv, float maxdist)"], "type": "code"}], "role": "item", "extent": [337, 427], "container": true, "type": "usage"}, {"indent": 0, "role": "item", "type": "usage", "extent": [589, 658], "text": [" ", {"text": ["float xyzdist(<geometry>, string primgroup, vector origin)"], "type": "code"}]}, {"indent": 0, "role": "item", "type": "usage", "extent": [658, 750], "text": [" ", {"text": ["float xyzdist(<geometry>, string primgroup, vector origin, int &prim, vector &uv)"], "type": "code"}]}, {"body": [{"indent": 4, "type": "para", "extent": [858, 960], "text": ["Finds the distance from ", {"text": ["origin"], "type": "var"}, " to the closest point on geometry in the give primitive group."]}], "indent": 0, "text": [" ", {"text": ["float xyzdist(<geometry>, string primgroup, vector origin, int &prim, vector &uv, float maxdist)"], "type": "code"}], "role": "item", "extent": [750, 858], "container": true, "type": "usage"}], "container": true, "role": "item_group", "type": "usage_group"}, {"indent": 0, "type": "para", "extent": [960, 1105], "text": ["Returns the distance to the closest point on the geometry.  This will find\npositions on the surfaces of the geometry, not just point positions."]}, {"body": [{"body": [{"type": "para", "indent": 4, "extent": [58, 235], "text": ["When running in the context of a node (such as a wrangle SOP), this argument can be an integer representing the input number (starting at 0) to read the geometry from."]}, {"type": "para", "indent": 4, "extent": [235, 423], "text": ["Alternatively, the argument can be a string specifying a geometry file (for example, a ", {"text": [".bgeo"], "type": "code"}, ") to read from. When running inside Houdini, this can be an ", {"text": ["op:/path/to/sop"], "type": "code"}, " reference."]}], "indent": 0, "text": [{"text": ["<geometry>"], "type": "code"}], "role": "item", "attrs": {"id": "geometry"}, "extent": [16, 35], "container": true, "type": "arg"}, {"body": [{"indent": 4, "type": "para", "extent": [1149, 1479], "text": ["The name of a primitive group or a pattern to generate a primitive\n    group.  Uses the same semantics as a SOP group, so empty strings\n    will match all primitives.  Attribute groups like ", {"text": ["@Cd.x>0"], "type": "code"}, " can\n    also be used, but note that the ", {"text": ["@"], "type": "code"}, " may need to be escaped with\n    a backslash in a ", {"text": ["Snippet VOP"], "fullpath": "/nodes/vop/snippet", "scheme": "Node", "type": "link", "value": "/nodes/vop/snippet"}, "."]}], "indent": 0, "text": {"text": ["primgroup"], "type": "code"}, "role": "item", "extent": [1133, 1149], "container": true, "type": "arg"}, {"body": [{"indent": 4, "type": "para", "extent": [1492, 1568], "text": ["The position in space to find the closest position on the geometry to."]}], "indent": 0, "text": {"text": ["origin"], "type": "code"}, "role": "item", "extent": [1479, 1492], "container": true, "type": "arg"}, {"body": [{"indent": 4, "type": "para", "extent": [1580, 1700], "text": ["The function overwrites this variable with the number of the closest primitive, or ", {"text": ["-1"], "type": "code"}, " if no primitive was found."]}], "indent": 0, "text": {"text": ["&prim"], "type": "code"}, "role": "item", "extent": [1568, 1580], "container": true, "type": "arg"}, {"body": [{"indent": 4, "type": "para", "extent": [1710, 1900], "text": ["The function overwrites this variable with the uv coordinates of the closest point on the closest primitive.\n    You can use ", {"text": "", "value": "/vex/functions/primuv", "fallback_text": "primuv()", "fullpath": "/vex/functions/primuv", "scheme": "Vex", "type": "link"}, " to sample an attribute value at this location."]}], "indent": 0, "text": {"text": ["&uv"], "type": "code"}, "role": "item", "extent": [1700, 1710], "container": true, "type": "arg"}, {"body": [{"indent": 4, "type": "para", "extent": [1914, 2024], "text": ["The maximum distance to search. Specifying this can speed up the function if it allows it to quit early."]}], "indent": 0, "text": {"text": ["maxdist"], "type": "code"}, "role": "item", "extent": [1900, 1914], "container": true, "type": "arg"}, {"body": [{"indent": 4, "type": "para", "extent": [2034, 2111], "text": ["The distance from the origin point to the closest point on the geometry."]}], "indent": 0, "returns": true, "role": "item", "extent": [2024, 2034], "container": true, "type": "arg"}], "container": true, "role": "item_group", "type": "arg_group"}], "title": ["xyzdist"], "summary": ["Finds the distance of a point to a geometry."], "attrs": {"showtags": "true", "group": "measure", "type": "vex", "context": "all", "tags": "measure, proximity"}, "included": ["/vex/functions/_common"], "type": "root"}