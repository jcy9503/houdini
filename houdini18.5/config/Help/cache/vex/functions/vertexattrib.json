{"type": "root", "attrs": {"type": "vex", "context": "all", "tags": "vertex, attrib", "group": "attrib", "redirect": "../attrib_suite#vertexattrib", "showtags": "true"}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["vertexattrib"], "extent": [0, 17]}, {"type": "summary", "indent": 0, "text": ["Reads a vertex attribute value from a geometry."], "extent": [121, 176]}, {"type": "usage_group", "body": [{"type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["<type> vertexattrib(<geometry>, string attribute_name, int linear_vertex_index, int &success)"]}], "role": "item", "extent": [176, 280]}, {"type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["<type>[] vertexattrib(<geometry>, string attribute_name, int linear_vertex_index, int &success)"]}], "role": "item", "extent": [280, 387], "body": [{"type": "para", "indent": 4, "text": ["Unlike ", {"scheme": "Vex", "value": "/vex/functions/vertex", "type": "link", "text": "", "fallback_text": "vertex()", "fullpath": "/vex/functions/vertex"}, ", this function does not have a version that takes a primitive number and primitive vertex number. If you have a primitive number and primitive vertex number, you can convert them into a linear index using ", {"scheme": "Vex", "value": "/vex/functions/vertexindex", "type": "link", "text": "", "fallback_text": "vertexindex()", "fullpath": "/vex/functions/vertexindex"}, "."], "extent": [387, 636]}], "container": true}], "container": true, "role": "item_group"}, {"type": "arg_group", "body": [{"body": [{"indent": 4, "type": "para", "extent": [58, 235], "text": ["When running in the context of a node (such as a wrangle SOP), this argument can be an integer representing the input number (starting at 0) to read the geometry from."]}, {"indent": 4, "type": "para", "extent": [235, 423], "text": ["Alternatively, the argument can be a string specifying a geometry file (for example, a ", {"text": [".bgeo"], "type": "code"}, ") to read from. When running inside Houdini, this can be an ", {"text": ["op:/path/to/sop"], "type": "code"}, " reference."]}], "indent": 0, "text": [{"text": ["<geometry>"], "type": "code"}], "role": "item", "attrs": {"id": "geometry"}, "extent": [16, 35], "container": true, "type": "arg"}, {"body": [{"indent": 4, "type": "para", "extent": [1816, 1871], "text": ["The name of the attribute (or intrinsic) to read."]}], "indent": 0, "text": {"type": "code", "text": {"text": ["attribute_name"], "type": "code"}}, "role": "item", "attrs": {"id": "attribname"}, "extent": [1770, 1791], "container": true, "type": "arg"}, {"type": "arg", "indent": 0, "text": {"type": "code", "text": ["linear_vertex_index"]}, "role": "item", "extent": [694, 720], "body": [{"type": "para", "indent": 4, "text": ["A linear index into the list of all vertices. If you have a primitive number and primitive vertex number, you can convert them into a linear index using ", {"scheme": "Vex", "value": "/vex/functions/vertexindex", "type": "link", "text": "", "fallback_text": "vertexindex()", "fullpath": "/vex/functions/vertexindex"}, "."], "extent": [720, 897]}], "container": true}, {"type": "arg", "indent": 0, "text": {"type": "code", "text": ["success"]}, "role": "item", "extent": [897, 911], "body": [{"type": "para", "indent": 4, "text": ["The function overwrites this variable with ", {"type": "code", "text": ["1"]}, " if the attribute exists and was read successfully, or ", {"type": "code", "text": ["0"]}, " otherwise."], "extent": [911, 1032]}], "container": true}, {"type": "arg", "indent": 0, "role": "item", "extent": [1032, 1042], "body": [{"type": "para", "indent": 4, "text": ["The value of the given attribute on the given point number. "], "extent": [1042, 1107]}], "container": true, "returns": true}], "container": true, "role": "item_group"}], "title": ["vertexattrib"], "summary": ["Reads a vertex attribute value from a geometry."], "included": ["/vex/functions/_common"]}