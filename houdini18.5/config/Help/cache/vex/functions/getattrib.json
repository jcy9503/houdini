{"type": "root", "attrs": {"type": "vex", "context": "all", "tags": "attrib", "group": "attrib", "redirect": "../attrib_suite#getattrib", "showtags": "true"}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["getattrib"], "extent": [0, 14]}, {"type": "summary", "indent": 0, "text": ["Reads an attribute value from geometry, with validity check."], "extent": [107, 175]}, {"type": "usage_group", "body": [{"type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["<type> getattrib(<geometry>, string attribclass, string attribute_name, int elemnum, int &success)"]}], "role": "item", "extent": [175, 284]}, {"type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["<type>[] getattrib(<geometry>, string attribclass, string attribute_name, int elemnum, int &success)"]}], "role": "item", "extent": [284, 400], "body": [{"type": "para", "indent": 4, "text": ["This general form lets you specify the attribute \"class\" at run-time. This can be useful for writing general code that can work on different classes.\n    If you know the class of attribute you want to read ahead of time, using ", {"scheme": "Vex", "value": "/vex/functions/detailattrib", "type": "link", "text": "", "fallback_text": "detailattrib()", "fullpath": "/vex/functions/detailattrib"}, ", ", {"scheme": "Vex", "value": "/vex/functions/primattrib", "type": "link", "text": "", "fallback_text": "primattrib()", "fullpath": "/vex/functions/primattrib"}, ", ", {"scheme": "Vex", "value": "/vex/functions/pointattrib", "type": "link", "text": "", "fallback_text": "pointattrib()", "fullpath": "/vex/functions/pointattrib"}, ", or ", {"scheme": "Vex", "value": "/vex/functions/vertexattrib", "type": "link", "text": "", "fallback_text": "vertexattrib()", "fullpath": "/vex/functions/vertexattrib"}, " may be faster."], "extent": [400, 726]}], "container": true}], "container": true, "role": "item_group"}, {"type": "arg_group", "body": [{"body": [{"indent": 4, "type": "para", "extent": [58, 235], "text": ["When running in the context of a node (such as a wrangle SOP), this argument can be an integer representing the input number (starting at 0) to read the geometry from."]}, {"indent": 4, "type": "para", "extent": [235, 423], "text": ["Alternatively, the argument can be a string specifying a geometry file (for example, a ", {"text": [".bgeo"], "type": "code"}, ") to read from. When running inside Houdini, this can be an ", {"text": ["op:/path/to/sop"], "type": "code"}, " reference."]}], "indent": 0, "text": [{"text": ["<geometry>"], "type": "code"}], "role": "item", "attrs": {"id": "geometry"}, "extent": [16, 35], "container": true, "type": "arg"}, {"body": [{"indent": 4, "type": "para", "extent": [1491, 1571], "text": ["One of ", {"text": ["\"detail\""], "type": "code"}, " (or ", {"text": ["\"global\""], "type": "code"}, "), ", {"text": ["\"point\""], "type": "code"}, ", ", {"text": ["\"prim\""], "type": "code"}, ", or ", {"text": ["\"vertex\""], "type": "code"}, "."]}, {"indent": 4, "type": "para", "extent": [1571, 1677], "text": ["You can also use ", {"text": ["\"primgroup\""], "type": "code"}, ", ", {"text": ["\"pointgroup\""], "type": "code"}, " or ", {"text": ["\"vertexgroup\""], "type": "code"}, " to ", {"text": ["read from groups"], "fullpath": "/vex/groups", "scheme": null, "type": "link", "value": "/vex/groups"}, "."]}], "indent": 0, "text": {"type": "code", "text": {"text": ["attribclass"], "type": "code"}}, "role": "item", "attrs": {"id": "attribclass"}, "extent": [1447, 1465], "container": true, "type": "arg"}, {"body": [{"indent": 4, "type": "para", "extent": [1816, 1871], "text": ["The name of the attribute (or intrinsic) to read."]}], "indent": 0, "text": {"type": "code", "text": {"text": ["attribute_name"], "type": "code"}}, "role": "item", "attrs": {"id": "attribname"}, "extent": [1770, 1791], "container": true, "type": "arg"}, {"body": [{"indent": 4, "type": "para", "extent": [1907, 2069], "text": ["The point/primitive/vertex number to read the attribute value from. For detail attributes, use ", {"text": ["0"], "type": "code"}, " here (the argument is ignored for detail attributes)."]}, {"indent": 4, "type": "para", "extent": [2069, 2206], "text": ["To get the linear vertex number given a primitive number and the vertex number on the primitive, use the ", {"text": "", "value": "/vex/functions/primvertex", "fallback_text": "primvertex()", "fullpath": "/vex/functions/primvertex", "scheme": "Vex", "type": "link"}, " function."]}], "indent": 0, "text": {"type": "code", "text": {"text": ["elemnum"], "type": "code"}}, "role": "item", "attrs": {"id": "elemnum"}, "extent": [1871, 1885], "container": true, "type": "arg"}, {"type": "arg", "indent": 0, "text": {"type": "code", "text": ["success"]}, "role": "item", "extent": [842, 856], "body": [{"type": "para", "indent": 4, "text": ["If the given attribute exists and can be read, the function sets this variable to ", {"type": "code", "text": ["1"]}, ". Otherwise, it sets this variable to ", {"type": "code", "text": ["0"]}, "."], "extent": [856, 989]}], "container": true}, {"type": "arg", "indent": 0, "role": "item", "extent": [989, 999], "body": [{"type": "para", "indent": 4, "text": ["The value of the attribute."], "extent": [999, 1032]}], "container": true, "returns": true}], "container": true, "role": "item_group"}], "title": ["getattrib"], "summary": ["Reads an attribute value from geometry, with validity check."], "included": ["/vex/functions/_common"]}